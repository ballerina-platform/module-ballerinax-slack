// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

# One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://slack.com/api") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    resource isolated function post admin\.apps\.approve(AdminAppsApproveBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse|error {
        string resourcePath = string `/admin.apps.approve`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.apps\.approved\.list(map<string|string[]> headers = {}, *AdminAppsApprovedListQueries queries) returns DefaultSuccessResponse1|error {
        string resourcePath = string `/admin.apps.approved.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.apps\.requests\.list(map<string|string[]> headers = {}, *AdminAppsRequestsListQueries queries) returns DefaultSuccessResponse2|error {
        string resourcePath = string `/admin.apps.requests.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.apps\.restrict(AdminAppsRestrictBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse3|error {
        string resourcePath = string `/admin.apps.restrict`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.apps\.restricted\.list(map<string|string[]> headers = {}, *AdminAppsRestrictedListQueries queries) returns DefaultSuccessResponse4|error {
        string resourcePath = string `/admin.apps.restricted.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.conversations\.archive(AdminConversationsArchiveBody payload, map<string|string[]> headers = {}) returns AdminConversationsArchiveResponse|error {
        string resourcePath = string `/admin.conversations.archive`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.convertToPrivate(AdminConversationsConvertToPrivateBody payload, map<string|string[]> headers = {}) returns AdminConversationsConvertToPrivateResponse|error {
        string resourcePath = string `/admin.conversations.convertToPrivate`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.create(AdminConversationsCreateBody payload, map<string|string[]> headers = {}) returns AdminConversationsCreateResponse|error {
        string resourcePath = string `/admin.conversations.create`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.delete(AdminConversationsDeleteBody payload, map<string|string[]> headers = {}) returns AdminConversationsDeleteResponse|error {
        string resourcePath = string `/admin.conversations.delete`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.disconnectShared(AdminConversationsDisconnectSharedBody payload, map<string|string[]> headers = {}) returns AdminConversationsRenameResponse|error {
        string resourcePath = string `/admin.conversations.disconnectShared`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.conversations\.ekm\.listOriginalConnectedChannelInfo(map<string|string[]> headers = {}, *AdminConversationsEkmListOriginalConnectedChannelInfoQueries queries) returns DefaultSuccessResponse5|error {
        string resourcePath = string `/admin.conversations.ekm.listOriginalConnectedChannelInfo`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.conversations\.getConversationPrefs(map<string|string[]> headers = {}, *AdminConversationsGetConversationPrefsQueries queries) returns AdminConversationsGetConversationPrefsResponse|error {
        string resourcePath = string `/admin.conversations.getConversationPrefs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.conversations\.getTeams(map<string|string[]> headers = {}, *AdminConversationsGetTeamsQueries queries) returns AdminConversationsGetTeamsResponse|error {
        string resourcePath = string `/admin.conversations.getTeams`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.conversations\.invite(AdminConversationsInviteBody payload, map<string|string[]> headers = {}) returns AdminConversationsInviteResponse|error {
        string resourcePath = string `/admin.conversations.invite`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.rename(AdminConversationsRenameBody payload, map<string|string[]> headers = {}) returns AdminConversationsRenameResponse1|error {
        string resourcePath = string `/admin.conversations.rename`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.restrictAccess\.addGroup(AdminConversationsRestrictAccessAddGroupBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse6|error {
        string resourcePath = string `/admin.conversations.restrictAccess.addGroup`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.conversations\.restrictAccess\.listGroups(map<string|string[]> headers = {}, *AdminConversationsRestrictAccessListGroupsQueries queries) returns DefaultSuccessResponse7|error {
        string resourcePath = string `/admin.conversations.restrictAccess.listGroups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.conversations\.restrictAccess\.removeGroup(AdminConversationsRestrictAccessRemoveGroupBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse8|error {
        string resourcePath = string `/admin.conversations.restrictAccess.removeGroup`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.conversations\.search(map<string|string[]> headers = {}, *AdminConversationsSearchQueries queries) returns AdminConversationsSearchResponse|error {
        string resourcePath = string `/admin.conversations.search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.conversations\.setConversationPrefs(AdminConversationsSetConversationPrefsBody payload, map<string|string[]> headers = {}) returns AdminConversationsSetConversationPrefsResponse|error {
        string resourcePath = string `/admin.conversations.setConversationPrefs`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.setTeams(AdminConversationsSetTeamsBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse9|error {
        string resourcePath = string `/admin.conversations.setTeams`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.conversations\.unarchive(AdminConversationsUnarchiveBody payload, map<string|string[]> headers = {}) returns AdminConversationsUnarchiveResponse|error {
        string resourcePath = string `/admin.conversations.unarchive`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.emoji\.add(AdminEmojiAddBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse10|error {
        string resourcePath = string `/admin.emoji.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.emoji\.addAlias(AdminEmojiAddAliasBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse11|error {
        string resourcePath = string `/admin.emoji.addAlias`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.emoji\.list(map<string|string[]> headers = {}, *AdminEmojiListQueries queries) returns DefaultSuccessResponse12|error {
        string resourcePath = string `/admin.emoji.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.emoji\.remove(AdminEmojiRemoveBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse13|error {
        string resourcePath = string `/admin.emoji.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.emoji\.rename(AdminEmojiRenameBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse14|error {
        string resourcePath = string `/admin.emoji.rename`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.inviteRequests\.approve(record {string invite_request_id; string team_id?;} payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse15|error {
        string resourcePath = string `/admin.inviteRequests.approve`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.inviteRequests\.approved\.list(map<string|string[]> headers = {}, *AdminInviteRequestsApprovedListQueries queries) returns DefaultSuccessResponse16|error {
        string resourcePath = string `/admin.inviteRequests.approved.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.inviteRequests\.denied\.list(map<string|string[]> headers = {}, *AdminInviteRequestsDeniedListQueries queries) returns DefaultSuccessResponse17|error {
        string resourcePath = string `/admin.inviteRequests.denied.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.inviteRequests\.deny(record {string invite_request_id; string team_id?;} payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse18|error {
        string resourcePath = string `/admin.inviteRequests.deny`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.inviteRequests\.list(map<string|string[]> headers = {}, *AdminInviteRequestsListQueries queries) returns DefaultSuccessResponse19|error {
        string resourcePath = string `/admin.inviteRequests.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.teams\.admins\.list(map<string|string[]> headers = {}, *AdminTeamsAdminsListQueries queries) returns DefaultSuccessResponse20|error {
        string resourcePath = string `/admin.teams.admins.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.teams\.create(AdminTeamsCreateBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse21|error {
        string resourcePath = string `/admin.teams.create`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.teams\.list(map<string|string[]> headers = {}, *AdminTeamsListQueries queries) returns DefaultSuccessResponse22|error {
        string resourcePath = string `/admin.teams.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.teams\.owners\.list(map<string|string[]> headers = {}, *AdminTeamsOwnersListQueries queries) returns DefaultSuccessResponse23|error {
        string resourcePath = string `/admin.teams.owners.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get admin\.teams\.settings\.info(map<string|string[]> headers = {}, *AdminTeamsSettingsInfoQueries queries) returns DefaultSuccessResponse24|error {
        string resourcePath = string `/admin.teams.settings.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.teams\.settings\.setDefaultChannels(AdminTeamsSettingsSetDefaultChannelsBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse25|error {
        string resourcePath = string `/admin.teams.settings.setDefaultChannels`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.teams\.settings\.setDescription(AdminTeamsSettingsSetDescriptionBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse26|error {
        string resourcePath = string `/admin.teams.settings.setDescription`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.teams\.settings\.setDiscoverability(AdminTeamsSettingsSetDiscoverabilityBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse27|error {
        string resourcePath = string `/admin.teams.settings.setDiscoverability`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.teams\.settings\.setIcon(AdminTeamsSettingsSetIconBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse28|error {
        string resourcePath = string `/admin.teams.settings.setIcon`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.teams\.settings\.setName(AdminTeamsSettingsSetNameBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse29|error {
        string resourcePath = string `/admin.teams.settings.setName`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.usergroups\.addChannels(AdminUsergroupsAddChannelsBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse30|error {
        string resourcePath = string `/admin.usergroups.addChannels`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.usergroups\.addTeams(AdminUsergroupsAddTeamsBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse31|error {
        string resourcePath = string `/admin.usergroups.addTeams`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.usergroups\.listChannels(map<string|string[]> headers = {}, *AdminUsergroupsListChannelsQueries queries) returns DefaultSuccessResponse32|error {
        string resourcePath = string `/admin.usergroups.listChannels`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.usergroups\.removeChannels(AdminUsergroupsRemoveChannelsBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse33|error {
        string resourcePath = string `/admin.usergroups.removeChannels`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.assign(AdminUsersAssignBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse34|error {
        string resourcePath = string `/admin.users.assign`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.invite(AdminUsersInviteBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse35|error {
        string resourcePath = string `/admin.users.invite`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get admin\.users\.list(map<string|string[]> headers = {}, *AdminUsersListQueries queries) returns DefaultSuccessResponse36|error {
        string resourcePath = string `/admin.users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post admin\.users\.remove(AdminUsersRemoveBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse37|error {
        string resourcePath = string `/admin.users.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.session\.invalidate(AdminUsersSessionInvalidateBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse38|error {
        string resourcePath = string `/admin.users.session.invalidate`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.session\.reset(AdminUsersSessionResetBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse39|error {
        string resourcePath = string `/admin.users.session.reset`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.setAdmin(AdminUsersSetAdminBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse40|error {
        string resourcePath = string `/admin.users.setAdmin`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.setExpiration(AdminUsersSetExpirationBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse41|error {
        string resourcePath = string `/admin.users.setExpiration`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post admin\.users\.setOwner(AdminUsersSetOwnerBody payload, AdminUsersSetOwnerHeaders headers) returns DefaultSuccessResponse42|error {
        string resourcePath = string `/admin.users.setOwner`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post admin\.users\.setRegular(AdminUsersSetRegularBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse43|error {
        string resourcePath = string `/admin.users.setRegular`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get api\.test(map<string|string[]> headers = {}, *ApiTestQueries queries) returns ApiTestResponse|error {
        string resourcePath = string `/api.test`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.event\.authorizations\.list(map<string|string[]> headers = {}, *AppsEventAuthorizationsListQueries queries) returns DefaultSuccessResponse44|error {
        string resourcePath = string `/apps.event.authorizations.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.info(map<string|string[]> headers = {}) returns AppsPermissionsInfoResponse|error {
        string resourcePath = string `/apps.permissions.info`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.request(map<string|string[]> headers = {}, *AppsPermissionsRequestQueries queries) returns AppsPermissionsRequestResponse|error {
        string resourcePath = string `/apps.permissions.request`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.resources\.list(map<string|string[]> headers = {}, *AppsPermissionsResourcesListQueries queries) returns AppsPermissionsResourcesListResponse|error {
        string resourcePath = string `/apps.permissions.resources.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.scopes\.list(map<string|string[]> headers = {}) returns ApiPermissionsScopesListResponse|error {
        string resourcePath = string `/apps.permissions.scopes.list`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.users\.list(map<string|string[]> headers = {}, *AppsPermissionsUsersListQueries queries) returns DefaultSuccessResponse45|error {
        string resourcePath = string `/apps.permissions.users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.permissions\.users\.request(map<string|string[]> headers = {}, *AppsPermissionsUsersRequestQueries queries) returns DefaultSuccessResponse46|error {
        string resourcePath = string `/apps.permissions.users.request`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get apps\.uninstall(map<string|string[]> headers = {}, *AppsUninstallQueries queries) returns AppsUninstallResponse|error {
        string resourcePath = string `/apps.uninstall`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get auth\.revoke(map<string|string[]> headers = {}, *AuthRevokeQueries queries) returns AuthRevokeResponse|error {
        string resourcePath = string `/auth.revoke`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get auth\.test(map<string|string[]> headers = {}) returns AuthTestResponse|error {
        string resourcePath = string `/auth.test`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get bots\.info(map<string|string[]> headers = {}, *BotsInfoQueries queries) returns BotsInfoResponse|error {
        string resourcePath = string `/bots.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post calls\.add(CallsAddBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse47|error {
        string resourcePath = string `/calls.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post calls\.end(CallsEndBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse48|error {
        string resourcePath = string `/calls.end`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get calls\.info(map<string|string[]> headers = {}, *CallsInfoQueries queries) returns DefaultSuccessResponse49|error {
        string resourcePath = string `/calls.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post calls\.participants\.add(CallsParticipantsAddBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse50|error {
        string resourcePath = string `/calls.participants.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post calls\.participants\.remove(CallsParticipantsRemoveBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse51|error {
        string resourcePath = string `/calls.participants.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post calls\.update(CallsUpdateBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse52|error {
        string resourcePath = string `/calls.update`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post chat\.delete(ChatDeleteBody payload, map<string|string[]> headers = {}) returns ChatDeleteResponse|error {
        string resourcePath = string `/chat.delete`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post chat\.deleteScheduledMessage(ChatDeleteScheduledMessageBody payload, map<string|string[]> headers = {}) returns ChatDeleteScheduledMessageResponse|error {
        string resourcePath = string `/chat.deleteScheduledMessage`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get chat\.getPermalink(map<string|string[]> headers = {}, *ChatGetPermalinkQueries queries) returns ChatGetPermalinkResponse|error {
        string resourcePath = string `/chat.getPermalink`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post chat\.meMessage(ChatMeMessageBody payload, map<string|string[]> headers = {}) returns ChatMeMessageResponse|error {
        string resourcePath = string `/chat.meMessage`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post chat\.postEphemeral(ChatPostEphemeralBody payload, map<string|string[]> headers = {}) returns ChatPostEphemeralResponse|error {
        string resourcePath = string `/chat.postEphemeral`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post chat\.postMessage(ChatPostMessageBody payload, map<string|string[]> headers = {}) returns ChatPostMessageResponse|error {
        string resourcePath = string `/chat.postMessage`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post chat\.scheduleMessage(ChatScheduleMessageBody payload, map<string|string[]> headers = {}) returns ChatScheduleMessageResponse|error {
        string resourcePath = string `/chat.scheduleMessage`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get chat\.scheduledMessages\.list(map<string|string[]> headers = {}, *ChatScheduledMessagesListQueries queries) returns ChatScheduledMessagesListResponse|error {
        string resourcePath = string `/chat.scheduledMessages.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post chat\.unfurl(ChatUnfurlBody payload, map<string|string[]> headers = {}) returns ChatUnfurlResponse|error {
        string resourcePath = string `/chat.unfurl`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post chat\.update(ChatUpdateBody payload, map<string|string[]> headers = {}) returns ChatUpdateResponse|error {
        string resourcePath = string `/chat.update`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.archive(ConversationsArchiveBody payload, map<string|string[]> headers = {}) returns ConversationsArchiveResponse|error {
        string resourcePath = string `/conversations.archive`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.close(ConversationsCloseBody payload, map<string|string[]> headers = {}) returns ConversationsCloseResponse|error {
        string resourcePath = string `/conversations.close`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.create(ConversationsCreateBody payload, map<string|string[]> headers = {}) returns ConversationsCreateResponse|error {
        string resourcePath = string `/conversations.create`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get conversations\.history(map<string|string[]> headers = {}, *ConversationsHistoryQueries queries) returns ConversationsHistoryResponse|error {
        string resourcePath = string `/conversations.history`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get conversations\.info(map<string|string[]> headers = {}, *ConversationsInfoQueries queries) returns ConversationsInfoResponse|error {
        string resourcePath = string `/conversations.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post conversations\.invite(ConversationsInviteBody payload, map<string|string[]> headers = {}) returns ConversationsInviteErrorResponse|error {
        string resourcePath = string `/conversations.invite`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.join(ConversationsJoinBody payload, map<string|string[]> headers = {}) returns ConversationsJoinResponse|error {
        string resourcePath = string `/conversations.join`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.kick(ConversationsKickBody payload, map<string|string[]> headers = {}) returns ConversationsKickResponse|error {
        string resourcePath = string `/conversations.kick`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.leave(ConversationsLeaveBody payload, map<string|string[]> headers = {}) returns ConversationsLeaveResponse|error {
        string resourcePath = string `/conversations.leave`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get conversations\.list(map<string|string[]> headers = {}, *ConversationsListQueries queries) returns ConversationsListResponse|error {
        string resourcePath = string `/conversations.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post conversations\.mark(ConversationsMarkBody payload, map<string|string[]> headers = {}) returns ConversationsMarkResponse|error {
        string resourcePath = string `/conversations.mark`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get conversations\.members(map<string|string[]> headers = {}, *ConversationsMembersQueries queries) returns ConversationsMembersResponse|error {
        string resourcePath = string `/conversations.members`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post conversations\.open(ConversationsOpenBody payload, map<string|string[]> headers = {}) returns ConversationsOpenResponse|error {
        string resourcePath = string `/conversations.open`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.rename(ConversationsRenameBody payload, map<string|string[]> headers = {}) returns ConversationsRenameResponse|error {
        string resourcePath = string `/conversations.rename`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get conversations\.replies(map<string|string[]> headers = {}, *ConversationsRepliesQueries queries) returns ConversationsRepliesResponse|error {
        string resourcePath = string `/conversations.replies`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post conversations\.setPurpose(ConversationsSetPurposeBody payload, map<string|string[]> headers = {}) returns ConversationsSetPurposeResponse|error {
        string resourcePath = string `/conversations.setPurpose`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.setTopic(ConversationsSetTopicBody payload, map<string|string[]> headers = {}) returns ConversationsSetTopicResponse|error {
        string resourcePath = string `/conversations.setTopic`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post conversations\.unarchive(ConversationsUnarchiveBody payload, map<string|string[]> headers = {}) returns ConversationsUnarchiveResponse|error {
        string resourcePath = string `/conversations.unarchive`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get dialog\.open(map<string|string[]> headers = {}, *DialogOpenQueries queries) returns DialogOpenResponse|error {
        string resourcePath = string `/dialog.open`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post dnd\.endDnd(map<string|string[]> headers = {}) returns DndEndDndResponse|error {
        string resourcePath = string `/dnd.endDnd`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post dnd\.endSnooze(map<string|string[]> headers = {}) returns DndEndSnoozeResponse|error {
        string resourcePath = string `/dnd.endSnooze`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get dnd\.info(map<string|string[]> headers = {}, *DndInfoQueries queries) returns DndInfoResponse|error {
        string resourcePath = string `/dnd.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post dnd\.setSnooze(DndSetSnoozeBody payload, map<string|string[]> headers = {}) returns DndSetSnoozeResponse|error {
        string resourcePath = string `/dnd.setSnooze`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get dnd\.teamInfo(map<string|string[]> headers = {}, *DndTeamInfoQueries queries) returns DefaultSuccessResponse53|error {
        string resourcePath = string `/dnd.teamInfo`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get emoji\.list(map<string|string[]> headers = {}) returns DefaultSuccessResponse54|error {
        string resourcePath = string `/emoji.list`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post files\.comments\.delete(FilesCommentsDeleteBody payload, map<string|string[]> headers = {}) returns FilesCommentsDeleteResponse|error {
        string resourcePath = string `/files.comments.delete`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.delete(FilesDeleteBody payload, map<string|string[]> headers = {}) returns FilesDeleteResponse|error {
        string resourcePath = string `/files.delete`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get files\.info(map<string|string[]> headers = {}, *FilesInfoQueries queries) returns FilesInfoResponse|error {
        string resourcePath = string `/files.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.list(map<string|string[]> headers = {}, *FilesListQueries queries) returns FilesListResponse|error {
        string resourcePath = string `/files.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post files\.remote\.add(FilesRemoteAddBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse55|error {
        string resourcePath = string `/files.remote.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get files\.remote\.info(map<string|string[]> headers = {}, *FilesRemoteInfoQueries queries) returns DefaultSuccessResponse56|error {
        string resourcePath = string `/files.remote.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get files\.remote\.list(map<string|string[]> headers = {}, *FilesRemoteListQueries queries) returns DefaultSuccessResponse57|error {
        string resourcePath = string `/files.remote.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post files\.remote\.remove(FilesRemoteRemoveBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse58|error {
        string resourcePath = string `/files.remote.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get files\.remote\.share(map<string|string[]> headers = {}, *FilesRemoteShareQueries queries) returns DefaultSuccessResponse59|error {
        string resourcePath = string `/files.remote.share`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post files\.remote\.update(FilesRemoteUpdateBody payload, map<string|string[]> headers = {}) returns DefaultSuccessResponse60|error {
        string resourcePath = string `/files.remote.update`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.revokePublicURL(FilesRevokePublicURLBody payload, map<string|string[]> headers = {}) returns FilesRevokePublicURLResponse|error {
        string resourcePath = string `/files.revokePublicURL`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.sharedPublicURL(FilesSharedPublicURLBody payload, map<string|string[]> headers = {}) returns FilesSharedPublicURLResponse|error {
        string resourcePath = string `/files.sharedPublicURL`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post files\.upload(FilesUploadBody payload, map<string|string[]> headers = {}) returns FilesUploadResponse|error {
        string resourcePath = string `/files.upload`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get migration\.exchange(map<string|string[]> headers = {}, *MigrationExchangeQueries queries) returns MigrationExchangeResponse|error {
        string resourcePath = string `/migration.exchange`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get oauth\.access(map<string|string[]> headers = {}, *OauthAccessQueries queries) returns DefaultSuccessResponse61|error {
        string resourcePath = string `/oauth.access`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get oauth\.token(map<string|string[]> headers = {}, *OauthTokenQueries queries) returns DefaultSuccessResponse62|error {
        string resourcePath = string `/oauth.token`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get oauth\.v2\.access(map<string|string[]> headers = {}, *OauthV2AccessQueries queries) returns DefaultSuccessResponse63|error {
        string resourcePath = string `/oauth.v2.access`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post pins\.add(PinsAddBody payload, map<string|string[]> headers = {}) returns PinsAddResponse|error {
        string resourcePath = string `/pins.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get pins\.list(map<string|string[]> headers = {}, *PinsListQueries queries) returns InlineResponseItems200[]|error {
        string resourcePath = string `/pins.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post pins\.remove(PinsRemoveBody payload, map<string|string[]> headers = {}) returns PinsRemoveResponse|error {
        string resourcePath = string `/pins.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post reactions\.add(ReactionsAddBody payload, map<string|string[]> headers = {}) returns ReactionsAddResponse|error {
        string resourcePath = string `/reactions.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get reactions\.get(map<string|string[]> headers = {}, *ReactionsGetQueries queries) returns InlineResponseItems2001[]|error {
        string resourcePath = string `/reactions.get`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get reactions\.list(map<string|string[]> headers = {}, *ReactionsListQueries queries) returns ReactionsListResponse|error {
        string resourcePath = string `/reactions.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post reactions\.remove(ReactionsRemoveBody payload, map<string|string[]> headers = {}) returns ReactionsRemoveResponse|error {
        string resourcePath = string `/reactions.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post reminders\.add(RemindersAddBody payload, map<string|string[]> headers = {}) returns RemindersAddResponse|error {
        string resourcePath = string `/reminders.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post reminders\.complete(RemindersCompleteBody payload, map<string|string[]> headers = {}) returns RemindersCompleteResponse|error {
        string resourcePath = string `/reminders.complete`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post reminders\.delete(RemindersDeleteBody payload, map<string|string[]> headers = {}) returns RemindersDeleteResponse|error {
        string resourcePath = string `/reminders.delete`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get reminders\.info(map<string|string[]> headers = {}, *RemindersInfoQueries queries) returns RemindersInfoResponse|error {
        string resourcePath = string `/reminders.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get reminders\.list(map<string|string[]> headers = {}) returns RemindersListResponse|error {
        string resourcePath = string `/reminders.list`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get rtm\.connect(map<string|string[]> headers = {}, *RtmConnectQueries queries) returns RtmConnectResponse|error {
        string resourcePath = string `/rtm.connect`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get search\.messages(map<string|string[]> headers = {}, *SearchMessagesQueries queries) returns DefaultSuccessResponse64|error {
        string resourcePath = string `/search.messages`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post stars\.add(StarsAddBody payload, map<string|string[]> headers = {}) returns StarsAddResponse|error {
        string resourcePath = string `/stars.add`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get stars\.list(map<string|string[]> headers = {}, *StarsListQueries queries) returns StarsListResponse|error {
        string resourcePath = string `/stars.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post stars\.remove(StarsRemoveBody payload, map<string|string[]> headers = {}) returns StarsRemoveResponse|error {
        string resourcePath = string `/stars.remove`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get team\.accessLogs(map<string|string[]> headers = {}, *TeamAccessLogsQueries queries) returns TeamAccessLogsResponse|error {
        string resourcePath = string `/team.accessLogs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.billableInfo(map<string|string[]> headers = {}, *TeamBillableInfoQueries queries) returns DefaultSuccessResponse65|error {
        string resourcePath = string `/team.billableInfo`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.info(map<string|string[]> headers = {}, *TeamInfoQueries queries) returns TeamInfoResponse|error {
        string resourcePath = string `/team.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.integrationLogs(map<string|string[]> headers = {}, *TeamIntegrationLogsQueries queries) returns TeamIntegrationLogsResponse|error {
        string resourcePath = string `/team.integrationLogs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get team\.profile\.get(map<string|string[]> headers = {}, *TeamProfileGetQueries queries) returns TeamProfileGetResponse|error {
        string resourcePath = string `/team.profile.get`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post usergroups\.create(UsergroupsCreateBody payload, map<string|string[]> headers = {}) returns UsergroupsCreateResponse|error {
        string resourcePath = string `/usergroups.create`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post usergroups\.disable(UsergroupsDisableBody payload, map<string|string[]> headers = {}) returns UsergroupsDisableResponse|error {
        string resourcePath = string `/usergroups.disable`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post usergroups\.enable(UsergroupsEnableBody payload, map<string|string[]> headers = {}) returns UsergroupsEnableResponse|error {
        string resourcePath = string `/usergroups.enable`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get usergroups\.list(map<string|string[]> headers = {}, *UsergroupsListQueries queries) returns UsergroupsListResponse|error {
        string resourcePath = string `/usergroups.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post usergroups\.update(UsergroupsUpdateBody payload, map<string|string[]> headers = {}) returns UsergroupsUpdateResponse|error {
        string resourcePath = string `/usergroups.update`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get usergroups\.users\.list(map<string|string[]> headers = {}, *UsergroupsUsersListQueries queries) returns UsergroupsUsersListResponse|error {
        string resourcePath = string `/usergroups.users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post usergroups\.users\.update(UsergroupsUsersUpdateBody payload, map<string|string[]> headers = {}) returns UsergroupsUsersUpdateResponse|error {
        string resourcePath = string `/usergroups.users.update`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get users\.conversations(map<string|string[]> headers = {}, *UsersConversationsQueries queries) returns UsersConversationsResponse|error {
        string resourcePath = string `/users.conversations`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post users\.deletePhoto(UsersDeletePhotoBody payload, map<string|string[]> headers = {}) returns UsersDeletePhotoResponse|error {
        string resourcePath = string `/users.deletePhoto`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get users\.getPresence(map<string|string[]> headers = {}, *UsersGetPresenceQueries queries) returns APIMethodUsersGetPresence|error {
        string resourcePath = string `/users.getPresence`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.identity(map<string|string[]> headers = {}) returns InlineResponseItems2002[]|error {
        string resourcePath = string `/users.identity`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.info(map<string|string[]> headers = {}, *UsersInfoQueries queries) returns UsersInfoResponse|error {
        string resourcePath = string `/users.info`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.list(map<string|string[]> headers = {}, *UsersListQueries queries) returns UsersListResponse|error {
        string resourcePath = string `/users.list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.lookupByEmail(map<string|string[]> headers = {}, *UsersLookupByEmailQueries queries) returns UsersLookupByEmailResponse|error {
        string resourcePath = string `/users.lookupByEmail`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get users\.profile\.get(map<string|string[]> headers = {}, *UsersProfileGetQueries queries) returns UsersProfileGetResponse|error {
        string resourcePath = string `/users.profile.get`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post users\.profile\.set(UsersProfileSetBody payload, map<string|string[]> headers = {}) returns UsersProfileSetResponse|error {
        string resourcePath = string `/users.profile.set`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post users\.setActive(map<string|string[]> headers = {}) returns UsersSetActiveResponse|error {
        string resourcePath = string `/users.setActive`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post users\.setPhoto(UsersSetPhotoBody payload, map<string|string[]> headers = {}) returns UsersSetPhotoResponse|error {
        string resourcePath = string `/users.setPhoto`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post users\.setPresence(UsersSetPresenceBody payload, map<string|string[]> headers = {}) returns UsersSetPresenceResponse|error {
        string resourcePath = string `/users.setPresence`;
        http:Request request = new;
        string encodedRequestBody = createFormURLEncodedRequestBody(check jsondata:toJson(payload).ensureType());
        request.setPayload(encodedRequestBody, "application/x-www-form-urlencoded");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function get views\.open(map<string|string[]> headers = {}, *ViewsOpenQueries queries) returns DefaultSuccessResponse66|error {
        string resourcePath = string `/views.open`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get views\.publish(map<string|string[]> headers = {}, *ViewsPublishQueries queries) returns DefaultSuccessResponse67|error {
        string resourcePath = string `/views.publish`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get views\.push(map<string|string[]> headers = {}, *ViewsPushQueries queries) returns DefaultSuccessResponse68|error {
        string resourcePath = string `/views.push`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get views\.update(map<string|string[]> headers = {}, *ViewsUpdateQueries queries) returns DefaultSuccessResponse69|error {
        string resourcePath = string `/views.update`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get workflows\.stepCompleted(map<string|string[]> headers = {}, *WorkflowsStepCompletedQueries queries) returns DefaultSuccessResponse70|error {
        string resourcePath = string `/workflows.stepCompleted`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get workflows\.stepFailed(map<string|string[]> headers = {}, *WorkflowsStepFailedQueries queries) returns DefaultSuccessResponse71|error {
        string resourcePath = string `/workflows.stepFailed`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get workflows\.updateStep(map<string|string[]> headers = {}, *WorkflowsUpdateStepQueries queries) returns DefaultSuccessResponse72|error {
        string resourcePath = string `/workflows.updateStep`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }
}
