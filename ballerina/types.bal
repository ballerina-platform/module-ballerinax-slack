// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

public type TzAnyOf11 anydata?;

# Represents the Queries record for the operation: views_push
public type ViewsPushQueries record {
    # A [view payload](/reference/surfaces/views). This must be a JSON-encoded string
    string view;
    # Exchange a trigger to post to the user
    @http:Query {name: "trigger_id"}
    string triggerId;
};

public type ConversationsOpenResponseChannel ConversationObj|ChannelAnyOf2;

public type NilBotIdSetWhenDisplayAsBotIsFalse anydata?;

# Schema for successful response from usergroups.users.list method
public type UsergroupsUsersListResponse record {|
    OkTrueDef ok;
    UserIdDef[] users;
|};

# Represents the Queries record for the operation: admin_conversations_search
public type AdminConversationsSearchQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types)
    @http:Query {name: "search_channel_types"}
    string searchChannelTypes?;
    # Comma separated string of team IDs, signifying the workspaces to search through
    @http:Query {name: "team_ids"}
    string teamIds?;
    # Name of the the channel to query by
    string query?;
    # Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10
    int 'limit?;
    # Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
    string sort?;
    # Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
    @http:Query {name: "sort_dir"}
    string sortDir?;
};

public type DeprecationWarningAndPagingStyleTogether record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
    ("method_deprecated")[] warnings;
    string[] messages;
|};

# Schema for successful response from users.profile.set method
public type UsersProfileSetResponse record {|
    UserProfileObj profile;
    OkTrueDef ok;
    @jsondata:Name {value: "email_pending"}
    string emailPending?;
    string username;
|};

public type FilesSharedPublicURLBody record {
    # File to share
    string file?;
};

# Represents the Queries record for the operation: files_list
public type FilesListQueries record {
    # Filter files created after this timestamp (inclusive)
    @http:Query {name: "ts_from"}
    decimal tsFrom?;
    # Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit
    @http:Query {name: "show_files_hidden_by_limit"}
    boolean showFilesHiddenByLimit?;
    # Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list
    string types?;
    # Filter files created before this timestamp (inclusive)
    @http:Query {name: "ts_to"}
    decimal tsTo?;
    # Filter files appearing in a specific channel, indicated by its ID
    string channel?;
    string count?;
    string page?;
    # Filter files created by a single user
    string user?;
};

public type AdminUsersSetAdminBody record {
    # The ID of the user to designate as an admin
    @jsondata:Name {value: "user_id"}
    string userId;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
};

public type '200200AnyOf112 record {|
    FileObj file;
    OkTrueDef ok;
    "file" 'type;
|};

# Schema for successful response from dnd.info method
public type DndInfoResponse record {|
    @jsondata:Name {value: "next_dnd_end_ts"}
    int nextDndEndTs;
    @jsondata:Name {value: "snooze_endtime"}
    int snoozeEndtime?;
    @jsondata:Name {value: "dnd_enabled"}
    boolean dndEnabled;
    @jsondata:Name {value: "next_dnd_start_ts"}
    int nextDndStartTs;
    @jsondata:Name {value: "snooze_enabled"}
    boolean snoozeEnabled?;
    @jsondata:Name {value: "snooze_remaining"}
    int snoozeRemaining?;
    OkTrueDef ok;
|};

public type ConversationsCloseBody record {
    # Conversation to close
    string channel?;
};

public type AppsPermissionsInfoResponseInfoChannel record {
    ResourcesObj resources?;
    ScopesObj scopes?;
};

public type ConversationsInviteBody record {
    # The ID of the public or private channel to invite user(s) to
    string channel?;
    # A comma separated list of user IDs. Up to 1000 users may be listed
    string users?;
};

public type UsersDeletePhotoBody record {
    # Authentication token. Requires scope: `users.profile:write`
    string token;
};

# Schema for successful response of admin.conversations.unarchive
public type AdminConversationsUnarchiveResponse record {|
    OkTrueDef ok;
|};

public type DiscoverableDiscoverableAnyOf12 string;

public type TzTzAnyOf112 string;

public type RtmConnectResponseTeam record {|
    string domain;
    string name;
    TeamDef id;
|};

# Schema for successful response of chat.delete method
public type ChatDeleteResponse record {|
    ChannelDef channel;
    OkTrueDef ok;
    TsDef ts;
|};

# Schema for successful response of admin.conversations.archive
public type AdminConversationsArchiveResponse record {|
    OkTrueDef ok;
|};

public type MessageObjBotId BotIdDef|NilBotIdSetWhenDisplayAsBotIsFalse?;

public type AdminTeamsSettingsSetDiscoverabilityBody record {
    # This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`
    string discoverability;
    # The ID of the workspace to set discoverability on
    @jsondata:Name {value: "team_id"}
    string teamId;
};

# Schema for successful response from chat.postEphemeral method
public type ChatPostEphemeralResponse record {|
    OkTrueDef ok;
    @jsondata:Name {value: "message_ts"}
    TsDef messageTs;
|};

# Schema for successful response from usergroups.enable method
public type UsergroupsEnableResponse record {|
    SubteamObj usergroup;
    OkTrueDef ok;
|};

public type ChatUnfurlBody record {
    # URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments
    string unfurls?;
    # Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
    @jsondata:Name {value: "user_auth_message"}
    string userAuthMessage?;
    # Channel ID of the message
    string channel;
    # Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded
    @jsondata:Name {value: "user_auth_url"}
    string userAuthUrl?;
    # Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain
    @jsondata:Name {value: "user_auth_required"}
    boolean userAuthRequired?;
    # Timestamp of the message to add unfurl behavior to
    string ts;
};

public type BlocksInner record {
    string 'type;
};

public type FilesRemoteUpdateBody record {
    # type of file
    string filetype?;
    # URL of the remote file
    @jsondata:Name {value: "external_url"}
    string externalUrl?;
    # Specify a file by providing its ID
    string file?;
    # Preview of the document via `multipart/form-data`
    @jsondata:Name {value: "preview_image"}
    string previewImage?;
    # Creator defined GUID for the file
    @jsondata:Name {value: "external_id"}
    string externalId?;
    # File containing contents that can be used to improve searchability for the remote file
    @jsondata:Name {value: "indexable_file_contents"}
    string indexableFileContents?;
    # Title of the file being shared
    string title?;
    # Authentication token. Requires scope: `remote_files:write`
    string token?;
};

@constraint:String {pattern: re `^\d{10}\.\d{6}$`}
public type TsDef string;

# Represents the Queries record for the operation: oauth_access
public type OauthAccessQueries record {
    # Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps)
    @http:Query {name: "single_channel"}
    boolean singleChannel?;
    # The `code` param returned via the OAuth callback
    string code?;
    # Issued when you created your application
    @http:Query {name: "client_secret"}
    string clientSecret?;
    # This must match the originally submitted URI (if one was sent)
    @http:Query {name: "redirect_uri"}
    string redirectUri?;
    # Issued when you created your application
    @http:Query {name: "client_id"}
    string clientId?;
};

public type '200200AnyOf122 record {|
    '200Team1 team;
    OkTrueDef ok;
    '200User1 user;
|};

public type TeamProfileFieldObj record {|
    decimal ordering;
    string hint;
    @jsondata:Name {value: "possible_values"}
    string[]? possibleValues?;
    @jsondata:Name {value: "is_hidden"}
    boolean isHidden?;
    TeamProfileFieldObjOptions[] options?;
    @constraint:String {pattern: re `^X[a-zA-Z0-9]{9,}$`}
    string id;
    string label;
    "text"|"date"|"link"|"mailto"|"options_list"|"user" 'type;
    @jsondata:Name {value: "field_name"}
    string? fieldName?;
|};

# Schema for successful response from auth.revoke method
public type AuthRevokeResponse record {|
    OkTrueDef ok;
    boolean revoked;
|};

public type AdminTeamsSettingsSetDefaultChannelsBody record {
    # An array of channel IDs
    @jsondata:Name {value: "channel_ids"}
    string channelIds;
    # ID for the workspace to set the default channel for
    @jsondata:Name {value: "team_id"}
    string teamId;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

# Represents the Queries record for the operation: conversations_info
public type ConversationsInfoQueries record {
    # Set to `true` to include the member count for the specified conversation. Defaults to `false`
    @http:Query {name: "include_num_members"}
    boolean includeNumMembers?;
    # Conversation ID to learn more about
    string channel?;
    # Set this to `true` to receive the locale for this conversation. Defaults to `false`
    @http:Query {name: "include_locale"}
    boolean includeLocale?;
};

@constraint:String {pattern: re `^[E][A-Z0-9]{8,}$`}
public type EnterpriseIdDef string;

# Represents the Queries record for the operation: users_info
public type UsersInfoQueries record {
    # Set this to `true` to receive the locale for this user. Defaults to `false`
    @http:Query {name: "include_locale"}
    boolean includeLocale?;
    # User to get info on
    string user?;
};

public type ChannelAnyOf2 record {|
    @jsondata:Name {value: "last_read"}
    TsDef lastRead?;
    @jsondata:Name {value: "unread_count"}
    decimal unreadCount?;
    @jsondata:Name {value: "is_im"}
    boolean isIm?;
    @jsondata:Name {value: "is_open"}
    boolean isOpen?;
    string created?;
    DmIdDef id;
    @jsondata:Name {value: "unread_count_display"}
    decimal unreadCountDisplay?;
    UserIdDef user?;
    MessageObj latest?;
|};

# Represents the Queries record for the operation: team_billableInfo
public type TeamBillableInfoQueries record {
    # A user to retrieve the billable information for. Defaults to all users
    string user?;
};

# Schema for successful response from apps.uninstall method
public type AppsUninstallResponse record {|
    OkTrueDef ok;
|};

public type TeamObj record {|
    @jsondata:Name {value: "primary_owner"}
    PrimaryOwnerObj primaryOwner?;
    @jsondata:Name {value: "is_enterprise"}
    int isEnterprise?;
    IconObj icon;
    string? description?;
    @jsondata:Name {value: "msg_edit_window_mins"}
    int msgEditWindowMins?;
    @jsondata:Name {value: "avatar_base_url"}
    string avatarBaseUrl?;
    @jsondata:Name {value: "sso_provider"}
    TeamObjSsoProvider ssoProvider?;
    string locale?;
    boolean archived?;
    @jsondata:Name {value: "messages_count"}
    int messagesCount?;
    @jsondata:Name {value: "pay_prod_cur"}
    string payProdCur?;
    WorkspaceIdDef id;
    @jsondata:Name {value: "is_over_storage_limit"}
    boolean isOverStorageLimit?;
    ""|"std"|"plus"|"compliance"|"enterprise" plan?;
    @jsondata:Name {value: "external_org_migrations"}
    ExternalOrgMigrationsObj externalOrgMigrations?;
    @jsondata:Name {value: "over_integrations_limit"}
    boolean overIntegrationsLimit?;
    int created?;
    @jsondata:Name {value: "is_assigned"}
    boolean isAssigned?;
    @jsondata:Name {value: "limit_ts"}
    int limitTs?;
    @jsondata:Name {value: "enterprise_id"}
    EnterpriseIdDef enterpriseId?;
    boolean deleted?;
    @jsondata:Name {value: "has_compliance_export"}
    boolean hasComplianceExport?;
    @jsondata:Name {value: "date_create"}
    int dateCreate?;
    TeamObjDiscoverable[] discoverable?;
    string domain;
    string name;
    @jsondata:Name {value: "email_domain"}
    string emailDomain;
    @jsondata:Name {value: "enterprise_name"}
    EnterpriseNameDef enterpriseName?;
    @jsondata:Name {value: "over_storage_limit"}
    boolean overStorageLimit?;
|};

# Schema for successful response from usergroups.create method
public type UsergroupsCreateResponse record {|
    SubteamObj usergroup;
    OkTrueDef ok;
|};

# Schema for successful response from pins.remove method
public type PinsRemoveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response of admin.conversations.create
public type AdminConversationsCreateResponse record {|
    OkTrueDef ok;
    @jsondata:Name {value: "channel_id"}
    ChannelIdDef channelId?;
|};

public type ChannelObjPurpose record {|
    @jsondata:Name {value: "last_set"}
    int lastSet;
    TopicPurposeCreatorDef creator;
    string value;
|};

public type AdminUsersRemoveBody record {
    # The ID of the user to remove
    @jsondata:Name {value: "user_id"}
    string userId;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
};

public type ConversationObjParentConversation ChannelDef|ParentConversationAnyOf2?;

# Represents the Queries record for the operation: files_remote_info
public type FilesRemoteInfoQueries record {
    # Specify a file by providing its ID
    string file?;
    # Creator defined GUID for the file
    @http:Query {name: "external_id"}
    string externalId?;
};

public type UserObjTz1 TzAnyOf11|TzTzAnyOf112?;

public type EnterpriseNameDef string;

public type BotsInfoResponseBotIcons record {|
    @jsondata:Name {value: "image_36"}
    string image36;
    @jsondata:Name {value: "image_48"}
    string image48;
    @jsondata:Name {value: "image_72"}
    string image72;
|};

public type AppsPermissionsResourcesListResponseResponseMetadata record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

public type ParentConversationAnyOf22 anydata?;

public type ParentConversationAnyOf21 anydata?;

# Represents the Queries record for the operation: admin_inviteRequests_list
public type AdminInviteRequestsListQueries record {
    # Value of the `next_cursor` field sent as part of the previous API response
    string cursor?;
    # The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    int 'limit?;
    # ID for the workspace where the invite requests were made
    @http:Query {name: "team_id"}
    string teamId?;
};

public type ConversationObject record {|
    @jsondata:Name {value: "is_global_shared"}
    boolean isGlobalShared?;
    @jsondata:Name {value: "is_pending_ext_shared"}
    boolean isPendingExtShared?;
    @jsondata:Name {value: "pending_shared"}
    TeamDef[] pendingShared?;
    @jsondata:Name {value: "internal_team_ids"}
    TeamDef[] internalTeamIds?;
    @jsondata:Name {value: "is_channel"}
    boolean isChannel;
    UserIdDef[] members?;
    @jsondata:Name {value: "is_non_threadable"}
    boolean isNonThreadable?;
    @jsondata:Name {value: "pin_count"}
    int pinCount?;
    @jsondata:Name {value: "is_read_only"}
    boolean isReadOnly?;
    ChannelDef id;
    @jsondata:Name {value: "is_org_default"}
    boolean isOrgDefault?;
    @jsondata:Name {value: "is_org_mandatory"}
    boolean isOrgMandatory?;
    @jsondata:Name {value: "is_im"}
    boolean isIm;
    @jsondata:Name {value: "is_member"}
    boolean isMember?;
    @jsondata:Name {value: "is_open"}
    boolean isOpen?;
    int created;
    @jsondata:Name {value: "display_counts"}
    ConversationObjDisplayCounts displayCounts?;
    decimal priority?;
    int version?;
    @jsondata:Name {value: "is_starred"}
    boolean isStarred?;
    @jsondata:Name {value: "is_archived"}
    boolean isArchived;
    string name;
    ConversationObjTopic topic;
    @jsondata:Name {value: "shared_team_ids"}
    TeamDef[] sharedTeamIds?;
    @jsondata:Name {value: "is_org_shared"}
    boolean isOrgShared;
    @jsondata:Name {value: "is_private"}
    boolean isPrivate;
    @jsondata:Name {value: "accepted_user"}
    UserIdDef acceptedUser?;
    @jsondata:Name {value: "conversation_host_id"}
    WorkspaceIdDef conversationHostId?;
    ConversationObjPurpose purpose;
    @jsondata:Name {value: "is_moved"}
    int isMoved?;
    ConversationObjShares[] shares?;
    @jsondata:Name {value: "unread_count"}
    int unreadCount?;
    @jsondata:Name {value: "is_shared"}
    boolean isShared;
    @jsondata:Name {value: "previous_names"}
    ChannelNameDef[] previousNames?;
    @jsondata:Name {value: "connected_team_ids"}
    WorkspaceIdDef[] connectedTeamIds?;
    @jsondata:Name {value: "pending_connected_team_ids"}
    TeamDef[] pendingConnectedTeamIds?;
    ConversationObjLatest[] latest?;
    @jsondata:Name {value: "has_pins"}
    boolean hasPins?;
    @jsondata:Name {value: "last_read"}
    TsDef lastRead?;
    UserIdDef creator;
    @jsondata:Name {value: "is_frozen"}
    boolean isFrozen?;
    @jsondata:Name {value: "is_mpim"}
    false isMpim;
    @jsondata:Name {value: "timezone_count"}
    int timezoneCount?;
    @jsondata:Name {value: "is_ext_shared"}
    boolean isExtShared?;
    @jsondata:Name {value: "name_normalized"}
    string nameNormalized;
    @jsondata:Name {value: "enterprise_id"}
    EnterpriseIdDef enterpriseId?;
    @jsondata:Name {value: "unread_count_display"}
    int unreadCountDisplay?;
    @jsondata:Name {value: "is_group"}
    boolean isGroup;
    int unlinked?;
    @jsondata:Name {value: "use_case"}
    string useCase?;
    @jsondata:Name {value: "is_general"}
    boolean isGeneral;
    @jsondata:Name {value: "num_members"}
    int numMembers?;
    @jsondata:Name {value: "is_thread_only"}
    boolean isThreadOnly?;
    UserIdDef user?;
    @jsondata:Name {value: "parent_conversation"}
    ConversationObjParentConversation[] parentConversation?;
|};

# Schema for successful response from team.integrationLogs method
public type TeamIntegrationLogsResponse record {|
    PagingObj paging;
    OkTrueDef ok;
    @constraint:Array {minLength: 1}
    TeamIntegrationLogsResponseLogs[] logs;
|};

public type AdminConversationsGetConversationPrefsResponsePrefs record {
    @jsondata:Name {value: "can_thread"}
    AdminConversationsGetConversationPrefsResponsePrefsCanThread canThread?;
    @jsondata:Name {value: "who_can_post"}
    AdminConversationsGetConversationPrefsResponsePrefsWhoCanPost whoCanPost?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse1 record {
    OkTrueDef ok;
};

public type ChannelObjTopic record {|
    @jsondata:Name {value: "last_set"}
    int lastSet;
    TopicPurposeCreatorDef creator;
    string value;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse2 record {
    OkTrueDef ok;
};

public type UsersProfileSetBody record {
    # Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters
    string profile?;
    # Name of a single key to set. Usable only if `profile` is not passed
    string name?;
    # ID of user to change. This argument may only be specified by team admins on paid teams
    string user?;
    # Value to set a single key to. Usable only if `profile` is not passed
    string value?;
};

public type CallsAddBody record {
    # Call start time in UTC UNIX timestamp format
    @jsondata:Name {value: "date_start"}
    int dateStart?;
    # The URL required for a client to join the Call
    @jsondata:Name {value: "join_url"}
    string joinUrl;
    # When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL
    @jsondata:Name {value: "desktop_app_join_url"}
    string desktopAppJoinUrl?;
    # An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object
    @jsondata:Name {value: "external_display_id"}
    string externalDisplayId?;
    # An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service
    @jsondata:Name {value: "external_unique_id"}
    string externalUniqueId;
    # The name of the Call
    string title?;
    # The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required
    @jsondata:Name {value: "created_by"}
    string createdBy?;
    # The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)
    string users?;
};

public type ConversationsSetPurposeBody record {
    # A new, specialer purpose
    string purpose?;
    # Conversation to set the purpose of
    string channel?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse9 record {
    OkTrueDef ok;
};

# Schema for successful response files.delete method
public type FilesDeleteResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from chat.scheduledMessages.list method
public type ChatScheduledMessagesListResponse record {|
    @jsondata:Name {value: "scheduled_messages"}
    ChatScheduledMessagesListResponseScheduledMessages[] scheduledMessages;
    @jsondata:Name {value: "response_metadata"}
    ChatScheduledMessagesListResponseResponseMetadata responseMetadata;
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse7 record {
    OkTrueDef ok;
};

# Schema for successful response of chat.scheduleMessage method
public type ChatScheduleMessageResponse record {|
    @jsondata:Name {value: "scheduled_message_id"}
    string scheduledMessageId;
    ChannelDef channel;
    ChatScheduleMessageResponseMessage message;
    OkTrueDef ok;
    @jsondata:Name {value: "post_at"}
    int postAt;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse8 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse5 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse6 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse3 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse4 record {
    OkTrueDef ok;
};

public type ConversationObjParentConversation2 ChannelDef|ParentConversationAnyOf22?;

public type ConversationObjParentConversation1 ChannelDef|ParentConversationAnyOf21?;

# Represents the Queries record for the operation: oauth_token
public type OauthTokenQueries record {
    # Request the user to add your app only to a single channel
    @http:Query {name: "single_channel"}
    boolean singleChannel?;
    # The `code` param returned via the OAuth callback
    string code?;
    # Issued when you created your application
    @http:Query {name: "client_secret"}
    string clientSecret?;
    # This must match the originally submitted URI (if one was sent)
    @http:Query {name: "redirect_uri"}
    string redirectUri?;
    # Issued when you created your application
    @http:Query {name: "client_id"}
    string clientId?;
};

public type '200AnyOf1 record {|
    OkTrueDef ok;
    '200Items[] items;
|};

# Schema for successful response of admin.conversations.setConversationPrefs
public type AdminConversationsSetConversationPrefsResponse record {|
    OkTrueDef ok;
|};

public type UsergroupsEnableBody record {
    # The encoded ID of the User Group to enable
    string usergroup;
    # Include the number of users in the User Group
    @jsondata:Name {value: "include_count"}
    boolean includeCount?;
};

public type AdminTeamsSettingsSetNameBody record {
    # The new name of the workspace
    string name;
    # ID for the workspace to set the name for
    @jsondata:Name {value: "team_id"}
    string teamId;
};

# Schema for successful response from files.info method
public type FilesInfoResponse record {|
    UserIdDef editor?;
    CommentsObj comments;
    FileObj file;
    PagingObj paging?;
    @jsondata:Name {value: "response_metadata"}
    ResponseMetadataObj responseMetadata?;
    OkTrueDef ok;
    @jsondata:Name {value: "content_html"}
    anydata? contentHtml?;
|};

# Schema for successful response api.permissions.scopes.list method
public type ApiPermissionsScopesListResponse record {
    OkTrueDef ok;
    ApiPermissionsScopesListResponseScopes scopes;
};

# Represents the Queries record for the operation: admin_inviteRequests_denied_list
public type AdminInviteRequestsDeniedListQueries record {
    # Value of the `next_cursor` field sent as part of the previous api response
    string cursor?;
    # The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
    int 'limit?;
    # ID for the workspace where the invite requests were made
    @http:Query {name: "team_id"}
    string teamId?;
};

# Represents the Queries record for the operation: admin_conversations_ekm_listOriginalConnectedChannelInfo
public type AdminConversationsEkmListOriginalConnectedChannelInfoQueries record {
    # A comma-separated list of channels to filter to
    @http:Query {name: "channel_ids"}
    string channelIds?;
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # A comma-separated list of the workspaces to which the channels you would like returned belong
    @http:Query {name: "team_ids"}
    string teamIds?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
};

public type AppsPermissionsInfoResponseInfo record {
    AppsPermissionsInfoResponseInfoIm im;
    AppsPermissionsInfoResponseInfoMpim mpim;
    AppsPermissionsInfoResponseInfoChannel channel;
    @jsondata:Name {value: "app_home"}
    AppsPermissionsInfoResponseInfoAppHome appHome;
    AppsPermissionsInfoResponseInfoTeam team;
    AppsPermissionsInfoResponseInfoGroup group;
};

public type AdminEmojiRenameBody record {
    # The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included
    string name;
    # The new name of the emoji
    @jsondata:Name {value: "new_name"}
    string newName;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

# Schema for successful response from users.deletePhoto method
public type UsersDeletePhotoResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from users.setPresence method
public type UsersSetPresenceResponse record {|
    OkTrueDef ok;
|};

# user object for non enterprise type
public type UserObjAnyOf1 record {|
    @constraint:String {pattern: re `^[a-fA-F0-9]{6}$`}
    string color?;
    @jsondata:Name {value: "is_invited_user"}
    boolean isInvitedUser?;
    @jsondata:Name {value: "has_2fa"}
    boolean has2fa?;
    @jsondata:Name {value: "is_restricted"}
    boolean isRestricted?;
    UserObjTz[] tz?;
    @jsondata:Name {value: "tz_label"}
    string tzLabel?;
    @jsondata:Name {value: "is_primary_owner"}
    boolean isPrimaryOwner?;
    @jsondata:Name {value: "team_profile"}
    UserObjTeamProfile teamProfile?;
    @jsondata:Name {value: "real_name"}
    string realName?;
    @jsondata:Name {value: "team_id"}
    WorkspaceIdDef teamId?;
    string locale?;
    @jsondata:Name {value: "is_admin"}
    boolean isAdmin?;
    @jsondata:Name {value: "is_app_user"}
    boolean isAppUser;
    @jsondata:Name {value: "tz_offset"}
    decimal tzOffset?;
    @jsondata:Name {value: "is_stranger"}
    boolean isStranger?;
    @jsondata:Name {value: "is_forgotten"}
    boolean isForgotten?;
    UserIdDef id;
    @jsondata:Name {value: "is_bot"}
    boolean isBot;
    string presence?;
    @jsondata:Name {value: "is_ultra_restricted"}
    boolean isUltraRestricted?;
    @jsondata:Name {value: "is_owner"}
    boolean isOwner?;
    UserProfileObj profile;
    @jsondata:Name {value: "is_external"}
    boolean isExternal?;
    WorkspaceIdDef team?;
    @jsondata:Name {value: "enterprise_user"}
    EnterpriseUserObj enterpriseUser?;
    boolean deleted?;
    @jsondata:Name {value: "two_factor_type"}
    string twoFactorType?;
    string name;
    decimal updated;
|};

# Represents the Queries record for the operation: workflows_updateStep
public type WorkflowsUpdateStepQueries record {
    # An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed
    string outputs?;
    # A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables)
    string inputs?;
    # An optional field that can be used to override the step name that is shown in the Workflow Builder
    @http:Query {name: "step_name"}
    string stepName?;
    # An optional field that can be used to override app image that is shown in the Workflow Builder
    @http:Query {name: "step_image_url"}
    string stepImageUrl?;
    # A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`
    @http:Query {name: "workflow_step_edit_id"}
    string workflowStepEditId;
};

public type ConversationsRenameBody record {
    # ID of conversation to rename
    string channel?;
    # New name for conversation
    string name?;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://slack.com/api/oauth.access";
|};

# Schema for successful response from reactions.remove method
public type ReactionsRemoveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from chat.deleteScheduledMessage method
public type ChatDeleteScheduledMessageResponse record {|
    OkTrueDef ok;
|};

public type ApiPermissionsScopesListResponseScopes record {
    ScopesObj app_home?;
    ScopesObj channel?;
    ScopesObj group?;
    ScopesObj im?;
    ScopesObj mpim?;
    ScopesObj team?;
    ScopesObj user?;
};

# Schema for successful response from conversations.join method
public type ConversationsJoinResponse record {|
    ConversationObj channel;
    string warning?;
    @jsondata:Name {value: "response_metadata"}
    ResponseMetadata responseMetadata?;
    OkTrueDef ok;
|};

# Schema for successful response from stars.list method
public type StarsListResponse record {|
    PagingObj paging?;
    OkTrueDef ok;
    (record {|ChannelDef channel; int date_create; MessageObj message; "message" 'type;|}|record {|int date_create; FileObj file; "file" 'type;|}|record {|CommentObj comment; int date_create; FileObj file; "file_comment" 'type;|}|record {|ChannelDef channel; int date_create; "channel" 'type;|}|record {|DmIdDef channel; int date_create; "im" 'type;|}|record {|GroupIdDef channel; int date_create; "group" 'type;|})[][] items;
|};

# Schema for successful response conversations.members method
public type ConversationsMembersResponse record {|
    @constraint:Array {minLength: 1}
    UserIdDef[] members;
    @jsondata:Name {value: "response_metadata"}
    ConversationsMembersResponseResponseMetadata responseMetadata;
    OkTrueDef ok;
|};

public type AdminTeamsSettingsSetDescriptionBody record {
    # The new description for the workspace
    string description;
    # ID for the workspace to set the description for
    @jsondata:Name {value: "team_id"}
    string teamId;
};

# Represents the Queries record for the operation: views_update
public type ViewsUpdateQueries record {
    # A [view object](/reference/surfaces/views). This must be a JSON-encoded string
    string view?;
    # A unique identifier of the view to be updated. Either `view_id` or `external_id` is required
    @http:Query {name: "view_id"}
    string viewId?;
    # A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required
    @http:Query {name: "external_id"}
    string externalId?;
    # A string that represents view state to protect against possible race conditions
    string hash?;
};

# Represents the Queries record for the operation: dnd_info
public type DndInfoQueries record {
    # User to fetch status for (defaults to current user)
    string user?;
};

public type ChatScheduleMessageResponseMessage record {|
    @jsondata:Name {value: "bot_profile"}
    BotProfileObj botProfile?;
    TeamDef team;
    string text;
    string 'type;
    UserIdDef user;
    @jsondata:Name {value: "bot_id"}
    BotIdDef botId;
    string username?;
|};

# Represents the Queries record for the operation: apps_permissions_request
public type AppsPermissionsRequestQueries record {
    # Token used to trigger the permissions API
    @http:Query {name: "trigger_id"}
    string triggerId;
    # A comma separated list of scopes to request for
    string scopes;
};

public type ConversationsUnarchiveBody record {
    # ID of conversation to unarchive
    string channel?;
};

public type MessageObject record {
    record {}[] attachments?;
    record {} blocks?;
    string text;
};

# Schema for successful response from team.accessLogs method
public type TeamAccessLogsResponse record {|
    PagingObj paging;
    OkTrueDef ok;
    @constraint:Array {minLength: 1}
    TeamAccessLogsResponseLogins[] logins;
|};

public type UserProfileShortObj record {|
    @jsondata:Name {value: "is_ultra_restricted"}
    boolean isUltraRestricted;
    @jsondata:Name {value: "is_restricted"}
    boolean isRestricted;
    @jsondata:Name {value: "real_name_normalized"}
    string realNameNormalized?;
    string name;
    @jsondata:Name {value: "real_name"}
    string realName;
    WorkspaceIdDef team;
    @jsondata:Name {value: "avatar_hash"}
    string avatarHash;
    @jsondata:Name {value: "display_name"}
    string displayName;
    @jsondata:Name {value: "image_72"}
    string image72;
    @jsondata:Name {value: "first_name"}
    string? firstName;
    @jsondata:Name {value: "display_name_normalized"}
    string displayNameNormalized?;
|};

public type ExternalOrgMigrationsObj record {
    ExternalOrgMigrationsObjCurrent[] current;
    @jsondata:Name {value: "date_updated"}
    int dateUpdated;
};

# Represents the Queries record for the operation: migration_exchange
public type MigrationExchangeQueries record {
    # Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`
    @http:Query {name: "to_old"}
    boolean toOld?;
    # Specify team_id starts with `T` in case of Org Token
    @http:Query {name: "team_id"}
    string teamId?;
    # A comma-separated list of user ids, up to 400 per request
    string users;
};

public type StarsRemoveBody record {
    # File to remove star from
    string file?;
    # Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)
    string channel?;
    # File comment to remove star from
    @jsondata:Name {value: "file_comment"}
    string fileComment?;
    # Timestamp of the message to remove star from
    string timestamp?;
};

public type ReminderObj record {|
    UserIdDef creator;
    boolean recurring;
    @jsondata:Name {value: "complete_ts"}
    int completeTs?;
    ReminderIdDef id;
    string text;
    int time?;
    UserIdDef user;
|};

public type AdminUsersSetExpirationBody record {
    # Timestamp when guest account should be disabled
    @jsondata:Name {value: "expiration_ts"}
    int expirationTs;
    # The ID of the user to set an expiration for
    @jsondata:Name {value: "user_id"}
    string userId;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
};

public type AdminUsergroupsRemoveChannelsBody record {
    # Comma-separated string of channel IDs
    @jsondata:Name {value: "channel_ids"}
    string channelIds;
    # ID of the IDP Group
    @jsondata:Name {value: "usergroup_id"}
    string usergroupId;
};

public type ConversationsJoinBody record {
    # ID of conversation to join
    string channel?;
};

# Schema for successful response from reminders.delete method
public type RemindersDeleteResponse record {|
    OkTrueDef ok;
|};

public type OkTrueDef true;

public type ChannelActionsTsChannelActionsTsAnyOf12 anydata?;

# Represents the Queries record for the operation: admin_apps_restricted_list
public type AdminAppsRestrictedListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
    @http:Query {name: "team_id"}
    string teamId?;
    @http:Query {name: "enterprise_id"}
    string enterpriseId?;
};

public type EnterpriseUserObj record {|
    @jsondata:Name {value: "is_admin"}
    boolean isAdmin;
    TeamDef[] teams;
    @jsondata:Name {value: "is_owner"}
    boolean isOwner;
    EnterpriseUserIdDef id;
    @jsondata:Name {value: "enterprise_id"}
    EnterpriseIdDef enterpriseId;
    @jsondata:Name {value: "enterprise_name"}
    EnterpriseNameDef enterpriseName;
|};

# Schema for successful response of admin.conversations.convertToPrivate
public type AdminConversationsConvertToPrivateResponse record {|
    OkTrueDef ok;
|};

public type AdminConversationsRestrictAccessAddGroupBody record {
    # The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel
    @jsondata:Name {value: "group_id"}
    string groupId;
    # The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization
    @jsondata:Name {value: "team_id"}
    string teamId?;
    # The channel to link this group to
    @jsondata:Name {value: "channel_id"}
    string channelId;
    # Authentication token. Requires scope: `admin.conversations:write`
    string token;
};

# Schema for successful response from chat.unfurl method
public type ChatUnfurlResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from reminders.info method
public type RemindersInfoResponse record {|
    ReminderObj reminder;
    OkTrueDef ok;
|};

public type TeamAccessLogsResponseLogins record {|
    string? country;
    @jsondata:Name {value: "date_last"}
    int dateLast;
    @jsondata:Name {value: "user_id"}
    UserIdDef userId;
    string? ip;
    string? isp;
    int count;
    @jsondata:Name {value: "date_first"}
    int dateFirst;
    string? region;
    @jsondata:Name {value: "user_agent"}
    string userAgent;
    string username;
|};

public type AdminConversationsGetConversationPrefsResponsePrefsCanThread record {
    string[] 'type?;
    string[] user?;
};

# Represents the Queries record for the operation: search_messages
public type SearchMessagesQueries record {
    # Pass a value of `true` to enable query highlight markers (see below)
    boolean highlight?;
    # Search query
    string query;
    # Pass the number of results you want per "page". Maximum of `100`
    int count?;
    int page?;
    # Return matches sorted by either `score` or `timestamp`
    string sort?;
    # Change sort direction to ascending (`asc`) or descending (`desc`)
    @http:Query {name: "sort_dir"}
    string sortDir?;
};

public type AdminUsersAssignBody record {
    # Comma separated values of channel IDs to add user in the new workspace
    @jsondata:Name {value: "channel_ids"}
    string channelIds?;
    # True if user should be added to the workspace as a single-channel guest
    @jsondata:Name {value: "is_ultra_restricted"}
    boolean isUltraRestricted?;
    # The ID of the user to add to the workspace
    @jsondata:Name {value: "user_id"}
    string userId;
    # True if user should be added to the workspace as a guest
    @jsondata:Name {value: "is_restricted"}
    boolean isRestricted?;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
};

# Represents the Queries record for the operation: reminders_info
public type RemindersInfoQueries record {
    # The ID of the reminder
    string reminder?;
};

# Schema for successful response of admin.conversations.delete
public type AdminConversationsDeleteResponse record {|
    OkTrueDef ok;
|};

@constraint:String {pattern: re `^[T][A-Z0-9]{2,}$`}
public type TeamDef string;

# Represents the Queries record for the operation: conversations_members
public type ConversationsMembersQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # ID of the conversation to retrieve members for
    string channel?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached
    int 'limit?;
};

public type ConversationObjTopic1 record {|
    @jsondata:Name {value: "last_set"}
    int lastSet;
    TopicPurposeCreatorDef creator;
    string value;
|};

# Represents the Queries record for the operation: oauth_v2_access
public type OauthV2AccessQueries record {
    # The `code` param returned via the OAuth callback
    string code;
    # Issued when you created your application
    @http:Query {name: "client_secret"}
    string clientSecret?;
    # This must match the originally submitted URI (if one was sent)
    @http:Query {name: "redirect_uri"}
    string redirectUri?;
    # Issued when you created your application
    @http:Query {name: "client_id"}
    string clientId?;
};

# Schema for successful response from pins.add method
public type PinsAddResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: workflows_stepFailed
public type WorkflowsStepFailedQueries record {
    # Context identifier that maps to the correct workflow step execution
    @http:Query {name: "workflow_step_execute_id"}
    string workflowStepExecuteId;
    # A JSON-based object with a `message` property that should contain a human readable error message
    string 'error;
};

public type TzAnyOf1 anydata?;

public type ConversationsSetTopicBody record {
    # Conversation to set the topic of
    string channel?;
    # The new topic string. Does not support formatting or linkification
    string topic?;
};

# Schema for successful response from users.list method
public type UsersListResponse record {|
    @jsondata:Name {value: "cache_ts"}
    int cacheTs;
    @constraint:Array {minLength: 1}
    UserObj[] members;
    @jsondata:Name {value: "response_metadata"}
    ResponseMetadataObj responseMetadata?;
    OkTrueDef ok;
|};

public type ConversationsArchiveBody record {
    # ID of conversation to archive
    string channel?;
};

public type OptionsAnyOf1 anydata?;

# Represents the Queries record for the operation: usergroups_list
public type UsergroupsListQueries record {
    # Include disabled User Groups
    @http:Query {name: "include_disabled"}
    boolean includeDisabled?;
    # Include the list of users for each User Group
    @http:Query {name: "include_users"}
    boolean includeUsers?;
    # Include the number of users in each User Group
    @http:Query {name: "include_count"}
    boolean includeCount?;
};

public type BotProfileObjIcons record {|
    @jsondata:Name {value: "image_36"}
    string image36;
    @jsondata:Name {value: "image_48"}
    string image48;
    @jsondata:Name {value: "image_72"}
    string image72;
|};

public type ScopesObj string[];

# Represents the Queries record for the operation: team_accessLogs
public type TeamAccessLogsQueries record {
    # End of time range of logs to include in results (inclusive)
    string before?;
    string count?;
    string page?;
};

# Schema for successful response conversations.create method
public type ConversationsCreateResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type ChannelActionsTsAnyOf1 int;

public type ChannelNameDef string;

# Represents the Headers record for the operation: admin_users_setOwner
public type AdminUsersSetOwnerHeaders record {
    # Authentication token. Requires scope: `admin.users:write`
    string token;
};

# Represents the Queries record for the operation: bots_info
public type BotsInfoQueries record {
    # Bot user to get info on
    string bot?;
};

public type ReactionsAddBody record {
    # Channel where the message to add reaction to was posted
    string channel;
    # Reaction (emoji) name
    string name;
    # Timestamp of the message to add reaction to
    string timestamp;
};

public type AdminUsergroupsAddTeamsBody record {
    # A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token
    @jsondata:Name {value: "team_ids"}
    string teamIds;
    # An encoded usergroup (IDP Group) ID
    @jsondata:Name {value: "usergroup_id"}
    string usergroupId;
    # When `true`, this method automatically creates new workspace accounts for the IDP group members
    @jsondata:Name {value: "auto_provision"}
    boolean autoProvision?;
};

# Represents the Queries record for the operation: admin_inviteRequests_approved_list
public type AdminInviteRequestsApprovedListQueries record {
    # Value of the `next_cursor` field sent as part of the previous API response
    string cursor?;
    # The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    int 'limit?;
    # ID for the workspace where the invite requests were made
    @http:Query {name: "team_id"}
    string teamId?;
};

# Schema for successful response conversations.info
public type ConversationsInfoResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type RemindersDeleteBody record {
    # The ID of the reminder
    string reminder?;
};

# Schema for successful response from bots.info method
public type BotsInfoResponse record {|
    BotsInfoResponseBot bot;
    OkTrueDef ok;
|};

# Schema for successful response from dnd.setSnooze method
public type DndSetSnoozeResponse record {|
    @jsondata:Name {value: "snooze_endtime"}
    int snoozeEndtime;
    @jsondata:Name {value: "snooze_enabled"}
    boolean snoozeEnabled;
    @jsondata:Name {value: "snooze_remaining"}
    int snoozeRemaining;
    OkTrueDef ok;
|};

public type ChatPostEphemeralBody record {
    # URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below
    @jsondata:Name {value: "icon_url"}
    string iconUrl?;
    # Find and link channel names and usernames
    @jsondata:Name {value: "link_names"}
    boolean linkNames?;
    # Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false
    @jsondata:Name {value: "as_user"}
    boolean asUser?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string
    string attachments?;
    # Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below
    @jsondata:Name {value: "icon_emoji"}
    string iconEmoji?;
    # A JSON-based array of structured blocks, presented as a URL-encoded string
    string blocks?;
    # Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread
    @jsondata:Name {value: "thread_ts"}
    string threadTs?;
    # Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name
    string channel;
    # Change how messages are treated. Defaults to `none`. See [below](#formatting)
    string parse?;
    # How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail
    string text?;
    # `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument
    string user;
    # Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below
    string username?;
};

public type ChatScheduledMessagesListResponseResponseMetadata record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

public type LatestAnyOf2 anydata?;

# Represents the Queries record for the operation: rtm_connect
public type RtmConnectQueries record {
    # Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)
    @http:Query {name: "batch_presence_aware"}
    boolean batchPresenceAware?;
    # Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions)
    @http:Query {name: "presence_sub"}
    boolean presenceSub?;
};

# Schema for successful response conversations.close method
public type ConversationsCloseResponse record {|
    @jsondata:Name {value: "already_closed"}
    boolean alreadyClosed?;
    OkTrueDef ok;
    @jsondata:Name {value: "no_op"}
    boolean noOp?;
|};

# Represents the Queries record for the operation: team_profile_get
public type TeamProfileGetQueries record {
    # Filter by visibility
    string visibility?;
};

public type AdminUsersSessionInvalidateBody record {
    @jsondata:Name {value: "session_id"}
    int sessionId;
    # ID of the team that the session belongs to
    @jsondata:Name {value: "team_id"}
    string teamId;
};

# Schema for successful response from reactions.list method
public type ReactionsListResponse record {|
    PagingObj paging?;
    @jsondata:Name {value: "response_metadata"}
    ResponseMetadataObj responseMetadata?;
    OkTrueDef ok;
    (record {|ChannelDef channel; MessageObj message; "message" 'type;|}|record {|FileObj file; "file" 'type;|}|record {|CommentObj comment; FileObj file; "file_comment" 'type;|})[][] items;
|};

public type UsergroupsUpdateBody record {
    # A comma separated string of encoded channel IDs for which the User Group uses as a default
    string channels?;
    # A name for the User Group. Must be unique among User Groups
    string name?;
    # The encoded ID of the User Group to update
    string usergroup;
    # A short description of the User Group
    string description?;
    # A mention handle. Must be unique among channels, users and User Groups
    string 'handle?;
    # Include the number of users in the User Group
    @jsondata:Name {value: "include_count"}
    boolean includeCount?;
};

# Represents the Queries record for the operation: apps_permissions_resources_list
public type AppsPermissionsResourcesListQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # The maximum number of items to return
    int 'limit?;
};

public type DeletedByAnyOf1 anydata?;

public type IconObj record {
    @jsondata:Name {value: "image_132"}
    string image132?;
    @jsondata:Name {value: "image_102"}
    string image102?;
    @jsondata:Name {value: "image_68"}
    string image68?;
    @jsondata:Name {value: "image_default"}
    boolean imageDefault?;
    @jsondata:Name {value: "image_34"}
    string image34?;
    @jsondata:Name {value: "image_230"}
    string image230?;
    @jsondata:Name {value: "image_44"}
    string image44?;
    @jsondata:Name {value: "image_88"}
    string image88?;
};

# Schema for successful response from dnd.endSnooze method
public type DndEndSnoozeResponse record {|
    @jsondata:Name {value: "next_dnd_end_ts"}
    int nextDndEndTs;
    @jsondata:Name {value: "dnd_enabled"}
    boolean dndEnabled;
    @jsondata:Name {value: "next_dnd_start_ts"}
    int nextDndStartTs;
    @jsondata:Name {value: "snooze_enabled"}
    boolean snoozeEnabled;
    OkTrueDef ok;
|};

# Schema for successful response files.comments.delete method
public type FilesCommentsDeleteResponse record {|
    OkTrueDef ok;
|};

public type MessageObjIcons record {|
    @jsondata:Name {value: "image_64"}
    string image64?;
    string emoji?;
|};

# Schema for successful response of chat.postMessage method
public type ChatPostMessageResponse record {|
    ChannelDef channel;
    MessageObj message;
    OkTrueDef ok;
    TsDef ts;
|};

public type ExternalOrgMigrationsObjCurrent record {
    @jsondata:Name {value: "team_id"}
    string teamId;
    @jsondata:Name {value: "date_started"}
    int dateStarted;
};

@constraint:String {pattern: re `^B[A-Z0-9]{8,}$`}
public type BotIdDef string;

public type PinsAddBody record {
    # Channel to pin the item in
    string channel;
    # Timestamp of the message to pin
    string timestamp?;
};

public type AdminConversationsCreateBody record {
    # When `true`, creates a private channel instead of a public channel
    @jsondata:Name {value: "is_private"}
    boolean isPrivate;
    # When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
    @jsondata:Name {value: "org_wide"}
    boolean orgWide?;
    # Name of the public or private channel to create
    string name;
    # Description of the public or private channel to create
    string description?;
    # The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`
    @jsondata:Name {value: "team_id"}
    string teamId?;
};

# Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`
public type UsersConversationsResponse record {
    ConversationObj[] channels;
    OkTrueDef ok;
    UsersConversationsResponseResponseMetadata response_metadata?;
};

# Schema for successful response from conversations.open method when opening channels, ims, mpims
public type ConversationsOpenResponse record {|
    @jsondata:Name {value: "already_open"}
    boolean alreadyOpen?;
    ConversationsOpenResponseChannel[] channel;
    OkTrueDef ok;
    @jsondata:Name {value: "no_op"}
    boolean noOp?;
|};

# Schema for successful response from conversations.invite method
public type ConversationsInviteErrorResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: api_test
public type ApiTestQueries record {
    # example property to return
    string foo?;
};

# Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65
public type APIMethodUsersGetPresence record {
    boolean auto_away?;
    int connection_count?;
    int last_activity?;
    boolean manual_away?;
    OkTrueDef ok;
    boolean online?;
    string presence;
};

public type AdminConversationsDisconnectSharedBody record {
    # The channel to be disconnected from some workspaces
    @jsondata:Name {value: "channel_id"}
    string channelId;
    # The team to be removed from the channel. Currently only a single team id can be specified
    @jsondata:Name {value: "leaving_team_ids"}
    string leavingTeamIds?;
};

public type PinnedInfoDef record {|
|};

public type MessageObj record {|
    @constraint:Array {minLength: 1}
    MessageObjAttachments[] attachments?;
    @jsondata:Name {value: "client_msg_id"}
    string clientMsgId?;
    string purpose?;
    boolean upload?;
    @jsondata:Name {value: "is_intro"}
    boolean isIntro?;
    @jsondata:Name {value: "user_profile"}
    UserProfileShortObj userProfile?;
    string 'type;
    @jsondata:Name {value: "is_delayed_message"}
    boolean isDelayedMessage?;
    boolean subscribed?;
    @jsondata:Name {value: "unread_count"}
    int unreadCount?;
    FileObj file?;
    string subtype?;
    @jsondata:Name {value: "reply_users_count"}
    int replyUsersCount?;
    UserIdDef inviter?;
    string text;
    @jsondata:Name {value: "display_as_bot"}
    boolean displayAsBot?;
    @jsondata:Name {value: "bot_id"}
    MessageObjBotId[] botId?;
    @jsondata:Name {value: "latest_reply"}
    TsDef latestReply?;
    @jsondata:Name {value: "last_read"}
    TsDef lastRead?;
    @jsondata:Name {value: "parent_user_id"}
    UserIdDef parentUserId?;
    # This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace
    Blocks blocks?;
    @jsondata:Name {value: "reply_users"}
    UserIdDef[] replyUsers?;
    WorkspaceIdDef team?;
    MessageObjIcons icons?;
    @jsondata:Name {value: "reply_count"}
    int replyCount?;
    @jsondata:Name {value: "user_team"}
    WorkspaceIdDef userTeam?;
    @jsondata:Name {value: "pinned_to"}
    ChannelDef[] pinnedTo?;
    @jsondata:Name {value: "is_starred"}
    boolean isStarred?;
    @jsondata:Name {value: "bot_profile"}
    BotProfileObj botProfile?;
    @jsondata:Name {value: "old_name"}
    string oldName?;
    @jsondata:Name {value: "source_team"}
    WorkspaceIdDef sourceTeam?;
    @jsondata:Name {value: "thread_ts"}
    TsDef threadTs?;
    string name?;
    @constraint:Array {minLength: 1}
    FileObj[] files?;
    string topic?;
    CommentObj comment?;
    ReactionObj[] reactions?;
    string permalink?;
    UserIdDef user?;
    TsDef ts;
    string username?;
|};

public type ConversationObjTopic record {|
    @jsondata:Name {value: "last_set"}
    int lastSet;
    TopicPurposeCreatorDef creator;
    string value;
|};

# Schema for successful response from users.info method
public type UsersInfoResponse record {
    OkTrueDef ok;
    UserObj user;
};

public type BotsInfoResponseBot record {|
    boolean deleted;
    @jsondata:Name {value: "user_id"}
    UserIdDef userId?;
    string name;
    BotIdDef id;
    BotsInfoResponseBotIcons icons;
    @jsondata:Name {value: "app_id"}
    AppIdDef appId;
    int updated;
|};

public type FilesUploadBody record {
    # A [file type](/types/file#file_types) identifier
    string filetype?;
    # File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`
    string file?;
    # Filename of file
    string filename?;
    # Comma-separated list of channel names or IDs where the file will be shared
    string channels?;
    # Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead
    @jsondata:Name {value: "thread_ts"}
    decimal threadTs?;
    # The message text introducing the file in specified `channels`
    @jsondata:Name {value: "initial_comment"}
    string initialComment?;
    # Title of file
    string title?;
    # File contents via a POST variable. If omitting this parameter, you must provide a `file`
    string content?;
    # Authentication token. Requires scope: `files:write:user`
    string token?;
};

# Schema for successful response of admin.conversations.rename
public type AdminConversationsRenameResponse1 record {|
    OkTrueDef ok;
|};

# Schema for successful response from stars.remove method
public type StarsRemoveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from usergroups.disable method
public type UsergroupsDisableResponse record {|
    SubteamObj usergroup;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: users_lookupByEmail
public type UsersLookupByEmailQueries record {
    # An email address belonging to a user in the workspace
    string email;
};

public type UsersSetPhotoResponseProfile record {|
    @jsondata:Name {value: "image_32"}
    string image32;
    @jsondata:Name {value: "image_original"}
    string imageOriginal;
    @jsondata:Name {value: "image_1024"}
    string image1024;
    @jsondata:Name {value: "image_24"}
    string image24;
    @jsondata:Name {value: "image_192"}
    string image192;
    @jsondata:Name {value: "image_48"}
    string image48;
    @jsondata:Name {value: "avatar_hash"}
    string avatarHash;
    @jsondata:Name {value: "image_72"}
    string image72;
    @jsondata:Name {value: "image_512"}
    string image512;
|};

public type UsergroupsUsersUpdateBody record {
    # The encoded ID of the User Group to update
    string usergroup;
    # Include the number of users in the User Group
    @jsondata:Name {value: "include_count"}
    boolean includeCount?;
    # A comma separated string of encoded user IDs that represent the entire list of users for the User Group
    string users;
};

public type ConversationsMembersResponseResponseMetadata record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

# Schema for successful response from files.list method
public type FilesListResponse record {|
    FileObj[] files;
    PagingObj paging;
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse record {
    OkTrueDef ok;
};

# Schema for successful response from reminders.list method
public type RemindersListResponse record {|
    ReminderObj[] reminders;
    OkTrueDef ok;
|};

public type ConversationIMChannelObjectFromConversationsMethods record {|
    @jsondata:Name {value: "has_pins"}
    boolean hasPins?;
    @jsondata:Name {value: "last_read"}
    TsDef lastRead?;
    @jsondata:Name {value: "is_user_deleted"}
    boolean isUserDeleted?;
    @jsondata:Name {value: "is_frozen"}
    boolean isFrozen?;
    @jsondata:Name {value: "is_im"}
    boolean isIm;
    @jsondata:Name {value: "is_open"}
    boolean isOpen?;
    int created;
    @jsondata:Name {value: "is_ext_shared"}
    boolean isExtShared?;
    decimal priority;
    @jsondata:Name {value: "unread_count_display"}
    int unreadCountDisplay?;
    int version?;
    ConversationObjShares2[] shares?;
    @jsondata:Name {value: "unread_count"}
    int unreadCount?;
    @jsondata:Name {value: "is_starred"}
    boolean isStarred?;
    @jsondata:Name {value: "is_archived"}
    boolean isArchived?;
    @jsondata:Name {value: "is_shared"}
    boolean isShared?;
    @jsondata:Name {value: "pin_count"}
    int pinCount?;
    DmIdDef id;
    @jsondata:Name {value: "is_org_shared"}
    boolean isOrgShared;
    UserIdDef user;
    ConversationObjLatest2[] latest?;
    @jsondata:Name {value: "parent_conversation"}
    ConversationObjParentConversation2[] parentConversation?;
|};

public type TeamProfileGetResponseProfile record {|
    TeamProfileFieldObj[] fields;
|};

public type ConversationObjShares1 record {|
    @jsondata:Name {value: "is_active"}
    boolean isActive;
    @jsondata:Name {value: "accepted_user"}
    UserIdDef acceptedUser?;
    TeamObj team;
    UserIdDef user;
|};

public type AppsPermissionsInfoResponseInfoMpim record {
    ResourcesObj resources?;
    ScopesObj scopes?;
};

public type ConversationObjShares2 record {|
    @jsondata:Name {value: "is_active"}
    boolean isActive;
    @jsondata:Name {value: "date_create"}
    int dateCreate;
    string name;
    TeamDef id;
    TeamObj team;
|};

public type AdminConversationsGetTeamsResponseResponseMetadata record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

public type AdminAppsApproveBody record {
    @jsondata:Name {value: "team_id"}
    string teamId?;
    # The id of the app to approve
    @jsondata:Name {value: "app_id"}
    string appId?;
    # The id of the request to approve
    @jsondata:Name {value: "request_id"}
    string requestId?;
};

@constraint:String {pattern: re `^[UW][A-Z0-9]{2,}$`}
public type UserIdDef string;

public type UsersSetPresenceBody record {
    # Either `auto` or `away`
    string presence;
};

# Represents the Queries record for the operation: admin_usergroups_listChannels
public type AdminUsergroupsListChannelsQueries record {
    # Flag to include or exclude the count of members per channel
    @http:Query {name: "include_num_members"}
    boolean includeNumMembers?;
    # ID of the IDP group to list default channels for
    @http:Query {name: "usergroup_id"}
    string usergroupId;
    # ID of the the workspace
    @http:Query {name: "team_id"}
    string teamId?;
};

public type '200Team record {|
    TeamDef id;
|};

public type AppsPermissionsInfoResponseInfoGroup record {
    ResourcesObj resources?;
    ScopesObj scopes?;
};

# Represents the Queries record for the operation: files_info
public type FilesInfoQueries record {
    # Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See [pagination](/docs/pagination) for more details
    string cursor?;
    # Specify a file by providing its ID
    string file?;
    string count?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached
    int 'limit?;
    string page?;
};

public type SubteamObjPrefs record {|
    ChannelIdDef[] channels;
    GroupIdDef[] groups;
|};

# Schema for successful response apps.permissions.resources.list method
public type AppsPermissionsResourcesListResponse record {
    OkTrueDef ok;
    AppsPermissionsResourcesListResponseResources[] resources;
    AppsPermissionsResourcesListResponseResponseMetadata response_metadata?;
};

public type ConversationsListResponseResponseMetadata record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

# Represents the Queries record for the operation: admin_apps_approved_list
public type AdminAppsApprovedListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
    @http:Query {name: "team_id"}
    string teamId?;
    @http:Query {name: "enterprise_id"}
    string enterpriseId?;
};

# Represents the Queries record for the operation: admin_teams_settings_info
public type AdminTeamsSettingsInfoQueries record {
    @http:Query {name: "team_id"}
    string teamId;
};

public type ConversationObjLatest MessageObj|LatestAnyOf21?;

@constraint:String {pattern: re `^S[A-Z0-9]{2,}$`}
public type SubteamIdDef string;

# Schema for successful response conversations.mark method
public type ConversationsMarkResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: conversations_replies
public type ConversationsRepliesQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # Include messages with latest or oldest timestamp in results only when either timestamp is specified
    boolean inclusive?;
    # Start of time range of messages to include in results
    decimal oldest?;
    # Conversation ID to fetch thread from
    string channel?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached
    int 'limit?;
    # Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message
    decimal ts?;
    # End of time range of messages to include in results
    decimal latest?;
};

# Represents the Queries record for the operation: apps_uninstall
public type AppsUninstallQueries record {
    # Issued when you created your application
    @http:Query {name: "client_secret"}
    string clientSecret?;
    # Issued when you created your application
    @http:Query {name: "client_id"}
    string clientId?;
};

public type FileObj record {|
    string filetype?;
    @jsondata:Name {value: "thumb_360"}
    string thumb360?;
    @jsondata:Name {value: "thumb_160"}
    string thumb160?;
    @jsondata:Name {value: "date_delete"}
    int dateDelete?;
    @jsondata:Name {value: "thumb_480"}
    string thumb480?;
    @jsondata:Name {value: "pinned_info"}
    PinnedInfoDef pinnedInfo?;
    @jsondata:Name {value: "thumb_800"}
    string thumb800?;
    @jsondata:Name {value: "thumb_720"}
    string thumb720?;
    @jsondata:Name {value: "non_owner_editable"}
    boolean nonOwnerEditable?;
    @jsondata:Name {value: "thumb_960"}
    string thumb960?;
    @jsondata:Name {value: "thumb_800_w"}
    int thumb800W?;
    string mode?;
    @jsondata:Name {value: "external_url"}
    string externalUrl?;
    @jsondata:Name {value: "is_tombstoned"}
    boolean isTombstoned?;
    @jsondata:Name {value: "num_stars"}
    int numStars?;
    @jsondata:Name {value: "image_exif_rotation"}
    int imageExifRotation?;
    FileIdDef id?;
    string state?;
    @jsondata:Name {value: "thumb_64"}
    string thumb64?;
    int created?;
    @jsondata:Name {value: "last_editor"}
    UserIdDef lastEditor?;
    @jsondata:Name {value: "thumb_480_w"}
    int thumb480W?;
    @jsondata:Name {value: "thumb_960_h"}
    int thumb960H?;
    @jsondata:Name {value: "url_private_download"}
    string urlPrivateDownload?;
    @jsondata:Name {value: "permalink_public"}
    string permalinkPublic?;
    @jsondata:Name {value: "has_rich_preview"}
    boolean hasRichPreview?;
    @jsondata:Name {value: "is_starred"}
    boolean isStarred?;
    ChannelIdDef[] channels?;
    int size?;
    @jsondata:Name {value: "comments_count"}
    int commentsCount?;
    string name?;
    string permalink?;
    @jsondata:Name {value: "public_url_shared"}
    boolean publicUrlShared?;
    int updated?;
    @jsondata:Name {value: "original_w"}
    int originalW?;
    @jsondata:Name {value: "thumb_480_h"}
    int thumb480H?;
    @jsondata:Name {value: "thumb_720_w"}
    int thumb720W?;
    string preview?;
    @jsondata:Name {value: "external_id"}
    string externalId?;
    @jsondata:Name {value: "thumb_1024_h"}
    int thumb1024H?;
    string title?;
    @jsondata:Name {value: "original_h"}
    int originalH?;
    DmIdDef[] ims?;
    @jsondata:Name {value: "thumb_720_h"}
    int thumb720H?;
    FileObjShares shares?;
    @jsondata:Name {value: "url_private"}
    string urlPrivate?;
    @jsondata:Name {value: "thumb_960_w"}
    int thumb960W?;
    @jsondata:Name {value: "display_as_bot"}
    boolean displayAsBot?;
    int timestamp?;
    UserIdDef editor?;
    @jsondata:Name {value: "thumb_80"}
    string thumb80?;
    boolean editable?;
    GroupIdDef[] groups?;
    @jsondata:Name {value: "is_external"}
    boolean isExternal?;
    @jsondata:Name {value: "thumb_360_h"}
    int thumb360H?;
    @jsondata:Name {value: "pretty_type"}
    string prettyType?;
    @jsondata:Name {value: "external_type"}
    string externalType?;
    @jsondata:Name {value: "user_team"}
    TeamDef userTeam?;
    @jsondata:Name {value: "pinned_to"}
    ChannelDef[] pinnedTo?;
    @jsondata:Name {value: "thumb_800_h"}
    int thumb800H?;
    @jsondata:Name {value: "source_team"}
    TeamDef sourceTeam?;
    @jsondata:Name {value: "is_public"}
    boolean isPublic?;
    @jsondata:Name {value: "thumb_360_w"}
    int thumb360W?;
    @jsondata:Name {value: "thumb_tiny"}
    string thumbTiny?;
    string mimetype?;
    ReactionObj[] reactions?;
    @jsondata:Name {value: "thumb_1024_w"}
    int thumb1024W?;
    @jsondata:Name {value: "thumb_1024"}
    string thumb1024?;
    string user?;
    string username?;
|};

# Schema for successful response auth.test method
public type AuthTestResponse record {|
    @jsondata:Name {value: "user_id"}
    UserIdDef userId;
    @jsondata:Name {value: "is_enterprise_install"}
    boolean isEnterpriseInstall?;
    string team;
    @jsondata:Name {value: "team_id"}
    TeamDef teamId;
    OkTrueDef ok;
    string user;
    @jsondata:Name {value: "bot_id"}
    BotIdDef botId?;
    string url;
|};

# Schema for successful response from conversations.setTopic method
public type ConversationsSetTopicResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: users_getPresence
public type UsersGetPresenceQueries record {
    # User to get presence info on. Defaults to the authed user
    string user?;
};

public type AdminConversationsArchiveBody record {
    # The channel to archive
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

public type '200User3 record {|
    string name;
    UserIdDef id;
|};

@constraint:String {pattern: re `^[UW][A-Z0-9]{8,}$|^$`}
public type TopicPurposeCreatorDef string;

public type '200User2 record {|
    @jsondata:Name {value: "image_32"}
    string image32;
    @jsondata:Name {value: "image_24"}
    string image24;
    string name;
    @jsondata:Name {value: "image_192"}
    string image192;
    UserIdDef id;
    @jsondata:Name {value: "image_48"}
    string image48;
    @jsondata:Name {value: "image_72"}
    string image72;
    @jsondata:Name {value: "image_512"}
    string image512;
|};

@constraint:String {pattern: re `^Rm[A-Z0-9]{8,}$`}
public type ReminderIdDef string;

# Represents the Queries record for the operation: usergroups_users_list
public type UsergroupsUsersListQueries record {
    # Allow results that involve disabled User Groups
    @http:Query {name: "include_disabled"}
    boolean includeDisabled?;
    # The encoded ID of the User Group to update
    string usergroup;
};

public type '200User1 record {|
    string name;
    UserIdDef id;
    string email;
|};

# Represents the Queries record for the operation: calls_info
public type CallsInfoQueries record {
    # `id` of the Call returned by the [`calls.add`](/methods/calls.add) method
    string id;
};

public type ChatScheduleMessageBody record {
    # Find and link channel names and usernames
    @jsondata:Name {value: "link_names"}
    boolean linkNames?;
    # Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)
    @jsondata:Name {value: "as_user"}
    boolean asUser?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string
    string attachments?;
    # A JSON-based array of structured blocks, presented as a URL-encoded string
    string blocks?;
    # Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead
    @jsondata:Name {value: "thread_ts"}
    decimal threadTs?;
    # Pass false to disable unfurling of media content
    @jsondata:Name {value: "unfurl_media"}
    boolean unfurlMedia?;
    # Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details
    string channel?;
    # Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`
    @jsondata:Name {value: "reply_broadcast"}
    boolean replyBroadcast?;
    # Pass true to enable unfurling of primarily text-based content
    @jsondata:Name {value: "unfurl_links"}
    boolean unfurlLinks?;
    # Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)
    string parse?;
    # How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail
    string text?;
    # Unix EPOCH timestamp of time in future to send the message
    @jsondata:Name {value: "post_at"}
    string postAt?;
};

public type UsersConversationsResponseResponseMetadata record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

public type AdminConversationsRestrictAccessRemoveGroupBody record {
    # The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel
    @jsondata:Name {value: "group_id"}
    string groupId;
    # The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization
    @jsondata:Name {value: "team_id"}
    string teamId;
    # The channel to remove the linked group from
    @jsondata:Name {value: "channel_id"}
    string channelId;
    # Authentication token. Requires scope: `admin.conversations:write`
    string token;
};

public type ConversationObjDisplayCounts record {|
    @jsondata:Name {value: "display_counts"}
    int displayCounts;
    @jsondata:Name {value: "guest_counts"}
    int guestCounts;
|};

public type UsergroupsDisableBody record {
    # The encoded ID of the User Group to disable
    string usergroup;
    # Include the number of users in the User Group
    @jsondata:Name {value: "include_count"}
    boolean includeCount?;
};

public type AdminUsersInviteBody record {
    # A comma-separated list of `channel_id`s for this user to join. At least one channel is required
    @jsondata:Name {value: "channel_ids"}
    string channelIds;
    # Is this user a single channel guest user? (default: false)
    @jsondata:Name {value: "is_ultra_restricted"}
    boolean isUltraRestricted?;
    # An optional message to send to the user in the invite email
    @jsondata:Name {value: "custom_message"}
    string customMessage?;
    # Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date
    @jsondata:Name {value: "guest_expiration_ts"}
    string guestExpirationTs?;
    # Is this user a multi-channel guest user? (default: false)
    @jsondata:Name {value: "is_restricted"}
    boolean isRestricted?;
    # Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    boolean resend?;
    # Full name of the user
    @jsondata:Name {value: "real_name"}
    string realName?;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
    # The email address of the person to invite
    string email;
};

# Represents the Queries record for the operation: chat_getPermalink
public type ChatGetPermalinkQueries record {
    # The ID of the conversation or channel containing the message
    string channel;
    # A message's `ts` value, uniquely identifying it within a channel
    @http:Query {name: "message_ts"}
    string messageTs;
};

# Represents the Queries record for the operation: conversations_history
public type ConversationsHistoryQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # Include messages with latest or oldest timestamp in results only when either timestamp is specified
    boolean inclusive?;
    # Start of time range of messages to include in results
    decimal oldest?;
    # Conversation ID to fetch history for
    string channel?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached
    int 'limit?;
    # End of time range of messages to include in results
    decimal latest?;
};

public type ConversationsHistoryResponseChannelActionsTs ChannelActionsTsAnyOf1|ChannelActionsTsChannelActionsTsAnyOf12?;

public type MessageObjAttachments record {|
    @jsondata:Name {value: "image_height"}
    int imageHeight?;
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    int id;
    @jsondata:Name {value: "image_width"}
    int imageWidth?;
    string fallback?;
    @jsondata:Name {value: "image_bytes"}
    int imageBytes?;
|};

# Schema for successful response from users.lookupByEmail method
public type UsersLookupByEmailResponse record {
    OkTrueDef ok;
    UserObj user;
};

@constraint:String {pattern: re `^Fc[A-Z0-9]{8,}$`}
public type CommentIdDef string;

# Schema for successful response conversations.archive method
public type ConversationsArchiveResponse record {|
    OkTrueDef ok;
|};

public type TeamProfileFieldOptionObj record {|
    @jsondata:Name {value: "is_scim"}
    boolean? isScim?;
    @jsondata:Name {value: "is_custom"}
    boolean? isCustom?;
    @jsondata:Name {value: "is_protected"}
    boolean? isProtected?;
    @jsondata:Name {value: "is_multiple_entry"}
    boolean? isMultipleEntry?;
|};

public type FilePin record {|
    FileObj file?;
    int created?;
    "file" 'type?;
    @jsondata:Name {value: "created_by"}
    UserIdDef createdBy?;
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type ConversationsKickBody record {
    # ID of conversation to remove user from
    string channel?;
    # User ID to be removed
    string user?;
};

public type TzTzAnyOf12 string;

public type UserObjTeamProfile record {|
    @constraint:Array {minLength: 1}
    TeamProfileFieldObj[] fields;
|};

public type CallsEndBody record {
    # Call duration in seconds
    int duration?;
    # `id` returned when registering the call using the [`calls.add`](/methods/calls.add) method
    string id;
};

public type MessagePin record {|
    int created?;
    ChannelDef channel?;
    MessageObj message?;
    "message" 'type?;
    @jsondata:Name {value: "created_by"}
    UserIdDef createdBy?;
|};

public type DiscoverableAnyOf1 anydata?;

# Represents the Queries record for the operation: admin_teams_list
public type AdminTeamsListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 100 both inclusive
    int 'limit?;
};

# Represents the Queries record for the operation: admin_apps_requests_list
public type AdminAppsRequestsListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
    @http:Query {name: "team_id"}
    string teamId?;
};

public type CallsUpdateBody record {
    # The URL required for a client to join the Call
    @jsondata:Name {value: "join_url"}
    string joinUrl?;
    # When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL
    @jsondata:Name {value: "desktop_app_join_url"}
    string desktopAppJoinUrl?;
    # `id` returned by the [`calls.add`](/methods/calls.add) method
    string id;
    # The name of the Call
    string title?;
};

# Represents the Queries record for the operation: auth_revoke
public type AuthRevokeQueries record {
    # Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked
    boolean test?;
};

# Schema for successful response from usergroups.update method
public type UsergroupsUpdateResponse record {|
    SubteamObj usergroup;
    OkTrueDef ok;
|};

public type '200Team2 record {|
    TeamDef id;
|};

public type ReactionsRemoveBody record {
    # File to remove reaction from
    string file?;
    # Channel where the message to remove reaction from was posted
    string channel?;
    # Reaction (emoji) name
    string name;
    # File comment to remove reaction from
    @jsondata:Name {value: "file_comment"}
    string fileComment?;
    # Timestamp of the message to remove reaction from
    string timestamp?;
};

public type '200Team3 record {|
    @jsondata:Name {value: "image_132"}
    string image132;
    @jsondata:Name {value: "image_102"}
    string image102;
    @jsondata:Name {value: "image_68"}
    string image68;
    @jsondata:Name {value: "image_default"}
    boolean imageDefault;
    @jsondata:Name {value: "image_34"}
    string image34;
    string domain;
    @jsondata:Name {value: "image_230"}
    string image230;
    @jsondata:Name {value: "image_44"}
    string image44;
    @jsondata:Name {value: "image_88"}
    string image88;
    string name;
    TeamDef id;
|};

public type '200Team1 record {|
    TeamDef id;
|};

public type SubteamObj record {|
    @jsondata:Name {value: "channel_count"}
    int channelCount?;
    @jsondata:Name {value: "date_delete"}
    int dateDelete;
    @jsondata:Name {value: "date_update"}
    int dateUpdate;
    @jsondata:Name {value: "deleted_by"}
    SubteamObjDeletedBy[] deletedBy;
    string description;
    @jsondata:Name {value: "is_external"}
    boolean isExternal;
    string 'handle;
    @jsondata:Name {value: "team_id"}
    TeamDef teamId;
    @jsondata:Name {value: "created_by"}
    UserIdDef createdBy;
    UserIdDef[] users?;
    @jsondata:Name {value: "auto_type"}
    SubteamObjAutoType[] autoType;
    SubteamObjPrefs prefs;
    @jsondata:Name {value: "is_subteam"}
    boolean isSubteam;
    @jsondata:Name {value: "user_count"}
    int userCount?;
    @jsondata:Name {value: "date_create"}
    int dateCreate;
    string name;
    @jsondata:Name {value: "updated_by"}
    UserIdDef updatedBy;
    @jsondata:Name {value: "is_usergroup"}
    boolean isUsergroup;
    SubteamIdDef id;
    @jsondata:Name {value: "auto_provision"}
    boolean autoProvision;
    @jsondata:Name {value: "enterprise_subteam_id"}
    string enterpriseSubteamId;
|};

# Represents the Queries record for the operation: files_remote_list
public type FilesRemoteListQueries record {
    # Filter files created after this timestamp (inclusive)
    @http:Query {name: "ts_from"}
    decimal tsFrom?;
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # Filter files created before this timestamp (inclusive)
    @http:Query {name: "ts_to"}
    decimal tsTo?;
    # Filter files appearing in a specific channel, indicated by its ID
    string channel?;
    # The maximum number of items to return
    int 'limit?;
};

# Represents the Queries record for the operation: reactions_list
public type ReactionsListQueries record {
    # Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details
    string cursor?;
    int count?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached
    int 'limit?;
    int page?;
    # Show reactions made by this user. Defaults to the authed user
    string user?;
    # If true always return the complete reaction list
    boolean full?;
};

public type CommentObj record {|
    @jsondata:Name {value: "is_starred"}
    boolean isStarred?;
    int created;
    @jsondata:Name {value: "num_stars"}
    int numStars?;
    @jsondata:Name {value: "is_intro"}
    boolean isIntro;
    @jsondata:Name {value: "pinned_info"}
    PinnedInfoDef pinnedInfo?;
    string comment;
    ReactionObj[] reactions?;
    CommentIdDef id;
    UserIdDef user;
    @jsondata:Name {value: "pinned_to"}
    ChannelDef[] pinnedTo?;
    int timestamp;
|};

# Schema for successful response from conversations.setPurpose method
public type ConversationsSetPurposeResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: users_list
public type UsersListQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors
    int 'limit?;
    # Set this to `true` to receive the locale for users. Defaults to `false`
    @http:Query {name: "include_locale"}
    boolean includeLocale?;
};

public type '200200200200AnyOf12234 record {|
    '200Team3 team;
    OkTrueDef ok;
    '200User3 user;
|};

public type ResourcesObj record {|
    (ChannelDef|TeamDef)[][] ids;
    @jsondata:Name {value: "excluded_ids"}
    (ChannelDef|TeamDef)[][] excludedIds?;
    boolean wildcard?;
|};

# Represents the Queries record for the operation: views_open
public type ViewsOpenQueries record {
    # A [view payload](/reference/surfaces/views). This must be a JSON-encoded string
    string view;
    # Exchange a trigger to post to the user
    @http:Query {name: "trigger_id"}
    string triggerId;
};

# Schema for successful response from files.revokePublicURL method
public type FilesRevokePublicURLResponse record {|
    FileObj file;
    OkTrueDef ok;
|};

public type PagingObj record {|
    @jsondata:Name {value: "per_page"}
    int perPage?;
    int total;
    int pages?;
    int spill?;
    int count?;
    int page;
|};

public type '200User record {|
    string name;
    UserIdDef id;
|};

@constraint:String {pattern: re `^[C][A-Z0-9]{2,}$`}
public type ChannelIdDef string;

# Represents the Queries record for the operation: conversations_list
public type ConversationsListQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
    string types?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000
    int 'limit?;
    # Set to `true` to exclude archived channels from the list
    @http:Query {name: "exclude_archived"}
    boolean excludeArchived?;
};

public type '200200AnyOf12 record {|
    int count;
    OkTrueDef ok;
|};

public type SubteamObjDeletedBy DeletedByAnyOf1|UserIdDef?;

# Schema for successful response of admin.conversations.invite
public type AdminConversationsInviteResponse record {|
    OkTrueDef ok;
|};

public type UserObjTz TzAnyOf1|TzTzAnyOf12?;

public type AppsPermissionsInfoResponseInfoTeam record {
    ResourcesObj resources;
    ScopesObj scopes;
};

# Schema for successful response from users.setPhoto method
public type UsersSetPhotoResponse record {|
    UsersSetPhotoResponseProfile profile;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: admin_conversations_restrictAccess_listGroups
public type AdminConversationsRestrictAccessListGroupsQueries record {
    # The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization
    @http:Query {name: "team_id"}
    string teamId?;
    @http:Query {name: "channel_id"}
    string channelId;
};

# Schema for successful response from users.setActive method
public type UsersSetActiveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from conversations.rename method
public type ConversationsRenameResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

# Schema for successful response from team.info method
public type TeamInfoResponse record {|
    TeamObj team;
    OkTrueDef ok;
|};

public type FilesRemoteAddBody record {
    # type of file
    string filetype?;
    # URL of the remote file
    @jsondata:Name {value: "external_url"}
    string externalUrl?;
    # Preview of the document via `multipart/form-data`
    @jsondata:Name {value: "preview_image"}
    string previewImage?;
    # Creator defined GUID for the file
    @jsondata:Name {value: "external_id"}
    string externalId?;
    # A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file
    @jsondata:Name {value: "indexable_file_contents"}
    string indexableFileContents?;
    # Title of the file being shared
    string title?;
    # Authentication token. Requires scope: `remote_files:write`
    string token?;
};

# Represents the Queries record for the operation: apps_event_authorizations_list
public type AppsEventAuthorizationsListQueries record {
    string cursor?;
    int 'limit?;
    @http:Query {name: "event_context"}
    string eventContext;
};

public type AdminConversationsGetConversationPrefsResponsePrefsWhoCanPost record {
    string[] 'type?;
    string[] user?;
};

public type RemindersCompleteBody record {
    # The ID of the reminder to be marked as complete
    string reminder?;
};

# Schema for successful response chat.getPermalink
public type ChatGetPermalinkResponse record {|
    ChannelDef channel;
    OkTrueDef ok;
    string permalink;
|};

@constraint:String {pattern: re `^[D][A-Z0-9]{8,}$`}
public type DmIdDef string;

public type DeprecationWarning record {|
    ("method_deprecated")[] warnings;
    string[] messages;
|};

public type CommentsObj anydata[];

# Represents the Queries record for the operation: dialog_open
public type DialogOpenQueries record {
    # The dialog definition. This must be a JSON-encoded string
    string dialog;
    # Exchange a trigger to post to the user
    @http:Query {name: "trigger_id"}
    string triggerId;
};

public type AdminUsersSessionResetBody record {
    # The ID of the user to wipe sessions for
    @jsondata:Name {value: "user_id"}
    string userId;
    # Only expire mobile sessions (default: false)
    @jsondata:Name {value: "mobile_only"}
    boolean mobileOnly?;
    # Only expire web sessions (default: false)
    @jsondata:Name {value: "web_only"}
    boolean webOnly?;
};

public type FilesDeleteBody record {
    # ID of file to delete
    string file?;
};

public type '200AnyOf12 record {|
    '200Team team;
    OkTrueDef ok;
    '200User user;
|};

public type '200AnyOf11 record {|
    ChannelDef channel;
    MessageObj message;
    OkTrueDef ok;
    "message" 'type;
|};

public type ChannelObjLatest MessageObj|LatestAnyOf2?;

public type ChannelObj record {|
    @jsondata:Name {value: "is_private"}
    boolean isPrivate;
    @jsondata:Name {value: "accepted_user"}
    UserIdDef acceptedUser?;
    ChannelObjPurpose purpose;
    @jsondata:Name {value: "is_moved"}
    int isMoved?;
    @jsondata:Name {value: "is_pending_ext_shared"}
    boolean isPendingExtShared?;
    @jsondata:Name {value: "unread_count"}
    int unreadCount?;
    @jsondata:Name {value: "pending_shared"}
    TeamDef[] pendingShared?;
    @jsondata:Name {value: "is_channel"}
    boolean isChannel;
    @jsondata:Name {value: "is_shared"}
    boolean isShared;
    UserIdDef[] members;
    @jsondata:Name {value: "is_non_threadable"}
    boolean isNonThreadable?;
    @jsondata:Name {value: "is_read_only"}
    boolean isReadOnly?;
    ChannelIdDef id;
    @jsondata:Name {value: "previous_names"}
    ChannelNameDef[] previousNames?;
    ChannelObjLatest[] latest?;
    @jsondata:Name {value: "last_read"}
    TsDef lastRead?;
    UserIdDef creator;
    @jsondata:Name {value: "is_frozen"}
    boolean isFrozen?;
    @jsondata:Name {value: "is_member"}
    boolean isMember?;
    @jsondata:Name {value: "is_mpim"}
    boolean isMpim;
    int created;
    @jsondata:Name {value: "name_normalized"}
    string nameNormalized;
    decimal priority?;
    @jsondata:Name {value: "unread_count_display"}
    int unreadCountDisplay?;
    int unlinked?;
    @jsondata:Name {value: "is_archived"}
    boolean isArchived?;
    @jsondata:Name {value: "is_general"}
    boolean isGeneral?;
    @jsondata:Name {value: "num_members"}
    int numMembers?;
    string name;
    ChannelObjTopic topic;
    @jsondata:Name {value: "is_thread_only"}
    boolean isThreadOnly?;
    @jsondata:Name {value: "is_org_shared"}
    boolean isOrgShared;
|};

public type AdminUsersSetOwnerBody record {
    # Id of the user to promote to owner
    @jsondata:Name {value: "user_id"}
    string userId;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
};

public type ConversationObjShares record {|
    @jsondata:Name {value: "is_active"}
    boolean isActive;
    @jsondata:Name {value: "accepted_user"}
    UserIdDef acceptedUser?;
    TeamObj team;
    UserIdDef user;
|};

# Represents the Queries record for the operation: users_conversations
public type UsersConversationsQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
    string types?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000
    int 'limit?;
    # Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership
    string user?;
    # Set to `true` to exclude archived channels from the list
    @http:Query {name: "exclude_archived"}
    boolean excludeArchived?;
};

# Schema for successful response of admin.conversations.disconnectShared
public type AdminConversationsRenameResponse record {|
    OkTrueDef ok;
|};

public type ConversationObj InlineArrayItemsConversationObj[];

# Schema for successful response from dialog.open method
public type DialogOpenResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: files_remote_share
public type FilesRemoteShareQueries record {
    # Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required
    string file?;
    # Comma-separated list of channel IDs where the file will be shared
    string channels?;
    # The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required
    @http:Query {name: "external_id"}
    string externalId?;
};

public type ChatMeMessageBody record {
    # Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name
    string channel?;
    # Text of the message to send
    string text?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse72 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse71 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse70 record {
    OkTrueDef ok;
};

public type AdminConversationsSetConversationPrefsBody record {
    # The channel to set the prefs for
    @jsondata:Name {value: "channel_id"}
    string channelId;
    # The prefs for this channel in a stringified JSON format
    string prefs;
};

# Represents the Queries record for the operation: reactions_get
public type ReactionsGetQueries record {
    # File to get reactions for
    string file?;
    # Channel where the message to get reactions for was posted
    string channel?;
    # File comment to get reactions for
    @http:Query {name: "file_comment"}
    string fileComment?;
    # If true always return the complete reaction list
    boolean full?;
    # Timestamp of the message to get reactions for
    string timestamp?;
};

# Represents the Queries record for the operation: users_profile_get
public type UsersProfileGetQueries record {
    # Include labels for each ID in custom profile fields
    @http:Query {name: "include_labels"}
    boolean includeLabels?;
    # User to retrieve profile info for
    string user?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse69 record {
    OkTrueDef ok;
};

public type ConversationObjPurpose record {|
    @jsondata:Name {value: "last_set"}
    int lastSet;
    TopicPurposeCreatorDef creator;
    string value;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse68 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse67 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse66 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse65 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse64 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse63 record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: pins_list
public type PinsListQueries record {
    # Channel to get pinned items for
    string channel;
};

public type AdminEmojiAddAliasBody record {
    # The alias of the emoji
    @jsondata:Name {value: "alias_for"}
    string aliasFor;
    # The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included
    string name;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

public type TeamIntegrationLogsResponseLogs record {|
    string date;
    @jsondata:Name {value: "service_type"}
    string serviceType?;
    @jsondata:Name {value: "app_type"}
    string appType;
    @jsondata:Name {value: "user_id"}
    UserIdDef userId;
    @jsondata:Name {value: "user_name"}
    string userName;
    string scope;
    @jsondata:Name {value: "service_id"}
    string serviceId?;
    ChannelDef channel?;
    @jsondata:Name {value: "change_type"}
    string changeType;
    @jsondata:Name {value: "admin_app_id"}
    AppIdDef adminAppId?;
    @jsondata:Name {value: "app_id"}
    AppIdDef appId;
|};

public type UserObjTeamProfile1 record {|
    @constraint:Array {minLength: 1}
    TeamProfileFieldObj[] fields;
|};

public type ChatScheduledMessagesListResponseScheduledMessages record {|
    @jsondata:Name {value: "date_created"}
    int dateCreated;
    @constraint:String {pattern: re `^[Q][A-Z0-9]{8,}$`}
    string id;
    string text?;
    @jsondata:Name {value: "post_at"}
    int postAt;
    @jsondata:Name {value: "channel_id"}
    ChannelIdDef channelId;
|};

public type AdminEmojiAddBody record {
    # The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included
    string name;
    # The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best
    string url;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

public type AdminEmojiRemoveBody record {
    # The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included
    string name;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

public type AdminTeamsCreateBody record {
    # Description for the team
    @jsondata:Name {value: "team_description"}
    string teamDescription?;
    # Team domain (for example, slacksoftballteam)
    @jsondata:Name {value: "team_domain"}
    string teamDomain;
    # Team name (for example, Slack Softball Team)
    @jsondata:Name {value: "team_name"}
    string teamName;
    # Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`
    @jsondata:Name {value: "team_discoverability"}
    string teamDiscoverability?;
};

# Schema for successful response from users.profile.get method
public type UsersProfileGetResponse record {|
    UserProfileObj profile;
    OkTrueDef ok;
|};

public type PinsRemoveBody record {
    # Channel where the item is pinned to
    string channel;
    # Timestamp of the message to un-pin
    string timestamp?;
};

public type ResponseMetadataObj InlineArrayItemsResponseMetadataObj[];

public type InlineResponseItems2002 '200AnyOf12|'200200AnyOf122|'200200200AnyOf1223|'200200200200AnyOf12234;

# Schema for successful response from conversations.list method
public type ConversationsListResponse record {|
    ConversationObj[] channels;
    @jsondata:Name {value: "response_metadata"}
    ConversationsListResponseResponseMetadata responseMetadata?;
    OkTrueDef ok;
|};

public type InlineResponseItems2001 '200AnyOf11|'200200AnyOf112|'200200200AnyOf1123;

public type ChatUpdateBody record {
    # Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`
    @jsondata:Name {value: "link_names"}
    string linkNames?;
    # Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users
    @jsondata:Name {value: "as_user"}
    string asUser?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field
    string attachments?;
    # A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field
    string blocks?;
    # Channel containing the message to be updated
    string channel;
    # Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`
    string parse?;
    # New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`
    string text?;
    # Timestamp of the message to be updated
    string ts;
};

public type AdminAppsRestrictBody record {
    @jsondata:Name {value: "team_id"}
    string teamId?;
    # The id of the app to restrict
    @jsondata:Name {value: "app_id"}
    string appId?;
    # The id of the request to restrict
    @jsondata:Name {value: "request_id"}
    string requestId?;
};

public type AdminConversationsRenameBody record {
    string name;
    # The channel to rename
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

# Schema for successful response from apps.permissions.request method
public type AppsPermissionsRequestResponse record {|
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse51 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse50 record {
    OkTrueDef ok;
};

public type FilesCommentsDeleteBody record {
    # File to delete a comment from
    string file?;
    # The comment to delete
    string id?;
};

public type StarsAddBody record {
    # File to add star to
    string file?;
    # Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)
    string channel?;
    # File comment to add star to
    @jsondata:Name {value: "file_comment"}
    string fileComment?;
    # Timestamp of the message to add star to
    string timestamp?;
};

public type TeamObjSsoProvider record {
    string name?;
    string label?;
    string 'type?;
};

public type AdminUsergroupsAddChannelsBody record {
    # Comma separated string of channel IDs
    @jsondata:Name {value: "channel_ids"}
    string channelIds;
    # ID of the IDP group to add default channels for
    @jsondata:Name {value: "usergroup_id"}
    string usergroupId;
    # The workspace to add default channels in
    @jsondata:Name {value: "team_id"}
    string teamId?;
};

public type CallsParticipantsRemoveBody record {
    # `id` returned by the [`calls.add`](/methods/calls.add) method
    string id;
    # The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)
    string users;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse48 record {
    OkTrueDef ok;
};

@constraint:String {pattern: re `^[F][A-Z0-9]{8,}$`}
public type FileIdDef string;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse47 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse46 record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: stars_list
public type StarsListQueries record {
    # Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details
    string cursor?;
    string count?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached
    int 'limit?;
    string page?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse45 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse44 record {
    OkTrueDef ok;
};

public type AppsPermissionsInfoResponseInfoAppHome record {
    ResourcesObj resources?;
    ScopesObj scopes?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse43 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse42 record {
    OkTrueDef ok;
};

public type ConversationMPIMObject record {|
    @jsondata:Name {value: "is_pending_ext_shared"}
    boolean isPendingExtShared?;
    @jsondata:Name {value: "pending_shared"}
    TeamDef[] pendingShared?;
    @jsondata:Name {value: "internal_team_ids"}
    TeamDef[] internalTeamIds?;
    @jsondata:Name {value: "is_channel"}
    boolean isChannel;
    UserIdDef[] members?;
    @jsondata:Name {value: "is_non_threadable"}
    boolean isNonThreadable?;
    @jsondata:Name {value: "pin_count"}
    int pinCount?;
    @jsondata:Name {value: "is_read_only"}
    boolean isReadOnly?;
    ChannelDef id;
    @jsondata:Name {value: "is_im"}
    boolean isIm;
    @jsondata:Name {value: "is_member"}
    boolean isMember?;
    @jsondata:Name {value: "is_open"}
    boolean isOpen?;
    int created;
    @jsondata:Name {value: "display_counts"}
    ConversationObjDisplayCounts1 displayCounts?;
    decimal priority?;
    int version?;
    @jsondata:Name {value: "is_starred"}
    boolean isStarred?;
    @jsondata:Name {value: "is_archived"}
    boolean isArchived;
    string name;
    ConversationObjTopic1 topic;
    @jsondata:Name {value: "shared_team_ids"}
    TeamDef[] sharedTeamIds?;
    @jsondata:Name {value: "is_org_shared"}
    boolean isOrgShared;
    @jsondata:Name {value: "is_private"}
    boolean isPrivate;
    @jsondata:Name {value: "accepted_user"}
    UserIdDef acceptedUser?;
    @jsondata:Name {value: "conversation_host_id"}
    WorkspaceIdDef conversationHostId?;
    ConversationObjPurpose1 purpose;
    @jsondata:Name {value: "is_moved"}
    int isMoved?;
    ConversationObjShares1[] shares?;
    @jsondata:Name {value: "unread_count"}
    int unreadCount?;
    @jsondata:Name {value: "is_shared"}
    boolean isShared;
    @jsondata:Name {value: "previous_names"}
    ChannelNameDef[] previousNames?;
    @jsondata:Name {value: "connected_team_ids"}
    TeamDef[] connectedTeamIds?;
    @jsondata:Name {value: "pending_connected_team_ids"}
    TeamDef[] pendingConnectedTeamIds?;
    ConversationObjLatest1[] latest?;
    @jsondata:Name {value: "last_read"}
    TsDef lastRead?;
    UserIdDef creator;
    @jsondata:Name {value: "is_frozen"}
    boolean isFrozen?;
    @jsondata:Name {value: "is_mpim"}
    true isMpim;
    @jsondata:Name {value: "timezone_count"}
    int timezoneCount?;
    @jsondata:Name {value: "is_ext_shared"}
    boolean isExtShared?;
    @jsondata:Name {value: "name_normalized"}
    string nameNormalized;
    @jsondata:Name {value: "unread_count_display"}
    int unreadCountDisplay?;
    @jsondata:Name {value: "is_group"}
    boolean isGroup;
    int unlinked?;
    @jsondata:Name {value: "is_general"}
    boolean isGeneral;
    @jsondata:Name {value: "num_members"}
    int numMembers?;
    @jsondata:Name {value: "is_thread_only"}
    boolean isThreadOnly?;
    UserIdDef user?;
    @jsondata:Name {value: "parent_conversation"}
    ConversationObjParentConversation1[] parentConversation?;
|};

# Schema for successful response from conversations.unarchive method
public type ConversationsUnarchiveResponse record {|
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse41 record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: admin_conversations_getTeams
public type AdminConversationsGetTeamsQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
    # The channel to determine connected workspaces within the organization for
    @http:Query {name: "channel_id"}
    string channelId;
};

# Schema for successful response of admin.conversations.search
public type AdminConversationsSearchResponse record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
    ChannelObj[] channels;
|};

# Schema for successful response from chat.meMessage method
public type ChatMeMessageResponse record {|
    ChannelDef channel?;
    OkTrueDef ok;
    TsDef ts?;
|};

public type BotProfileObj record {|
    boolean deleted;
    string name;
    BotIdDef id;
    @jsondata:Name {value: "team_id"}
    TeamDef teamId;
    BotProfileObjIcons icons;
    @jsondata:Name {value: "app_id"}
    AppIdDef appId;
    int updated;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse49 record {
    OkTrueDef ok;
};

public type PrimaryOwnerObj record {
    string id;
    string email;
};

public type InlineArrayItemsConversationObj ConversationObject|ConversationMPIMObject|ConversationIMChannelObjectFromConversationsMethods;

public type AdminConversationsDeleteBody record {
    # The channel to delete
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse62 record {
    OkTrueDef ok;
};

# Schema for successful response from reactions.add method
public type ReactionsAddResponse record {|
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse61 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse60 record {
    OkTrueDef ok;
};

public type AdminConversationsConvertToPrivateBody record {
    # The channel to convert to private
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

# Represents the Queries record for the operation: admin_users_list
public type AdminUsersListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # Limit for how many users to be retrieved per page
    int 'limit?;
    # The ID (`T1234`) of the workspace
    @http:Query {name: "team_id"}
    string teamId;
};

public type '200200200AnyOf1123 record {|
    FileObj file;
    CommentObj comment;
    OkTrueDef ok;
    "file_comment" 'type;
|};

public type ConversationsMarkBody record {
    # Channel or conversation to set the read cursor for
    string channel?;
    # Unique identifier of message you want marked as most recently seen in this conversation
    decimal ts?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse59 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse58 record {
    OkTrueDef ok;
};

public type LatestAnyOf23 anydata?;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse57 record {
    OkTrueDef ok;
};

public type LatestAnyOf22 anydata?;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse56 record {
    OkTrueDef ok;
};

public type LatestAnyOf21 anydata?;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse55 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse54 record {
    OkTrueDef ok;
};

public type RtmConnectResponseSelf record {|
    string name;
    UserIdDef id;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse53 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse52 record {
    OkTrueDef ok;
};

public type ResponseMetadata record {
    @constraint:Array {minLength: 1}
    string[] warnings?;
};

public type AdminConversationsUnarchiveBody record {
    # The channel to unarchive
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

public type CallsParticipantsAddBody record {
    # `id` returned by the [`calls.add`](/methods/calls.add) method
    string id;
    # The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)
    string users;
};

public type AdminTeamsSettingsSetIconBody record {
    # Image URL for the icon
    @jsondata:Name {value: "image_url"}
    string imageUrl;
    # ID for the workspace to set the icon for
    @jsondata:Name {value: "team_id"}
    string teamId;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

# Schema for successful response from conversations.replies method
public type ConversationsRepliesResponse record {|
    (record {|TsDef last_read?; TsDef latest_reply?; int reply_count; UserIdDef[] reply_users?; int reply_users_count?; TeamDef source_team?; boolean subscribed; TeamDef team?; string text; TsDef thread_ts; TsDef ts; string 'type; int unread_count?; UserIdDef user; UserProfileShortObj user_profile?; TeamDef user_team?;|}|record {|boolean is_starred?; UserIdDef parent_user_id; TeamDef source_team?; TeamDef team?; string text; TsDef thread_ts; TsDef ts; string 'type; UserIdDef user; UserProfileShortObj user_profile?; TeamDef user_team?;|})[][] messages;
    @jsondata:Name {value: "has_more"}
    boolean hasMore?;
    OkTrueDef ok;
|};

# Schema for successful response from reminders.complete method
public type RemindersCompleteResponse record {|
    OkTrueDef ok;
|};

public type ChatPostMessageBody record {
    # URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below
    @jsondata:Name {value: "icon_url"}
    string iconUrl?;
    # Find and link channel names and usernames
    @jsondata:Name {value: "link_names"}
    boolean linkNames?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string
    string attachments?;
    # Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below
    @jsondata:Name {value: "icon_emoji"}
    string iconEmoji?;
    # A JSON-based array of structured blocks, presented as a URL-encoded string
    string blocks?;
    # Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details
    string channel;
    # Change how messages are treated. Defaults to `none`. See [below](#formatting)
    string parse?;
    # Disable Slack markup parsing by setting to `false`. Enabled by default
    boolean mrkdwn?;
    # Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below
    @jsondata:Name {value: "as_user"}
    string asUser?;
    # Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead
    @jsondata:Name {value: "thread_ts"}
    string threadTs?;
    # Pass false to disable unfurling of media content
    @jsondata:Name {value: "unfurl_media"}
    boolean unfurlMedia?;
    # Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`
    @jsondata:Name {value: "reply_broadcast"}
    boolean replyBroadcast?;
    # Pass true to enable unfurling of primarily text-based content
    @jsondata:Name {value: "unfurl_links"}
    boolean unfurlLinks?;
    # How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail
    string text?;
    # Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below
    string username?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse26 record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: workflows_stepCompleted
public type WorkflowsStepCompletedQueries record {
    # Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object
    string outputs?;
    # Context identifier that maps to the correct workflow step execution
    @http:Query {name: "workflow_step_execute_id"}
    string workflowStepExecuteId;
};

@constraint:String {pattern: re `^A[A-Z0-9]{1,}$`}
public type AppIdDef string;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse25 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse24 record {
    OkTrueDef ok;
};

public type ChatDeleteScheduledMessageBody record {
    # Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope
    @jsondata:Name {value: "as_user"}
    boolean asUser?;
    # `scheduled_message_id` returned from call to chat.scheduleMessage
    @jsondata:Name {value: "scheduled_message_id"}
    string scheduledMessageId;
    # The channel the scheduled_message is posting to
    string channel;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse23 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse22 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse21 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse20 record {
    OkTrueDef ok;
};

public type FileObjShares record {|
    record {||} 'private?;
    record {||} 'public?;
|};

public type UsergroupsCreateBody record {
    # A comma separated string of encoded channel IDs for which the User Group uses as a default
    string channels?;
    # A name for the User Group. Must be unique among User Groups
    string name;
    # A short description of the User Group
    string description?;
    # A mention handle. Must be unique among channels, users and User Groups
    string 'handle?;
    # Include the number of users in each User Group
    @jsondata:Name {value: "include_count"}
    boolean includeCount?;
};

# Schema for successful response from usergroups.users.update method
public type UsergroupsUsersUpdateResponse record {|
    SubteamObj usergroup;
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse29 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse28 record {
    OkTrueDef ok;
};

public type ConversationObjPurpose1 record {|
    @jsondata:Name {value: "last_set"}
    int lastSet;
    TopicPurposeCreatorDef creator;
    string value;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse27 record {
    OkTrueDef ok;
};

public type UserProfileObj record {|
    @jsondata:Name {value: "image_32"}
    string? image32?;
    @jsondata:Name {value: "status_emoji"}
    string statusEmoji;
    @jsondata:Name {value: "guest_invited_by"}
    string? guestInvitedBy?;
    @jsondata:Name {value: "is_restricted"}
    boolean? isRestricted?;
    @jsondata:Name {value: "api_app_id"}
    OptionalAppIdDef apiAppId?;
    @jsondata:Name {value: "image_192"}
    string? image192?;
    @jsondata:Name {value: "real_name"}
    string realName;
    string title;
    @jsondata:Name {value: "status_text_canonical"}
    string? statusTextCanonical?;
    string skype;
    @jsondata:Name {value: "is_app_user"}
    boolean isAppUser?;
    @jsondata:Name {value: "image_original"}
    string? imageOriginal?;
    @jsondata:Name {value: "guest_expiration_ts"}
    int? guestExpirationTs?;
    @jsondata:Name {value: "real_name_normalized"}
    string realNameNormalized;
    @jsondata:Name {value: "avatar_hash"}
    string avatarHash;
    @jsondata:Name {value: "first_name"}
    string? firstName?;
    @jsondata:Name {value: "bot_id"}
    BotIdDef botId?;
    string? email?;
    @jsondata:Name {value: "image_512"}
    string? image512?;
    @jsondata:Name {value: "status_default_text_canonical"}
    string? statusDefaultTextCanonical?;
    @jsondata:Name {value: "is_ultra_restricted"}
    boolean? isUltraRestricted?;
    @jsondata:Name {value: "image_1024"}
    string? image1024?;
    @jsondata:Name {value: "status_default_emoji"}
    string statusDefaultEmoji?;
    @jsondata:Name {value: "image_24"}
    string? image24?;
    @jsondata:Name {value: "last_name"}
    string? lastName?;
    @jsondata:Name {value: "image_48"}
    string? image48?;
    WorkspaceIdDef team?;
    @jsondata:Name {value: "display_name"}
    string displayName;
    @jsondata:Name {value: "last_avatar_image_hash"}
    string lastAvatarImageHash?;
    @jsondata:Name {value: "always_active"}
    boolean alwaysActive?;
    @jsondata:Name {value: "status_expiration"}
    int statusExpiration?;
    @jsondata:Name {value: "memberships_count"}
    int membershipsCount?;
    string phone;
    @jsondata:Name {value: "user_id"}
    string userId?;
    string? name?;
    @jsondata:Name {value: "status_default_text"}
    string statusDefaultText?;
    string pronouns?;
    @jsondata:Name {value: "is_custom_image"}
    boolean isCustomImage?;
    @jsondata:Name {value: "status_text"}
    string statusText;
    record {}[]? fields;
    @jsondata:Name {value: "image_72"}
    string? image72?;
    int updated?;
    @jsondata:Name {value: "display_name_normalized"}
    string displayNameNormalized;
    string? username?;
|};

public type AdminUsersSetRegularBody record {
    # The ID of the user to designate as a regular user
    @jsondata:Name {value: "user_id"}
    string userId;
    # The ID (`T1234`) of the workspace
    @jsondata:Name {value: "team_id"}
    string teamId;
};

public type AutoTypeAnyOf1 anydata?;

# This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace
public type Blocks BlocksInner[];

public type NewPagingStyle record {|
    @jsondata:Name {value: "next_cursor"}
    string nextCursor;
|};

@constraint:String {pattern: re `^[WU][A-Z0-9]{8,}$`}
public type EnterpriseUserIdDef string;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse40 record {
    OkTrueDef ok;
};

public type AdminConversationsSetTeamsBody record {
    # True if channel has to be converted to an org channel
    @jsondata:Name {value: "org_channel"}
    boolean orgChannel?;
    # A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide
    @jsondata:Name {value: "target_team_ids"}
    string targetTeamIds?;
    # The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel
    @jsondata:Name {value: "team_id"}
    string teamId?;
    # The encoded `channel_id` to add or remove to workspaces
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

public type '200200200AnyOf1223 record {|
    '200Team2 team;
    OkTrueDef ok;
    '200User2 user;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse37 record {
    OkTrueDef ok;
};

public type AppsPermissionsInfoResponseInfoIm record {
    ResourcesObj resources?;
    ScopesObj scopes?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse36 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse35 record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: team_integrationLogs
public type TeamIntegrationLogsQueries record {
    # Filter logs to this service. Defaults to all logs
    @http:Query {name: "service_id"}
    string serviceId?;
    string count?;
    # Filter logs with this change type. Defaults to all logs
    @http:Query {name: "change_type"}
    string changeType?;
    string page?;
    # Filter logs to this Slack app. Defaults to all logs
    @http:Query {name: "app_id"}
    string appId?;
    # Filter logs generated by this user’s actions. Defaults to all logs
    string user?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse34 record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: admin_teams_owners_list
public type AdminTeamsOwnersListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
    @http:Query {name: "team_id"}
    string teamId;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse33 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse32 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse31 record {
    OkTrueDef ok;
};

public type AutoTypeAutoTypeAnyOf12 "owner"|"admin";

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse30 record {
    OkTrueDef ok;
};

# Schema for successful response of admin.conversations.getConversationPrefs
public type AdminConversationsGetConversationPrefsResponse record {|
    OkTrueDef ok;
    AdminConversationsGetConversationPrefsResponsePrefs prefs?;
|};

public type ConversationObjDisplayCounts1 record {|
    @jsondata:Name {value: "display_counts"}
    int displayCounts;
    @jsondata:Name {value: "guest_counts"}
    int guestCounts;
|};

# Represents the Queries record for the operation: admin_teams_admins_list
public type AdminTeamsAdminsListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return
    int 'limit?;
    @http:Query {name: "team_id"}
    string teamId;
};

public type InlineResponseItems200 '200AnyOf1|'200200AnyOf12;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse39 record {
    OkTrueDef ok;
};

public type SubteamObjAutoType AutoTypeAnyOf1|AutoTypeAutoTypeAnyOf12?;

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse38 record {
    OkTrueDef ok;
};

# Schema for successful response of chat.update method
public type ChatUpdateResponse record {|
    string channel;
    string text;
    MessageObject message;
    OkTrueDef ok;
    string ts;
|};

public type UserObj InlineArrayItemsUserObj[];

public type ParentConversationAnyOf2 anydata?;

public type InlineArrayItemsUserObj UserObjAnyOf1|UserObjUserObjAnyOf12;

# Represents the Queries record for the operation: dnd_teamInfo
public type DndTeamInfoQueries record {
    # Comma-separated list of users to fetch Do Not Disturb status for
    string users?;
};

# Represents the Queries record for the operation: admin_emoji_list
public type AdminEmojiListQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive
    int 'limit?;
};

@constraint:String {pattern: re `^[CGD][A-Z0-9]{8,}$`}
public type ChannelDef string;

@constraint:String {pattern: re `^(A[A-Z0-9]{1,})?$`}
public type OptionalAppIdDef string;

public type ConversationsLeaveBody record {
    # Conversation to leave
    string channel?;
};

# Represents the Queries record for the operation: admin_conversations_getConversationPrefs
public type AdminConversationsGetConversationPrefsQueries record {
    # The channel to get preferences for
    @http:Query {name: "channel_id"}
    string channelId;
};

# Schema for successful response api.test method
public type ApiTestResponse record {|
    OkTrueDef ok;
    record {}...;
|};

public type AppsPermissionsResourcesListResponseResources record {
    string id?;
    string 'type?;
};

# Schema for successful response from migration.exchange method
public type MigrationExchangeResponse record {
    string enterprise_id;
    string[] invalid_user_ids?;
    OkTrueDef ok;
    TeamDef team_id;
    record {} user_id_map?;
};

# Represents the Queries record for the operation: team_info
public type TeamInfoQueries record {
    # Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels
    string team?;
};

# Represents the Queries record for the operation: apps_permissions_users_list
public type AppsPermissionsUsersListQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail
    string cursor?;
    # The maximum number of items to return
    int 'limit?;
};

# Schema for successful response from usergroups.list method
public type UsergroupsListResponse record {|
    SubteamObj[] usergroups;
    OkTrueDef ok;
|};

public type ChatDeleteBody record {
    # Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope
    @jsondata:Name {value: "as_user"}
    boolean asUser?;
    # Channel containing the message to be deleted
    string channel?;
    # Timestamp of the message to be deleted
    decimal ts?;
};

# Schema for successful response from conversations.history method
public type ConversationsHistoryResponse record {|
    @jsondata:Name {value: "channel_actions_count"}
    int channelActionsCount;
    @jsondata:Name {value: "pin_count"}
    int pinCount;
    @constraint:Array {minLength: 1}
    MessageObj[] messages;
    @jsondata:Name {value: "channel_actions_ts"}
    ConversationsHistoryResponseChannelActionsTs[] channelActionsTs;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    OkTrueDef ok;
|};

public type UsersSetPhotoBody record {
    # Y coordinate of top-left corner of crop box
    @jsondata:Name {value: "crop_y"}
    string cropY?;
    # File contents via `multipart/form-data`
    string image?;
    # Width/height of crop box (always square)
    @jsondata:Name {value: "crop_w"}
    string cropW?;
    # X coordinate of top-left corner of crop box
    @jsondata:Name {value: "crop_x"}
    string cropX?;
    # Authentication token. Requires scope: `users.profile:write`
    string token;
};

# Schema for successful response from dnd.endDnd method
public type DndEndDndResponse record {|
    OkTrueDef ok;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse15 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse14 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse13 record {
    OkTrueDef ok;
};

# Schema for successful response from conversations.leave method
public type ConversationsLeaveResponse record {|
    OkTrueDef ok;
    @jsondata:Name {value: "not_in_channel"}
    true notInChannel?;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse12 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse11 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse10 record {
    OkTrueDef ok;
};

public type DndSetSnoozeBody record {
    # Number of minutes, from now, to snooze until
    @jsondata:Name {value: "num_minutes"}
    string numMinutes;
    # Authentication token. Requires scope: `dnd:write`
    string token;
};

public type ConversationsCreateBody record {
    # Create a private channel instead of a public one
    @jsondata:Name {value: "is_private"}
    boolean isPrivate?;
    # Name of the public or private channel to create
    string name?;
};

# Represents the Queries record for the operation: chat_scheduledMessages_list
public type ChatScheduledMessagesListQueries record {
    # For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from
    string cursor?;
    # A UNIX timestamp of the oldest value in the time range
    decimal oldest?;
    # The channel of the scheduled messages
    string channel?;
    # Maximum number of original entries to return
    int 'limit?;
    # A UNIX timestamp of the latest value in the time range
    decimal latest?;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse19 record {
    OkTrueDef ok;
};

# Schema for successful response from rtm.connect method
public type RtmConnectResponse record {|
    RtmConnectResponseSelf self;
    RtmConnectResponseTeam team;
    OkTrueDef ok;
    string url;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse18 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse17 record {
    OkTrueDef ok;
};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method
public type DefaultSuccessResponse16 record {
    OkTrueDef ok;
};

@constraint:String {pattern: re `^[TE][A-Z0-9]{8,}$`}
public type WorkspaceIdDef string;

public type ConversationObjLatest2 MessageObj|LatestAnyOf23?;

public type ConversationObjLatest1 MessageObj|LatestAnyOf22?;

public type AdminConversationsInviteBody record {
    # The users to invite
    @jsondata:Name {value: "user_ids"}
    string userIds;
    # The channel that the users will be invited to
    @jsondata:Name {value: "channel_id"}
    string channelId;
};

# Schema for successful response from apps.permissions.info method
public type AppsPermissionsInfoResponse record {|
    OkTrueDef ok;
    AppsPermissionsInfoResponseInfo info;
|};

@constraint:String {pattern: re `^[G][A-Z0-9]{8,}$`}
public type GroupIdDef string;

public type TeamObjDiscoverable DiscoverableAnyOf1|DiscoverableDiscoverableAnyOf12?;

# Schema for successful response from reminders.add method
public type RemindersAddResponse record {|
    ReminderObj reminder;
    OkTrueDef ok;
|};

# Schema for successful response of admin.conversations.getTeams
public type AdminConversationsGetTeamsResponse record {|
    @jsondata:Name {value: "team_ids"}
    TeamDef[] teamIds;
    @jsondata:Name {value: "response_metadata"}
    AdminConversationsGetTeamsResponseResponseMetadata responseMetadata?;
    OkTrueDef ok;
|};

public type FilesRevokePublicURLBody record {
    # File to revoke
    string file?;
};

public type FilesRemoteRemoveBody record {
    # Specify a file by providing its ID
    string file?;
    # Creator defined GUID for the file
    @jsondata:Name {value: "external_id"}
    string externalId?;
    # Authentication token. Requires scope: `remote_files:write`
    string token?;
};

# Represents the Queries record for the operation: apps_permissions_users_request
public type AppsPermissionsUsersRequestQueries record {
    # Token used to trigger the request
    @http:Query {name: "trigger_id"}
    string triggerId;
    # A comma separated list of user scopes to request for
    string scopes;
    # The user this scope is being requested for
    string user;
};

public type ReactionObj record {
    int count;
    string name;
    UserIdDef[] users;
};

public type '200Items FilePin|MessagePin;

# enterprise user
public type UserObjUserObjAnyOf12 record {|
    # refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559
    @constraint:String {pattern: re `^([a-fA-F0-9]{6})?$`}
    string color?;
    @jsondata:Name {value: "has_2fa"}
    boolean has2fa?;
    @jsondata:Name {value: "is_restricted"}
    boolean isRestricted?;
    UserObjTz1[] tz?;
    @jsondata:Name {value: "tz_label"}
    string tzLabel?;
    @jsondata:Name {value: "is_primary_owner"}
    boolean isPrimaryOwner?;
    @jsondata:Name {value: "team_profile"}
    UserObjTeamProfile1 teamProfile?;
    @jsondata:Name {value: "real_name"}
    string realName?;
    @jsondata:Name {value: "team_id"}
    WorkspaceIdDef teamId?;
    string locale?;
    @jsondata:Name {value: "is_admin"}
    boolean isAdmin?;
    @jsondata:Name {value: "is_app_user"}
    boolean isAppUser;
    @jsondata:Name {value: "tz_offset"}
    decimal tzOffset?;
    @jsondata:Name {value: "is_stranger"}
    boolean isStranger?;
    @jsondata:Name {value: "is_forgotten"}
    boolean isForgotten?;
    UserIdDef id;
    @jsondata:Name {value: "is_bot"}
    boolean isBot;
    string presence?;
    @jsondata:Name {value: "is_ultra_restricted"}
    boolean isUltraRestricted?;
    @constraint:Array {minLength: 1}
    WorkspaceIdDef[] teams?;
    @jsondata:Name {value: "is_owner"}
    boolean isOwner?;
    UserProfileObj profile;
    @jsondata:Name {value: "is_external"}
    boolean isExternal?;
    @jsondata:Name {value: "enterprise_user"}
    EnterpriseUserObj enterpriseUser?;
    boolean deleted?;
    @jsondata:Name {value: "two_factor_type"}
    string twoFactorType?;
    string name;
    decimal updated;
|};

# Schema for successful response from team.profile.get method
public type TeamProfileGetResponse record {|
    TeamProfileGetResponseProfile profile;
    OkTrueDef ok;
|};

public type TeamProfileFieldObjOptions OptionsAnyOf1|TeamProfileFieldOptionObj?;

public type InlineArrayItemsResponseMetadataObj NewPagingStyle|DeprecationWarning|DeprecationWarningAndPagingStyleTogether;

# Schema for successful response conversations.kick method
public type ConversationsKickResponse record {|
    OkTrueDef ok;
|};

public type RemindersAddBody record {
    # The content of the reminder
    string text;
    # When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday")
    string time;
    # The user who will receive the reminder. If no user is specified, the reminder will go to user who created it
    string user?;
};

# Schema for successful response from stars.add method
public type StarsAddResponse record {|
    OkTrueDef ok;
|};

public type ConversationsOpenBody record {
    # Boolean, indicates you want the full IM channel definition in the response
    @jsondata:Name {value: "return_im"}
    boolean returnIm?;
    # Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead
    string channel?;
    # Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`
    string users?;
};

# Represents the Queries record for the operation: views_publish
public type ViewsPublishQueries record {
    # A [view payload](/reference/surfaces/views). This must be a JSON-encoded string
    string view;
    # `id` of the user you want publish a view to
    @http:Query {name: "user_id"}
    string userId;
    # A string that represents view state to protect against possible race conditions
    string hash?;
};

# Schema for successful response from files.sharedPublicURL method
public type FilesSharedPublicURLResponse record {|
    FileObj file;
    OkTrueDef ok;
|};

# Schema for successful response files.upload method
public type FilesUploadResponse record {|
    FileObj file;
    OkTrueDef ok;
|};
