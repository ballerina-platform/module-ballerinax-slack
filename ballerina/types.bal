// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/http;

# Represents the Queries record for the operation: usergroups_list
public type Usergroups_listQueries record {
    # Include disabled User Groups.
    boolean include_disabled?;
    # Include the list of users for each User Group.
    boolean include_users?;
    # Include the number of users in each User Group.
    boolean include_count?;
};

@constraint:String {pattern: re `^[UW][A-Z0-9]{8,}$|^$`}
public type TopicPurposeCreatorDef string;

@constraint:String {pattern: re `^Rm[A-Z0-9]{8,}$`}
public type ReminderIdDef string;

# Represents the Queries record for the operation: dialog_open
public type Dialog_openQueries record {
    # The dialog definition. This must be a JSON-encoded string.
    string dialog;
    # Exchange a trigger to post to the user.
    string trigger_id;
};

public type pins_add_body record {
    # Channel to pin the item in.
    string channel;
    # Timestamp of the message to pin.
    string timestamp?;
};

public type usergroups_disable_body record {
    # Include the number of users in the User Group.
    boolean include_count?;
    # The encoded ID of the User Group to disable.
    string usergroup;
};

public type reminders_complete_body record {
    # The ID of the reminder to be marked as complete
    string reminder?;
};

public type admin_usergroups_addTeams_body record {
    # When `true`, this method automatically creates new workspace accounts for the IDP group members.
    boolean auto_provision?;
    # A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    string team_ids;
    # An encoded usergroup (IDP Group) ID.
    string usergroup_id;
};

# Schema for successful response from usergroups.users.list method
public type UsergroupsUsersListResponse record {|
    OkTrueDef ok;
    UserIdDef[] users;
|};

public type admin_teams_settings_setDiscoverability_body record {
    # This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
    string discoverability;
    # The ID of the workspace to set discoverability on.
    string team_id;
};

# Schema for successful response from users.profile.set method
public type UsersProfileSetResponse record {|
    string email_pending?;
    OkTrueDef ok;
    UserProfileObj profile;
    string username;
|};

public type admin_conversations_disconnectShared_body record {
    # The channel to be disconnected from some workspaces.
    string channel_id;
    # The team to be removed from the channel. Currently only a single team id can be specified.
    string leaving_team_ids?;
};

# Represents the Queries record for the operation: files_remote_share
public type Files_remote_shareQueries record {
    # Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.
    string file?;
    # Comma-separated list of channel IDs where the file will be shared.
    string channels?;
    # The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.
    string external_id?;
};

public type conversations_kick_body record {
    # ID of conversation to remove user from.
    string channel?;
    # User ID to be removed.
    string user?;
};

public type stars_remove_body record {
    # Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).
    string channel?;
    # File to remove star from.
    string file?;
    # File comment to remove star from.
    string file_comment?;
    # Timestamp of the message to remove star from.
    string timestamp?;
};

# Schema for successful response from users.lookupByEmail method
public type UsersLookupByEmailResponse record {
    OkTrueDef ok;
    UserObj user;
};

@constraint:String {pattern: re `^Fc[A-Z0-9]{8,}$`}
public type CommentIdDef string;

# Schema for successful response conversations.archive method
public type ConversationsArchiveResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: apps_permissions_users_list
public type Apps_permissions_users_listQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # The maximum number of items to return.
    int 'limit?;
};

# Represents the Queries record for the operation: files_remote_info
public type Files_remote_infoQueries record {
    # Specify a file by providing its ID.
    string file?;
    # Creator defined GUID for the file.
    string external_id?;
};

public type calls_participants_add_body record {
    # `id` returned by the [`calls.add`](/methods/calls.add) method.
    string id;
    # The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    string users;
};

# Represents the Queries record for the operation: admin_conversations_restrictAccess_listGroups
public type Admin_conversations_restrictAccess_listGroupsQueries record {
    # The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    string team_id?;
    string channel_id;
};

# Schema for successful response from dnd.info method
public type DndInfoResponse record {|
    boolean dnd_enabled;
    int next_dnd_end_ts;
    int next_dnd_start_ts;
    OkTrueDef ok;
    boolean snooze_enabled?;
    int snooze_endtime?;
    int snooze_remaining?;
|};

public type TeamProfileFieldOptionObj record {|
    boolean? is_custom?;
    boolean? is_multiple_entry?;
    boolean? is_protected?;
    boolean? is_scim?;
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Schema for successful response of admin.conversations.unarchive
public type AdminConversationsUnarchiveResponse record {|
    OkTrueDef ok;
|};

public type files_comments_delete_body record {
    # File to delete a comment from.
    string file?;
    # The comment to delete.
    string id?;
};

public type conversations_join_body record {
    # ID of conversation to join
    string channel?;
};

# Represents the Queries record for the operation: admin_apps_requests_list
public type Admin_apps_requests_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
    string team_id?;
};

# Represents the Queries record for the operation: files_remote_list
public type Files_remote_listQueries record {
    # Filter files created after this timestamp (inclusive).
    decimal ts_from?;
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # Filter files created before this timestamp (inclusive).
    decimal ts_to?;
    # Filter files appearing in a specific channel, indicated by its ID.
    string channel?;
    # The maximum number of items to return.
    int 'limit?;
};

# Schema for successful response of chat.delete method
public type ChatDeleteResponse record {|
    ChannelDef channel;
    OkTrueDef ok;
    TsDef ts;
|};

# Represents the Queries record for the operation: dnd_info
public type Dnd_infoQueries record {
    # User to fetch status for (defaults to current user)
    string user?;
};

# Schema for successful response of admin.conversations.archive
public type AdminConversationsArchiveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from chat.postEphemeral method
public type ChatPostEphemeralResponse record {|
    TsDef message_ts;
    OkTrueDef ok;
|};

# Schema for successful response from usergroups.enable method
public type UsergroupsEnableResponse record {|
    OkTrueDef ok;
    SubteamObj usergroup;
|};

# Represents the Queries record for the operation: workflows_stepCompleted
public type Workflows_stepCompletedQueries record {
    # Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.
    string outputs?;
    # Context identifier that maps to the correct workflow step execution.
    string workflow_step_execute_id;
};

# Represents the Queries record for the operation: conversations_members
public type Conversations_membersQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # ID of the conversation to retrieve members for
    string channel?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
    int 'limit?;
};

@constraint:String {pattern: re `^\d{10}\.\d{6}$`}
public type TsDef string;

public type TeamProfileFieldObj record {|
    string? field_name?;
    string hint;
    @constraint:String {pattern: re `^X[a-zA-Z0-9]{9,}$`}
    string id;
    boolean is_hidden?;
    string label;
    (anydata)[] options?;
    decimal ordering;
    string[]? possible_values?;
    "text"|"date"|"link"|"mailto"|"options_list"|"user" 'type;
|};

# Schema for successful response from auth.revoke method
public type AuthRevokeResponse record {|
    OkTrueDef ok;
    boolean revoked;
|};

# Schema for successful response from usergroups.update method
public type UsergroupsUpdateResponse record {|
    OkTrueDef ok;
    SubteamObj usergroup;
|};

public type conversations_archive_body record {
    # ID of conversation to archive
    string channel?;
};

public type FileObj_shares record {|
    record {||} 'private?;
    record {||} 'public?;
|};

@constraint:String {pattern: re `^[E][A-Z0-9]{8,}$`}
public type EnterpriseIdDef string;

public type SubteamObj record {|
    boolean auto_provision;
    (anydata)[] auto_type;
    int channel_count?;
    UserIdDef created_by;
    int date_create;
    int date_delete;
    int date_update;
    (anydata)[] deleted_by;
    string description;
    string enterprise_subteam_id;
    string 'handle;
    SubteamIdDef id;
    boolean is_external;
    boolean is_subteam;
    boolean is_usergroup;
    string name;
    SubteamObj_prefs prefs;
    TeamDef team_id;
    UserIdDef updated_by;
    int user_count?;
    UserIdDef[] users?;
|};

public type RtmConnectResponse_team record {|
    string domain;
    TeamDef id;
    string name;
|};

public type stars_add_body record {
    # Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).
    string channel?;
    # File to add star to.
    string file?;
    # File comment to add star to.
    string file_comment?;
    # Timestamp of the message to add star to.
    string timestamp?;
};

public type calls_update_body record {
    # When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    string desktop_app_join_url?;
    # `id` returned by the [`calls.add`](/methods/calls.add) method.
    string id;
    # The URL required for a client to join the Call.
    string join_url?;
    # The name of the Call.
    string title?;
};

# Represents the Queries record for the operation: admin_emoji_list
public type Admin_emoji_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
};

public type TeamObj_sso_provider record {
    string label?;
    string name?;
    string 'type?;
};

public type admin_users_setRegular_body record {
    # The ID (`T1234`) of the workspace.
    string team_id;
    # The ID of the user to designate as a regular user.
    string user_id;
};

# Represents the Headers record for the operation: admin_users_setOwner
public type Admin_users_setOwnerHeaders record {
    # Authentication token. Requires scope: `admin.users:write`
    string token;
};

public type CommentObj record {|
    string comment;
    int created;
    CommentIdDef id;
    boolean is_intro;
    boolean is_starred?;
    int num_stars?;
    PinnedInfoDef pinned_info?;
    ChannelDef[] pinned_to?;
    ReactionObj[] reactions?;
    int timestamp;
    UserIdDef user;
|};

public type AppsPermissionsResourcesListResponse_response_metadata record {|
    string next_cursor;
|};

# Schema for successful response from conversations.setPurpose method
public type ConversationsSetPurposeResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type TeamObj record {|
    boolean archived?;
    string avatar_base_url?;
    int created?;
    int date_create?;
    boolean deleted?;
    string? description?;
    (anydata)[] discoverable?;
    string domain;
    string email_domain;
    EnterpriseIdDef enterprise_id?;
    EnterpriseNameDef enterprise_name?;
    ExternalOrgMigrationsObj external_org_migrations?;
    boolean has_compliance_export?;
    IconObj icon;
    WorkspaceIdDef id;
    boolean is_assigned?;
    int is_enterprise?;
    boolean is_over_storage_limit?;
    int limit_ts?;
    string locale?;
    int messages_count?;
    int msg_edit_window_mins?;
    string name;
    boolean over_integrations_limit?;
    boolean over_storage_limit?;
    string pay_prod_cur?;
    ""|"std"|"plus"|"compliance"|"enterprise" plan?;
    PrimaryOwnerObj primary_owner?;
    TeamObj_sso_provider sso_provider?;
|};

# Schema for successful response from apps.uninstall method
public type AppsUninstallResponse record {|
    OkTrueDef ok;
|};

public type ExternalOrgMigrationsObj_current record {
    int date_started;
    string team_id;
};

# Schema for successful response from usergroups.create method
public type UsergroupsCreateResponse record {|
    OkTrueDef ok;
    SubteamObj usergroup;
|};

# Represents the Queries record for the operation: chat_scheduledMessages_list
public type Chat_scheduledMessages_listQueries record {
    # For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
    string cursor?;
    # A UNIX timestamp of the oldest value in the time range
    decimal oldest?;
    # The channel of the scheduled messages
    string channel?;
    # Maximum number of original entries to return.
    int 'limit?;
    # A UNIX timestamp of the latest value in the time range
    decimal latest?;
};

# Schema for successful response from pins.remove method
public type PinsRemoveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response of admin.conversations.create
public type AdminConversationsCreateResponse record {|
    ChannelIdDef channel_id?;
    OkTrueDef ok;
|};

public type ResourcesObj record {|
    (ChannelDef|TeamDef)[][] excluded_ids?;
    (ChannelDef|TeamDef)[][] ids;
    boolean wildcard?;
|};

public type MessageObj_icons record {|
    string emoji?;
    string image_64?;
|};

public type admin_conversations_rename_body record {
    # The channel to rename.
    string channel_id;
    string name;
};

# Schema for successful response from files.revokePublicURL method
public type FilesRevokePublicURLResponse record {|
    FileObj file;
    OkTrueDef ok;
|};

public type conversations_leave_body record {
    # Conversation to leave
    string channel?;
};

# Represents the Queries record for the operation: usergroups_users_list
public type Usergroups_users_listQueries record {
    # Allow results that involve disabled User Groups.
    boolean include_disabled?;
    # The encoded ID of the User Group to update.
    string usergroup;
};

# Represents the Queries record for the operation: admin_apps_restricted_list
public type Admin_apps_restricted_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
    string team_id?;
    string enterprise_id?;
};

public type EnterpriseNameDef string;

public type admin_conversations_setTeams_body record {
    # The encoded `channel_id` to add or remove to workspaces.
    string channel_id;
    # True if channel has to be converted to an org channel
    boolean org_channel?;
    # A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    string target_team_ids?;
    # The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    string team_id?;
};

public type chat_postEphemeral_body record {
    # Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
    boolean as_user?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string.
    string attachments?;
    # A JSON-based array of structured blocks, presented as a URL-encoded string.
    string blocks?;
    # Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
    string channel;
    # Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
    string icon_emoji?;
    # URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    string icon_url?;
    # Find and link channel names and usernames.
    boolean link_names?;
    # Change how messages are treated. Defaults to `none`. See [below](#formatting).
    string parse?;
    # How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    string text?;
    # Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.
    string thread_ts?;
    # `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.
    string user;
    # Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    string username?;
};

# Represents the Queries record for the operation: oauth_token
public type Oauth_tokenQueries record {
    # Request the user to add your app only to a single channel.
    boolean single_channel?;
    # The `code` param returned via the OAuth callback.
    string code?;
    # Issued when you created your application.
    string client_secret?;
    # This must match the originally submitted URI (if one was sent).
    string redirect_uri?;
    # Issued when you created your application.
    string client_id?;
};

# Represents the Queries record for the operation: dnd_teamInfo
public type Dnd_teamInfoQueries record {
    # Comma-separated list of users to fetch Do Not Disturb status for
    string users?;
};

public type PagingObj record {|
    int count?;
    int page;
    int pages?;
    int per_page?;
    int spill?;
    int total;
|};

# Represents the Queries record for the operation: stars_list
public type Stars_listQueries record {
    # Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details.
    string cursor?;
    string count?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    int 'limit?;
    string page?;
};

public type conversations_setPurpose_body record {
    # Conversation to set the purpose of
    string channel?;
    # A new, specialer purpose
    string purpose?;
};

public type files_remote_update_body record {
    # Creator defined GUID for the file.
    string external_id?;
    # URL of the remote file.
    string external_url?;
    # Specify a file by providing its ID.
    string file?;
    # type of file
    string filetype?;
    # File containing contents that can be used to improve searchability for the remote file.
    string indexable_file_contents?;
    # Preview of the document via `multipart/form-data`.
    string preview_image?;
    # Title of the file being shared.
    string title?;
    # Authentication token. Requires scope: `remote_files:write`
    string token?;
};

@constraint:String {pattern: re `^[C][A-Z0-9]{2,}$`}
public type ChannelIdDef string;

public type admin_apps_restrict_body record {
    # The id of the app to restrict.
    string app_id?;
    # The id of the request to restrict.
    string request_id?;
    string team_id?;
};

# Schema for successful response of admin.conversations.invite
public type AdminConversationsInviteResponse record {|
    OkTrueDef ok;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

public type conversations_rename_body record {
    # ID of conversation to rename
    string channel?;
    # New name for conversation.
    string name?;
};

# Represents the Queries record for the operation: admin_teams_admins_list
public type Admin_teams_admins_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    string cursor?;
    # The maximum number of items to return.
    int 'limit?;
    string team_id;
};

public type admin_users_remove_body record {
    # The ID (`T1234`) of the workspace.
    string team_id;
    # The ID of the user to remove.
    string user_id;
};

# Schema for successful response from users.setPhoto method
public type UsersSetPhotoResponse record {|
    OkTrueDef ok;
    UsersSetPhotoResponse_profile profile;
|};

public type admin_teams_settings_setDescription_body record {
    # The new description for the workspace.
    string description;
    # ID for the workspace to set the description for.
    string team_id;
};

# Schema for successful response from users.setActive method
public type UsersSetActiveResponse record {|
    OkTrueDef ok;
|};

public type TeamProfileGetResponse_profile record {|
    TeamProfileFieldObj[] fields;
|};

public type AppsPermissionsInfoResponse_info record {
    AppsPermissionsInfoResponse_info_app_home app_home;
    AppsPermissionsInfoResponse_info_app_home channel;
    AppsPermissionsInfoResponse_info_app_home group;
    AppsPermissionsInfoResponse_info_app_home im;
    AppsPermissionsInfoResponse_info_app_home mpim;
    AppsPermissionsInfoResponse_info_team team;
};

# Schema for successful response from conversations.rename method
public type ConversationsRenameResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type calls_participants_remove_body record {
    # `id` returned by the [`calls.add`](/methods/calls.add) method.
    string id;
    # The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    string users;
};

# Schema for successful response from team.info method
public type TeamInfoResponse record {|
    OkTrueDef ok;
    TeamObj team;
|};

# Schema for successful response from team.integrationLogs method
public type TeamIntegrationLogsResponse record {|
    @constraint:Array {minLength: 1}
    TeamIntegrationLogsResponse_logs[] logs;
    OkTrueDef ok;
    PagingObj paging;
|};

# Represents the Queries record for the operation: pins_list
public type Pins_listQueries record {
    # Channel to get pinned items for.
    string channel;
};

# Schema for successful response chat.getPermalink
public type ChatGetPermalinkResponse record {|
    ChannelDef channel;
    OkTrueDef ok;
    string permalink;
|};

public type conversations_create_body record {
    # Create a private channel instead of a public one
    boolean is_private?;
    # Name of the public or private channel to create
    string name?;
};

# Represents the Queries record for the operation: workflows_stepFailed
public type Workflows_stepFailedQueries record {
    # Context identifier that maps to the correct workflow step execution.
    string workflow_step_execute_id;
    # A JSON-based object with a `message` property that should contain a human readable error message.
    string 'error;
};

public type reminders_add_body record {
    # The content of the reminder
    string text;
    # When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday")
    string time;
    # The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
    string user?;
};

# Schema for successful response files.delete method
public type FilesDeleteResponse record {|
    OkTrueDef ok;
|};

public type admin_usergroups_addChannels_body record {
    # Comma separated string of channel IDs.
    string channel_ids;
    # The workspace to add default channels in.
    string team_id?;
    # ID of the IDP group to add default channels for.
    string usergroup_id;
};

# Schema for successful response from chat.scheduledMessages.list method
public type ChatScheduledMessagesListResponse record {|
    OkTrueDef ok;
    AdminConversationsGetTeamsResponse_response_metadata response_metadata;
    ChatScheduledMessagesListResponse_scheduled_messages[] scheduled_messages;
|};

# Schema for successful response of chat.scheduleMessage method
public type ChatScheduleMessageResponse record {|
    ChannelDef channel;
    ChatScheduleMessageResponse_message message;
    OkTrueDef ok;
    int post_at;
    @constraint:String {pattern: re `^[Q][A-Z0-9]{8,}$`}
    string scheduled_message_id;
|};

public type AdminConversationsGetTeamsResponse_response_metadata record {|
    string next_cursor;
|};

public type SubteamObj_prefs record {|
    ChannelIdDef[] channels;
    GroupIdDef[] groups;
|};

# Schema for successful response of admin.conversations.rename
public type AdminConversationsRenameResponse_1 record {|
    OkTrueDef ok;
|};

public type usergroups_users_update_body record {
    # Include the number of users in the User Group.
    boolean include_count?;
    # The encoded ID of the User Group to update.
    string usergroup;
    # A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
    string users;
};

@constraint:String {pattern: re `^[D][A-Z0-9]{8,}$`}
public type DmIdDef string;

public type admin_usergroups_removeChannels_body record {
    # Comma-separated string of channel IDs
    string channel_ids;
    # ID of the IDP Group
    string usergroup_id;
};

public type CommentsObj anydata[];

public type conversations_open_body record {
    # Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.
    string channel?;
    # Boolean, indicates you want the full IM channel definition in the response.
    boolean return_im?;
    # Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.
    string users?;
};

# Represents the Queries record for the operation: team_info
public type Team_infoQueries record {
    # Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels
    string team?;
};

public type UsersSetPhotoResponse_profile record {|
    @constraint:String {pattern: re `^[0-9a-f]{12}$`}
    string avatar_hash;
    string image_1024;
    string image_192;
    string image_24;
    string image_32;
    string image_48;
    string image_512;
    string image_72;
    string image_original;
|};

# Schema for successful response of admin.conversations.setConversationPrefs
public type AdminConversationsSetConversationPrefsResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: oauth_v2_access
public type Oauth_v2_accessQueries record {
    # The `code` param returned via the OAuth callback.
    string code;
    # Issued when you created your application.
    string client_secret?;
    # This must match the originally submitted URI (if one was sent).
    string redirect_uri?;
    # Issued when you created your application.
    string client_id?;
};

public type chat_unfurl_body record {
    # Channel ID of the message
    string channel;
    # Timestamp of the message to add unfurl behavior to.
    string ts;
    # URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
    string unfurls?;
    # Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
    string user_auth_message?;
    # Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain
    boolean user_auth_required?;
    # Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
    string user_auth_url?;
};

# Schema for successful response from files.info method
public type FilesInfoResponse record {|
    CommentsObj comments;
    anydata? content_html?;
    UserIdDef editor?;
    FileObj file;
    OkTrueDef ok;
    PagingObj paging?;
    ResponseMetadataObj response_metadata?;
|};

# Represents the Queries record for the operation: admin_inviteRequests_denied_list
public type Admin_inviteRequests_denied_listQueries record {
    # Value of the `next_cursor` field sent as part of the previous api response
    string cursor?;
    # The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
    int 'limit?;
    # ID for the workspace where the invite requests were made.
    string team_id?;
};

public type AppsPermissionsInfoResponse_info_app_home record {
    ResourcesObj resources?;
    ScopesObj scopes?;
};

# Represents the Queries record for the operation: search_messages
public type Search_messagesQueries record {
    # Pass a value of `true` to enable query highlight markers (see below).
    boolean highlight?;
    # Search query.
    string query;
    # Pass the number of results you want per "page". Maximum of `100`.
    int count?;
    int page?;
    # Return matches sorted by either `score` or `timestamp`.
    string sort?;
    # Change sort direction to ascending (`asc`) or descending (`desc`).
    string sort_dir?;
};

public type ChannelObj record {|
    UserIdDef accepted_user?;
    int created;
    UserIdDef creator;
    ChannelIdDef id;
    boolean is_archived?;
    boolean is_channel;
    boolean is_frozen?;
    boolean is_general?;
    boolean is_member?;
    int is_moved?;
    boolean is_mpim;
    boolean is_non_threadable?;
    boolean is_org_shared;
    boolean is_pending_ext_shared?;
    boolean is_private;
    boolean is_read_only?;
    boolean is_shared;
    boolean is_thread_only?;
    TsDef last_read?;
    (anydata)[] latest?;
    UserIdDef[] members;
    string name;
    string name_normalized;
    int num_members?;
    TeamDef[] pending_shared?;
    ChannelNameDef[] previous_names?;
    decimal priority?;
    ChannelObj_purpose purpose;
    ChannelObj_purpose topic;
    int unlinked?;
    int unread_count?;
    int unread_count_display?;
|};

# Schema for successful response api.permissions.scopes.list method
public type ApiPermissionsScopesListResponse record {
    OkTrueDef ok;
    ApiPermissionsScopesListResponse_scopes scopes;
};

# Represents the Queries record for the operation: admin_inviteRequests_approved_list
public type Admin_inviteRequests_approved_listQueries record {
    # Value of the `next_cursor` field sent as part of the previous API response
    string cursor?;
    # The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    int 'limit?;
    # ID for the workspace where the invite requests were made.
    string team_id?;
};

public type admin_users_setOwner_body record {
    # The ID (`T1234`) of the workspace.
    string team_id;
    # Id of the user to promote to owner.
    string user_id;
};

public type TeamAccessLogsResponse_logins record {|
    int count;
    string? country;
    int date_first;
    int date_last;
    string? ip;
    string? isp;
    string? region;
    string user_agent;
    UserIdDef user_id;
    string username;
|};

# Represents the Queries record for the operation: admin_conversations_search
public type Admin_conversations_searchQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    string cursor?;
    # The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
    string search_channel_types?;
    # Comma separated string of team IDs, signifying the workspaces to search through.
    string team_ids?;
    # Name of the the channel to query by.
    string query?;
    # Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    int 'limit?;
    # Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
    string sort?;
    # Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
    string sort_dir?;
};

# Represents the Queries record for the operation: rtm_connect
public type Rtm_connectQueries record {
    # Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).
    boolean batch_presence_aware?;
    # Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).
    boolean presence_sub?;
};

public type chat_deleteScheduledMessage_body record {
    # Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.
    boolean as_user?;
    # The channel the scheduled_message is posting to
    string channel;
    # `scheduled_message_id` returned from call to chat.scheduleMessage
    string scheduled_message_id;
};

# Represents the Queries record for the operation: admin_apps_approved_list
public type Admin_apps_approved_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
    string team_id?;
    string enterprise_id?;
};

# Schema for successful response of admin.conversations.disconnectShared
public type AdminConversationsRenameResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: users_conversations
public type Users_conversationsQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
    string types?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.
    int 'limit?;
    # Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.
    string user?;
    # Set to `true` to exclude archived channels from the list
    boolean exclude_archived?;
};

public type files_remote_remove_body record {
    # Creator defined GUID for the file.
    string external_id?;
    # Specify a file by providing its ID.
    string file?;
    # Authentication token. Requires scope: `remote_files:write`
    string token?;
};

# Represents the Queries record for the operation: admin_users_list
public type Admin_users_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    string cursor?;
    # Limit for how many users to be retrieved per page
    int 'limit?;
    # The ID (`T1234`) of the workspace.
    string team_id;
};

public type admin_teams_settings_setDefaultChannels_body record {
    # An array of channel IDs.
    string channel_ids;
    # ID for the workspace to set the default channel for.
    string team_id;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

public type calls_end_body record {
    # Call duration in seconds
    int duration?;
    # `id` returned when registering the call using the [`calls.add`](/methods/calls.add) method.
    string id;
};

public type admin_teams_settings_setName_body record {
    # The new name of the workspace.
    string name;
    # ID for the workspace to set the name for.
    string team_id;
};

# Schema for successful response from users.deletePhoto method
public type UsersDeletePhotoResponse record {|
    OkTrueDef ok;
|};

public type ConversationObj (anydata)[];

public type users_setPhoto_body record {
    # Width/height of crop box (always square)
    string crop_w?;
    # X coordinate of top-left corner of crop box
    string crop_x?;
    # Y coordinate of top-left corner of crop box
    string crop_y?;
    # File contents via `multipart/form-data`.
    string image?;
    # Authentication token. Requires scope: `users.profile:write`
    string token;
};

public type AdminConversationsGetConversationPrefsResponse_prefs_can_thread record {
    string[] 'type?;
    string[] user?;
};

public type ChatScheduleMessageResponse_message record {|
    BotIdDef bot_id;
    BotProfileObj bot_profile?;
    TeamDef team;
    string text;
    string 'type;
    UserIdDef user;
    string username?;
|};

# Represents the Queries record for the operation: admin_inviteRequests_list
public type Admin_inviteRequests_listQueries record {
    # Value of the `next_cursor` field sent as part of the previous API response
    string cursor?;
    # The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    int 'limit?;
    # ID for the workspace where the invite requests were made.
    string team_id?;
};

# Represents the Queries record for the operation: team_accessLogs
public type Team_accessLogsQueries record {
    # End of time range of logs to include in results (inclusive).
    string before?;
    string count?;
    string page?;
};

# Schema for successful response from dialog.open method
public type DialogOpenResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: files_list
public type Files_listQueries record {
    # Filter files created after this timestamp (inclusive).
    decimal ts_from?;
    # Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
    boolean show_files_hidden_by_limit?;
    # Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.
    string types?;
    # Filter files created before this timestamp (inclusive).
    decimal ts_to?;
    # Filter files appearing in a specific channel, indicated by its ID.
    string channel?;
    string count?;
    string page?;
    # Filter files created by a single user.
    string user?;
};

# Represents the Queries record for the operation: team_profile_get
public type Team_profile_getQueries record {
    # Filter by visibility.
    string visibility?;
};

# Schema for successful response from users.setPresence method
public type UsersSetPresenceResponse record {|
    OkTrueDef ok;
|};

public type BotsInfoResponse_bot record {|
    AppIdDef app_id;
    boolean deleted;
    BotProfileObj_icons icons;
    BotIdDef id;
    string name;
    int updated;
    UserIdDef user_id?;
|};

# Represents the Queries record for the operation: conversations_history
public type Conversations_historyQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # Include messages with latest or oldest timestamp in results only when either timestamp is specified.
    boolean inclusive?;
    # Start of time range of messages to include in results.
    decimal oldest?;
    # Conversation ID to fetch history for.
    string channel?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
    int 'limit?;
    # End of time range of messages to include in results.
    decimal latest?;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://slack.com/api/oauth.access";
|};

public type conversations_close_body record {
    # Conversation to close.
    string channel?;
};

# Schema for successful response from reactions.remove method
public type ReactionsRemoveResponse record {|
    OkTrueDef ok;
|};

public type admin_apps_approve_body record {
    # The id of the app to approve.
    string app_id?;
    # The id of the request to approve.
    string request_id?;
    string team_id?;
};

public type users_deletePhoto_body record {
    # Authentication token. Requires scope: `users.profile:write`
    string token;
};

# Represents the Queries record for the operation: admin_conversations_getConversationPrefs
public type Admin_conversations_getConversationPrefsQueries record {
    # The channel to get preferences for.
    string channel_id;
};

public type conversations_unarchive_body record {
    # ID of conversation to unarchive
    string channel?;
};

public type reactions_add_body record {
    # Channel where the message to add reaction to was posted.
    string channel;
    # Reaction (emoji) name.
    string name;
    # Timestamp of the message to add reaction to.
    string timestamp;
};

# Schema for successful response from users.profile.get method
public type UsersProfileGetResponse record {|
    OkTrueDef ok;
    UserProfileObj profile;
|};

# This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
public type blocks blocks_inner[];

# Schema for successful response from chat.deleteScheduledMessage method
public type ChatDeleteScheduledMessageResponse record {|
    OkTrueDef ok;
|};

public type ResponseMetadataObj (record {|string next_cursor;|}|record {|string[] messages; ("method_deprecated")[] warnings;|}|record {|string[] messages; string next_cursor; ("method_deprecated")[] warnings;|})[];

public type files_sharedPublicURL_body record {
    # File to share
    string file?;
};

# Schema for successful response from conversations.join method
public type ConversationsJoinResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
    Response\ metadata response_metadata?;
    string warning?;
|};

public type AppsPermissionsResourcesListResponse_resources record {
    string id?;
    string 'type?;
};

# Schema for successful response from stars.list method
public type StarsListResponse record {|
    (record {|ChannelDef channel; int date_create; MessageObj message; "message" 'type;|}|record {|int date_create; FileObj file; "file" 'type;|}|record {|CommentObj comment; int date_create; FileObj file; "file_comment" 'type;|}|record {|ChannelDef channel; int date_create; "channel" 'type;|}|record {|DmIdDef channel; int date_create; "im" 'type;|}|record {|GroupIdDef channel; int date_create; "group" 'type;|})[][] items;
    OkTrueDef ok;
    PagingObj paging?;
|};

# Schema for successful response conversations.members method
public type ConversationsMembersResponse record {|
    @constraint:Array {minLength: 1}
    UserIdDef[] members;
    OkTrueDef ok;
    AdminConversationsGetTeamsResponse_response_metadata response_metadata;
|};

public type admin_users_assign_body record {
    # Comma separated values of channel IDs to add user in the new workspace.
    string channel_ids?;
    # True if user should be added to the workspace as a guest.
    boolean is_restricted?;
    # True if user should be added to the workspace as a single-channel guest.
    boolean is_ultra_restricted?;
    # The ID (`T1234`) of the workspace.
    string team_id;
    # The ID of the user to add to the workspace.
    string user_id;
};

public type ChannelObj_purpose record {|
    TopicPurposeCreatorDef creator;
    int last_set;
    string value;
|};

public type admin_emoji_addAlias_body record {
    # The alias of the emoji.
    string alias_for;
    # The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.
    string name;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

# Represents the Queries record for the operation: apps_permissions_request
public type Apps_permissions_requestQueries record {
    # Token used to trigger the permissions API
    string trigger_id;
    # A comma separated list of scopes to request for
    string scopes;
};

# Schema for successful response from conversations.list method
public type ConversationsListResponse record {|
    ConversationObj[] channels;
    OkTrueDef ok;
    AdminConversationsGetTeamsResponse_response_metadata response_metadata?;
|};

# Represents the Queries record for the operation: users_getPresence
public type Users_getPresenceQueries record {
    # User to get presence info on. Defaults to the authed user.
    string user?;
};

public type TeamIntegrationLogsResponse_logs record {|
    AppIdDef admin_app_id?;
    AppIdDef app_id;
    string app_type;
    string change_type;
    ChannelDef channel?;
    string date;
    string scope;
    string service_id?;
    string service_type?;
    UserIdDef user_id;
    string user_name;
|};

# Represents the Queries record for the operation: team_billableInfo
public type Team_billableInfoQueries record {
    # A user to retrieve the billable information for. Defaults to all users.
    string user?;
};

# Schema for successful response from team.accessLogs method
public type TeamAccessLogsResponse record {|
    @constraint:Array {minLength: 1}
    TeamAccessLogsResponse_logins[] logins;
    OkTrueDef ok;
    PagingObj paging;
|};

public type UserProfileShortObj record {|
    string avatar_hash;
    string display_name;
    string display_name_normalized?;
    string? first_name;
    string image_72;
    boolean is_restricted;
    boolean is_ultra_restricted;
    string name;
    string real_name;
    string real_name_normalized?;
    WorkspaceIdDef team;
|};

public type ExternalOrgMigrationsObj record {
    ExternalOrgMigrationsObj_current[] current;
    int date_updated;
};

# Schema for successful response from apps.permissions.request method
public type AppsPermissionsRequestResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: reactions_list
public type Reactions_listQueries record {
    # Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details.
    string cursor?;
    int count?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    int 'limit?;
    int page?;
    # Show reactions made by this user. Defaults to the authed user.
    string user?;
    # If true always return the complete reaction list.
    boolean full?;
};

public type chat_postMessage_body record {
    # Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
    string as_user?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string.
    string attachments?;
    # A JSON-based array of structured blocks, presented as a URL-encoded string.
    string blocks?;
    # Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    string channel;
    # Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
    string icon_emoji?;
    # URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    string icon_url?;
    # Find and link channel names and usernames.
    boolean link_names?;
    # Disable Slack markup parsing by setting to `false`. Enabled by default.
    boolean mrkdwn?;
    # Change how messages are treated. Defaults to `none`. See [below](#formatting).
    string parse?;
    # Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
    boolean reply_broadcast?;
    # How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    string text?;
    # Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
    string thread_ts?;
    # Pass true to enable unfurling of primarily text-based content.
    boolean unfurl_links?;
    # Pass false to disable unfurling of media content.
    boolean unfurl_media?;
    # Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    string username?;
};

public type admin_emoji_remove_body record {
    # The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    string name;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

public type ReminderObj record {|
    int complete_ts?;
    UserIdDef creator;
    ReminderIdDef id;
    boolean recurring;
    string text;
    int time?;
    UserIdDef user;
|};

# Represents the Queries record for the operation: views_push
public type Views_pushQueries record {
    # A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    string view;
    # Exchange a trigger to post to the user.
    string trigger_id;
};

# Schema for successful response from reminders.delete method
public type RemindersDeleteResponse record {|
    OkTrueDef ok;
|};

public type admin_users_setExpiration_body record {
    # Timestamp when guest account should be disabled.
    int expiration_ts;
    # The ID (`T1234`) of the workspace.
    string team_id;
    # The ID of the user to set an expiration for.
    string user_id;
};

@constraint:String {pattern: re `^[F][A-Z0-9]{8,}$`}
public type FileIdDef string;

public type conversations_setTopic_body record {
    # Conversation to set the topic of
    string channel?;
    # The new topic string. Does not support formatting or linkification.
    string topic?;
};

public type UserObjItemsnull anydata;

public type OkTrueDef true;

# Represents the Queries record for the operation: apps_permissions_users_request
public type Apps_permissions_users_requestQueries record {
    # Token used to trigger the request
    string trigger_id;
    # A comma separated list of user scopes to request for
    string scopes;
    # The user this scope is being requested for
    string user;
};

public type files_remote_add_body record {
    # Creator defined GUID for the file.
    string external_id?;
    # URL of the remote file.
    string external_url?;
    # type of file
    string filetype?;
    # A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
    string indexable_file_contents?;
    # Preview of the document via `multipart/form-data`.
    string preview_image?;
    # Title of the file being shared.
    string title?;
    # Authentication token. Requires scope: `remote_files:write`
    string token?;
};

# Schema for successful response from conversations.unarchive method
public type ConversationsUnarchiveResponse record {|
    OkTrueDef ok;
|};

public type admin_teams_settings_setIcon_body record {
    # Image URL for the icon
    string image_url;
    # ID for the workspace to set the icon for.
    string team_id;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

public type EnterpriseUserObj record {|
    EnterpriseIdDef enterprise_id;
    EnterpriseNameDef enterprise_name;
    EnterpriseUserIdDef id;
    boolean is_admin;
    boolean is_owner;
    TeamDef[] teams;
|};

# Schema for successful response of admin.conversations.convertToPrivate
public type AdminConversationsConvertToPrivateResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from chat.meMessage method
public type ChatMeMessageResponse record {|
    ChannelDef channel?;
    OkTrueDef ok;
    TsDef ts?;
|};

# Schema for successful response of admin.conversations.search
public type AdminConversationsSearchResponse record {|
    ChannelObj[] channels;
    string next_cursor;
|};

public type chat_meMessage_body record {
    # Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
    string channel?;
    # Text of the message to send.
    string text?;
};

public type BotProfileObj record {|
    AppIdDef app_id;
    boolean deleted;
    BotProfileObj_icons icons;
    BotIdDef id;
    string name;
    TeamDef team_id;
    int updated;
|};

# Schema for successful response from chat.unfurl method
public type ChatUnfurlResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from reminders.info method
public type RemindersInfoResponse record {|
    OkTrueDef ok;
    ReminderObj reminder;
|};

public type PrimaryOwnerObj record {
    string email;
    string id;
};

public type calls_add_body record {
    # The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.
    string created_by?;
    # Call start time in UTC UNIX timestamp format
    int date_start?;
    # When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    string desktop_app_join_url?;
    # An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
    string external_display_id?;
    # An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
    string external_unique_id;
    # The URL required for a client to join the Call.
    string join_url;
    # The name of the Call.
    string title?;
    # The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    string users?;
};

@constraint:String {pattern: re `^[T][A-Z0-9]{2,}$`}
public type TeamDef string;

# Schema for successful response of admin.conversations.delete
public type AdminConversationsDeleteResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from reactions.add method
public type ReactionsAddResponse record {|
    OkTrueDef ok;
|};

public type BotProfileObj_icons record {|
    string image_36;
    string image_48;
    string image_72;
|};

public type blocks_inner record {
    string 'type;
};

# Schema for successful response from pins.add method
public type PinsAddResponse record {|
    OkTrueDef ok;
|};

public type MessageObj_attachments record {|
    string fallback?;
    int id;
    int image_bytes?;
    int image_height?;
    string image_url?;
    int image_width?;
|};

# Schema for successful response from users.list method
public type UsersListResponse record {|
    int cache_ts;
    @constraint:Array {minLength: 1}
    UserObj[] members;
    OkTrueDef ok;
    ResponseMetadataObj response_metadata?;
|};

# Represents the Queries record for the operation: chat_getPermalink
public type Chat_getPermalinkQueries record {
    # The ID of the conversation or channel containing the message
    string channel;
    # A message's `ts` value, uniquely identifying it within a channel
    string message_ts;
};

public type reminders_delete_body record {
    # The ID of the reminder
    string reminder?;
};

public type admin_teams_create_body record {
    # Description for the team.
    string team_description?;
    # Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.
    string team_discoverability?;
    # Team domain (for example, slacksoftballteam).
    string team_domain;
    # Team name (for example, Slack Softball Team).
    string team_name;
};

# Represents the Queries record for the operation: conversations_info
public type Conversations_infoQueries record {
    # Set to `true` to include the member count for the specified conversation. Defaults to `false`
    boolean include_num_members?;
    # Conversation ID to learn more about
    string channel?;
    # Set this to `true` to receive the locale for this conversation. Defaults to `false`
    boolean include_locale?;
};

# Schema for successful response from conversations.replies method
public type ConversationsRepliesResponse record {|
    boolean has_more?;
    (record {|TsDef last_read?; TsDef latest_reply?; int reply_count; UserIdDef[] reply_users?; int reply_users_count?; TeamDef source_team?; boolean subscribed; TeamDef team?; string text; TsDef thread_ts; TsDef ts; string 'type; int unread_count?; UserIdDef user; UserProfileShortObj user_profile?; TeamDef user_team?;|}|record {|boolean is_starred?; UserIdDef parent_user_id; TeamDef source_team?; TeamDef team?; string text; TsDef thread_ts; TsDef ts; string 'type; UserIdDef user; UserProfileShortObj user_profile?; TeamDef user_team?;|})[][] messages;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: migration_exchange
public type Migration_exchangeQueries record {
    # Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`.
    boolean to_old?;
    # Specify team_id starts with `T` in case of Org Token
    string team_id?;
    # A comma-separated list of user ids, up to 400 per request
    string users;
};

public type ScopesObj string[];

public type reactions_remove_body record {
    # Channel where the message to remove reaction from was posted.
    string channel?;
    # File to remove reaction from.
    string file?;
    # File comment to remove reaction from.
    string file_comment?;
    # Reaction (emoji) name.
    string name;
    # Timestamp of the message to remove reaction from.
    string timestamp?;
};

# Schema for successful response from reminders.complete method
public type RemindersCompleteResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: bots_info
public type Bots_infoQueries record {
    # Bot user to get info on
    string bot?;
};

# Represents the Queries record for the operation: apps_permissions_resources_list
public type Apps_permissions_resources_listQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # The maximum number of items to return.
    int 'limit?;
};

public type admin_conversations_archive_body record {
    # The channel to archive.
    string channel_id;
};

public type conversations_invite_body record {
    # The ID of the public or private channel to invite user(s) to.
    string channel?;
    # A comma separated list of user IDs. Up to 1000 users may be listed.
    string users?;
};

@constraint:String {pattern: re `^A[A-Z0-9]{1,}$`}
public type AppIdDef string;

# Schema for successful response conversations.create method
public type ConversationsCreateResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type RtmConnectResponse_self record {|
    UserIdDef id;
    string name;
|};

# Represents the Queries record for the operation: workflows_updateStep
public type Workflows_updateStepQueries record {
    # An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
    string outputs?;
    # A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
    string inputs?;
    # An optional field that can be used to override the step name that is shown in the Workflow Builder.
    string step_name?;
    # An optional field that can be used to override app image that is shown in the Workflow Builder.
    string step_image_url?;
    # A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.
    string workflow_step_edit_id;
};

public type ChannelNameDef string;

# Represents the Queries record for the operation: auth_revoke
public type Auth_revokeQueries record {
    # Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked.
    boolean test?;
};

# Represents the Queries record for the operation: files_info
public type Files_infoQueries record {
    # Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See [pagination](/docs/pagination) for more details.
    string cursor?;
    # Specify a file by providing its ID.
    string file?;
    string count?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    int 'limit?;
    string page?;
};

public type admin_conversations_create_body record {
    # Description of the public or private channel to create.
    string description?;
    # When `true`, creates a private channel instead of a public channel
    boolean is_private;
    # Name of the public or private channel to create.
    string name;
    # When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
    boolean org_wide?;
    # The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
    string team_id?;
};

# Schema for successful response conversations.info
public type ConversationsInfoResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type chat_update_body record {
    # Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
    string as_user?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.
    string attachments?;
    # A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.
    string blocks?;
    # Channel containing the message to be updated.
    string channel;
    # Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.
    string link_names?;
    # Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.
    string parse?;
    # New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.
    string text?;
    # Timestamp of the message to be updated.
    string ts;
};

# Schema for successful response from bots.info method
public type BotsInfoResponse record {|
    BotsInfoResponse_bot bot;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: reactions_get
public type Reactions_getQueries record {
    # File to get reactions for.
    string file?;
    # Channel where the message to get reactions for was posted.
    string channel?;
    # File comment to get reactions for.
    string file_comment?;
    # If true always return the complete reaction list.
    boolean full?;
    # Timestamp of the message to get reactions for.
    string timestamp?;
};

# Schema for successful response from usergroups.users.update method
public type UsergroupsUsersUpdateResponse record {|
    OkTrueDef ok;
    SubteamObj usergroup;
|};

# Schema for successful response from dnd.setSnooze method
public type DndSetSnoozeResponse record {|
    OkTrueDef ok;
    boolean snooze_enabled;
    int snooze_endtime;
    int snooze_remaining;
|};

public type UserProfileObj record {|
    boolean always_active?;
    OptionalAppIdDef api_app_id?;
    string avatar_hash;
    BotIdDef bot_id?;
    string display_name;
    string display_name_normalized;
    string? email?;
    record {}[]? fields;
    string? first_name?;
    int? guest_expiration_ts?;
    string? guest_invited_by?;
    string? image_1024?;
    string? image_192?;
    string? image_24?;
    string? image_32?;
    string? image_48?;
    string? image_512?;
    string? image_72?;
    string? image_original?;
    boolean is_app_user?;
    boolean is_custom_image?;
    boolean? is_restricted?;
    boolean? is_ultra_restricted?;
    string last_avatar_image_hash?;
    string? last_name?;
    int memberships_count?;
    string? name?;
    string phone;
    string pronouns?;
    string real_name;
    string real_name_normalized;
    string skype;
    string status_default_emoji?;
    string status_default_text?;
    string? status_default_text_canonical?;
    string status_emoji;
    int status_expiration?;
    string status_text;
    string? status_text_canonical?;
    WorkspaceIdDef team?;
    string title;
    int updated?;
    string user_id?;
    string? username?;
|};

public type pins_remove_body record {
    # Channel where the item is pinned to.
    string channel;
    # Timestamp of the message to un-pin.
    string timestamp?;
};

public type admin_emoji_rename_body record {
    # The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    string name;
    # The new name of the emoji.
    string new_name;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
};

@constraint:String {pattern: re `^[WU][A-Z0-9]{8,}$`}
public type EnterpriseUserIdDef string;

public type conversations_mark_body record {
    # Channel or conversation to set the read cursor for.
    string channel?;
    # Unique identifier of message you want marked as most recently seen in this conversation.
    decimal ts?;
};

# Represents the Queries record for the operation: calls_info
public type Calls_infoQueries record {
    # `id` of the Call returned by the [`calls.add`](/methods/calls.add) method.
    string id;
};

# Represents the Queries record for the operation: oauth_access
public type Oauth_accessQueries record {
    # Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).
    boolean single_channel?;
    # The `code` param returned via the OAuth callback.
    string code?;
    # Issued when you created your application.
    string client_secret?;
    # This must match the originally submitted URI (if one was sent).
    string redirect_uri?;
    # Issued when you created your application.
    string client_id?;
};

# Schema for successful response conversations.close method
public type ConversationsCloseResponse record {|
    boolean already_closed?;
    boolean no_op?;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: apps_uninstall
public type Apps_uninstallQueries record {
    # Issued when you created your application.
    string client_secret?;
    # Issued when you created your application.
    string client_id?;
};

# Represents the Queries record for the operation: admin_conversations_getTeams
public type Admin_conversations_getTeamsQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
    # The channel to determine connected workspaces within the organization for.
    string channel_id;
};

# Schema for successful response from reactions.list method
public type ReactionsListResponse record {|
    (record {|ChannelDef channel; MessageObj message; "message" 'type;|}|record {|FileObj file; "file" 'type;|}|record {|CommentObj comment; FileObj file; "file_comment" 'type;|})[][] items;
    OkTrueDef ok;
    PagingObj paging?;
    ResponseMetadataObj response_metadata?;
|};

public type chat_scheduleMessage_body record {
    # Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
    boolean as_user?;
    # A JSON-based array of structured attachments, presented as a URL-encoded string.
    string attachments?;
    # A JSON-based array of structured blocks, presented as a URL-encoded string.
    string blocks?;
    # Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    string channel?;
    # Find and link channel names and usernames.
    boolean link_names?;
    # Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).
    string parse?;
    # Unix EPOCH timestamp of time in future to send the message.
    string post_at?;
    # Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
    boolean reply_broadcast?;
    # How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    string text?;
    # Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
    decimal thread_ts?;
    # Pass true to enable unfurling of primarily text-based content.
    boolean unfurl_links?;
    # Pass false to disable unfurling of media content.
    boolean unfurl_media?;
};

# Represents the Queries record for the operation: reminders_info
public type Reminders_infoQueries record {
    # The ID of the reminder
    string reminder?;
};

# Represents the Queries record for the operation: conversations_list
public type Conversations_listQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
    string types?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.
    int 'limit?;
    # Set to `true` to exclude archived channels from the list
    boolean exclude_archived?;
};

public type admin_conversations_invite_body record {
    # The channel that the users will be invited to.
    string channel_id;
    # The users to invite.
    string user_ids;
};

public type admin_conversations_restrictAccess_removeGroup_body record {
    # The channel to remove the linked group from.
    string channel_id;
    # The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
    string group_id;
    # The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    string team_id;
    # Authentication token. Requires scope: `admin.conversations:write`
    string token;
};

public type Response\ metadata record {
    string[] warnings?;
};

public type IconObj record {
    string image_102?;
    string image_132?;
    string image_230?;
    string image_34?;
    string image_44?;
    string image_68?;
    string image_88?;
    boolean image_default?;
};

public type admin_users_session_invalidate_body record {
    int session_id;
    # ID of the team that the session belongs to
    string team_id;
};

# Schema for successful response of admin.conversations.getConversationPrefs
public type AdminConversationsGetConversationPrefsResponse record {|
    OkTrueDef ok;
    AdminConversationsGetConversationPrefsResponse_prefs prefs?;
|};

# Schema for successful response files.comments.delete method
public type FilesCommentsDeleteResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from dnd.endSnooze method
public type DndEndSnoozeResponse record {|
    boolean dnd_enabled;
    int next_dnd_end_ts;
    int next_dnd_start_ts;
    OkTrueDef ok;
    boolean snooze_enabled;
|};

public type Message\ object record {
    record {}[] attachments?;
    record {} blocks?;
    string text;
};

public type usergroups_update_body record {
    # A comma separated string of encoded channel IDs for which the User Group uses as a default.
    string channels?;
    # A short description of the User Group.
    string description?;
    # A mention handle. Must be unique among channels, users and User Groups.
    string 'handle?;
    # Include the number of users in the User Group.
    boolean include_count?;
    # A name for the User Group. Must be unique among User Groups.
    string name?;
    # The encoded ID of the User Group to update.
    string usergroup;
};

public type admin_conversations_setConversationPrefs_body record {
    # The channel to set the prefs for
    string channel_id;
    # The prefs for this channel in a stringified JSON format.
    string prefs;
};

# Schema for successful response of chat.postMessage method
public type ChatPostMessageResponse record {|
    ChannelDef channel;
    MessageObj message;
    OkTrueDef ok;
    TsDef ts;
|};

public type UserObj (anydata)[];

# Schema for successful response of chat.update method
public type ChatUpdateResponse record {|
    string channel;
    Message\ object message;
    OkTrueDef ok;
    string text;
    string ts;
|};

@constraint:String {pattern: re `^B[A-Z0-9]{8,}$`}
public type BotIdDef string;

# Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`
public type UsersConversationsResponse record {
    ConversationObj[] channels;
    OkTrueDef ok;
    AdminConversationsGetTeamsResponse_response_metadata response_metadata?;
};

# Represents the Queries record for the operation: views_update
public type Views_updateQueries record {
    # A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
    string view?;
    # A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.
    string view_id?;
    # A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.
    string external_id?;
    # A string that represents view state to protect against possible race conditions.
    string hash?;
};

# Schema for successful response from conversations.open method when opening channels, ims, mpims
public type ConversationsOpenResponse record {|
    boolean already_open?;
    (ConversationObj|record {|string created?; DmIdDef id; boolean is_im?; boolean is_open?; TsDef last_read?; MessageObj latest?; decimal unread_count?; decimal unread_count_display?; UserIdDef user?;|})[] channel;
    boolean no_op?;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: users_info
public type Users_infoQueries record {
    # Set this to `true` to receive the locale for this user. Defaults to `false`
    boolean include_locale?;
    # User to get info on
    string user?;
};

# Schema for successful response from conversations.invite method
public type ConversationsInviteErrorResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

public type AppsPermissionsInfoResponse_info_team record {
    ResourcesObj resources;
    ScopesObj scopes;
};

# Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65
public type APIMethodUsersGetPresence record {
    boolean auto_away?;
    int connection_count?;
    int last_activity?;
    boolean manual_away?;
    OkTrueDef ok;
    boolean online?;
    string presence;
};

public type files_upload_body record {
    # Comma-separated list of channel names or IDs where the file will be shared.
    string channels?;
    # File contents via a POST variable. If omitting this parameter, you must provide a `file`.
    string content?;
    # File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.
    string file?;
    # Filename of file.
    string filename?;
    # A [file type](/types/file#file_types) identifier.
    string filetype?;
    # The message text introducing the file in specified `channels`.
    string initial_comment?;
    # Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.
    decimal thread_ts?;
    # Title of file.
    string title?;
    # Authentication token. Requires scope: `files:write:user`
    string token?;
};

public type files_delete_body record {
    # ID of file to delete.
    string file?;
};

@constraint:String {pattern: re `^[CGD][A-Z0-9]{8,}$`}
public type ChannelDef string;

public type PinnedInfoDef record {|
|};

public type MessageObj record {|
    @constraint:Array {minLength: 1}
    MessageObj_attachments[] attachments?;
    blocks blocks?;
    (anydata)[] bot_id?;
    BotProfileObj bot_profile?;
    string client_msg_id?;
    CommentObj comment?;
    boolean display_as_bot?;
    FileObj file?;
    @constraint:Array {minLength: 1}
    FileObj[] files?;
    MessageObj_icons icons?;
    UserIdDef inviter?;
    boolean is_delayed_message?;
    boolean is_intro?;
    boolean is_starred?;
    TsDef last_read?;
    TsDef latest_reply?;
    string name?;
    string old_name?;
    UserIdDef parent_user_id?;
    string permalink?;
    ChannelDef[] pinned_to?;
    string purpose?;
    ReactionObj[] reactions?;
    int reply_count?;
    @constraint:Array {minLength: 1}
    UserIdDef[] reply_users?;
    int reply_users_count?;
    WorkspaceIdDef source_team?;
    boolean subscribed?;
    string subtype?;
    WorkspaceIdDef team?;
    string text;
    TsDef thread_ts?;
    string topic?;
    TsDef ts;
    string 'type;
    int unread_count?;
    boolean upload?;
    UserIdDef user?;
    UserProfileShortObj user_profile?;
    WorkspaceIdDef user_team?;
    string username?;
|};

@constraint:String {pattern: re `^(A[A-Z0-9]{1,})?$`}
public type OptionalAppIdDef string;

# Schema for successful response from users.info method
public type UsersInfoResponse record {
    OkTrueDef ok;
    UserObj user;
};

# Schema for successful response api.test method
public type ApiTestResponse record {|
    OkTrueDef ok;
    record {}...;
|};

public type users_profile_set_body record {
    # Name of a single key to set. Usable only if `profile` is not passed.
    string name?;
    # Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
    string profile?;
    # ID of user to change. This argument may only be specified by team admins on paid teams.
    string user?;
    # Value to set a single key to. Usable only if `profile` is not passed.
    string value?;
};

# Schema for successful response from migration.exchange method
public type MigrationExchangeResponse record {
    string enterprise_id;
    string[] invalid_user_ids?;
    OkTrueDef ok;
    TeamDef team_id;
    record {} user_id_map?;
};

# Represents the Queries record for the operation: api_test
public type Api_testQueries record {
    # example property to return
    string foo?;
};

public type admin_conversations_restrictAccess_addGroup_body record {
    # The channel to link this group to.
    string channel_id;
    # The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
    string group_id;
    # The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    string team_id?;
    # Authentication token. Requires scope: `admin.conversations:write`
    string token;
};

# Schema for successful response from stars.remove method
public type StarsRemoveResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from usergroups.disable method
public type UsergroupsDisableResponse record {|
    OkTrueDef ok;
    SubteamObj usergroup;
|};

# Schema for successful response from usergroups.list method
public type UsergroupsListResponse record {|
    OkTrueDef ok;
    SubteamObj[] usergroups;
|};

# Schema for successful response from conversations.history method
public type ConversationsHistoryResponse record {|
    int channel_actions_count;
    (anydata)[] channel_actions_ts;
    boolean has_more;
    @constraint:Array {minLength: 1}
    MessageObj[] messages;
    OkTrueDef ok;
    int pin_count;
|};

# Represents the Queries record for the operation: admin_teams_settings_info
public type Admin_teams_settings_infoQueries record {
    string team_id;
};

# Schema for successful response from dnd.endDnd method
public type DndEndDndResponse record {|
    OkTrueDef ok;
|};

# Schema for successful response from conversations.leave method
public type ConversationsLeaveResponse record {|
    true not_in_channel?;
    OkTrueDef ok;
|};

public type chat_delete_body record {
    # Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.
    boolean as_user?;
    # Channel containing the message to be deleted.
    string channel?;
    # Timestamp of the message to be deleted.
    decimal ts?;
};

# Schema for successful response from files.list method
public type FilesListResponse record {|
    FileObj[] files;
    OkTrueDef ok;
    PagingObj paging;
|};

public type ChatScheduledMessagesListResponse_scheduled_messages record {|
    ChannelIdDef channel_id;
    int date_created;
    @constraint:String {pattern: re `^[Q][A-Z0-9]{8,}$`}
    string id;
    int post_at;
    string text?;
|};

# Schema for successful response from rtm.connect method
public type RtmConnectResponse record {|
    OkTrueDef ok;
    RtmConnectResponse_self self;
    RtmConnectResponse_team team;
    string url;
|};

# This method either only returns a brief _OK_ response or a verbose schema is not available for this method.
public type DefaultSuccessResponse record {
    OkTrueDef ok;
};

# Represents the Queries record for the operation: users_list
public type Users_listQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.
    int 'limit?;
    # Set this to `true` to receive the locale for users. Defaults to `false`
    boolean include_locale?;
};

# Schema for successful response from reminders.list method
public type RemindersListResponse record {|
    OkTrueDef ok;
    ReminderObj[] reminders;
|};

# Represents the Queries record for the operation: admin_teams_owners_list
public type Admin_teams_owners_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
    string team_id;
};

public type admin_conversations_convertToPrivate_body record {
    # The channel to convert to private.
    string channel_id;
};

@constraint:String {pattern: re `^[TE][A-Z0-9]{8,}$`}
public type WorkspaceIdDef string;

public type admin_users_session_reset_body record {
    # Only expire mobile sessions (default: false)
    boolean mobile_only?;
    # The ID of the user to wipe sessions for
    string user_id;
    # Only expire web sessions (default: false)
    boolean web_only?;
};

# Represents the Queries record for the operation: users_lookupByEmail
public type Users_lookupByEmailQueries record {
    # An email address belonging to a user in the workspace
    string email;
};

# Schema for successful response from apps.permissions.info method
public type AppsPermissionsInfoResponse record {|
    AppsPermissionsInfoResponse_info info;
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: admin_conversations_ekm_listOriginalConnectedChannelInfo
public type Admin_conversations_ekm_listOriginalConnectedChannelInfoQueries record {
    # A comma-separated list of channels to filter to.
    string channel_ids?;
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    string cursor?;
    # A comma-separated list of the workspaces to which the channels you would like returned belong.
    string team_ids?;
    # The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    int 'limit?;
};

@constraint:String {pattern: re `^[UW][A-Z0-9]{2,}$`}
public type UserIdDef string;

@constraint:String {pattern: re `^[G][A-Z0-9]{8,}$`}
public type GroupIdDef string;

public type admin_emoji_add_body record {
    # The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    string name;
    # Authentication token. Requires scope: `admin.teams:write`
    string token;
    # The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
    string url;
};

# Schema for successful response from reminders.add method
public type RemindersAddResponse record {|
    OkTrueDef ok;
    ReminderObj reminder;
|};

# Represents the Queries record for the operation: views_publish
public type Views_publishQueries record {
    # A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    string view;
    # `id` of the user you want publish a view to.
    string user_id;
    # A string that represents view state to protect against possible race conditions.
    string hash?;
};

# Schema for successful response of admin.conversations.getTeams
public type AdminConversationsGetTeamsResponse record {|
    OkTrueDef ok;
    AdminConversationsGetTeamsResponse_response_metadata response_metadata?;
    TeamDef[] team_ids;
|};

# Represents the Queries record for the operation: admin_usergroups_listChannels
public type Admin_usergroups_listChannelsQueries record {
    # Flag to include or exclude the count of members per channel.
    boolean include_num_members?;
    # ID of the IDP group to list default channels for.
    string usergroup_id;
    # ID of the the workspace.
    string team_id?;
};

public type ApiPermissionsScopesListResponse_scopes record {
    ScopesObj app_home?;
    ScopesObj channel?;
    ScopesObj group?;
    ScopesObj im?;
    ScopesObj mpim?;
    ScopesObj team?;
    ScopesObj user?;
};

public type admin_conversations_delete_body record {
    # The channel to delete.
    string channel_id;
};

public type ReactionObj record {
    int count;
    string name;
    UserIdDef[] users;
};

public type admin_conversations_unarchive_body record {
    # The channel to unarchive.
    string channel_id;
};

public type admin_users_setAdmin_body record {
    # The ID (`T1234`) of the workspace.
    string team_id;
    # The ID of the user to designate as an admin.
    string user_id;
};

# Schema for successful response from team.profile.get method
public type TeamProfileGetResponse record {|
    OkTrueDef ok;
    TeamProfileGetResponse_profile profile;
|};

# Schema for successful response apps.permissions.resources.list method
public type AppsPermissionsResourcesListResponse record {
    OkTrueDef ok;
    AppsPermissionsResourcesListResponse_resources[] resources;
    AppsPermissionsResourcesListResponse_response_metadata response_metadata?;
};

public type files_revokePublicURL_body record {
    # File to revoke
    string file?;
};

# Represents the Queries record for the operation: team_integrationLogs
public type Team_integrationLogsQueries record {
    # Filter logs to this service. Defaults to all logs.
    string service_id?;
    string count?;
    # Filter logs with this change type. Defaults to all logs.
    string change_type?;
    string page?;
    # Filter logs to this Slack app. Defaults to all logs.
    string app_id?;
    # Filter logs generated by this user’s actions. Defaults to all logs.
    string user?;
};

@constraint:String {pattern: re `^S[A-Z0-9]{2,}$`}
public type SubteamIdDef string;

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type ConversationObjItemsnull anydata;

# Represents the Queries record for the operation: views_open
public type Views_openQueries record {
    # A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    string view;
    # Exchange a trigger to post to the user.
    string trigger_id;
};

public type usergroups_create_body record {
    # A comma separated string of encoded channel IDs for which the User Group uses as a default.
    string channels?;
    # A short description of the User Group.
    string description?;
    # A mention handle. Must be unique among channels, users and User Groups.
    string 'handle?;
    # Include the number of users in each User Group.
    boolean include_count?;
    # A name for the User Group. Must be unique among User Groups.
    string name;
};

public type dnd_setSnooze_body record {
    # Number of minutes, from now, to snooze until.
    string num_minutes;
    # Authentication token. Requires scope: `dnd:write`
    string token;
};

# Schema for successful response conversations.mark method
public type ConversationsMarkResponse record {|
    OkTrueDef ok;
|};

public type admin_users_invite_body record {
    # A comma-separated list of `channel_id`s for this user to join. At least one channel is required.
    string channel_ids;
    # An optional message to send to the user in the invite email.
    string custom_message?;
    # The email address of the person to invite.
    string email;
    # Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    string guest_expiration_ts?;
    # Is this user a multi-channel guest user? (default: false)
    boolean is_restricted?;
    # Is this user a single channel guest user? (default: false)
    boolean is_ultra_restricted?;
    # Full name of the user.
    string real_name?;
    # Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    boolean resend?;
    # The ID (`T1234`) of the workspace.
    string team_id;
};

# Represents the Queries record for the operation: apps_event_authorizations_list
public type Apps_event_authorizations_listQueries record {
    string cursor?;
    int 'limit?;
    string event_context;
};

public type users_setPresence_body record {
    # Either `auto` or `away`
    string presence;
};

# Schema for successful response from stars.add method
public type StarsAddResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: users_profile_get
public type Users_profile_getQueries record {
    # Include labels for each ID in custom profile fields
    boolean include_labels?;
    # User to retrieve profile info for
    string user?;
};

# Schema for successful response conversations.kick method
public type ConversationsKickResponse record {|
    OkTrueDef ok;
|};

# Represents the Queries record for the operation: conversations_replies
public type Conversations_repliesQueries record {
    # Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
    string cursor?;
    # Include messages with latest or oldest timestamp in results only when either timestamp is specified.
    boolean inclusive?;
    # Start of time range of messages to include in results.
    decimal oldest?;
    # Conversation ID to fetch thread from.
    string channel?;
    # The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
    int 'limit?;
    # Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.
    decimal ts?;
    # End of time range of messages to include in results.
    decimal latest?;
};

public type usergroups_enable_body record {
    # Include the number of users in the User Group.
    boolean include_count?;
    # The encoded ID of the User Group to enable.
    string usergroup;
};

public type AdminConversationsGetConversationPrefsResponse_prefs record {
    AdminConversationsGetConversationPrefsResponse_prefs_can_thread can_thread?;
    AdminConversationsGetConversationPrefsResponse_prefs_can_thread who_can_post?;
};

public type FileObj record {|
    ChannelIdDef[] channels?;
    int comments_count?;
    int created?;
    int date_delete?;
    boolean display_as_bot?;
    boolean editable?;
    UserIdDef editor?;
    string external_id?;
    string external_type?;
    string external_url?;
    string filetype?;
    GroupIdDef[] groups?;
    boolean has_rich_preview?;
    FileIdDef id?;
    int image_exif_rotation?;
    DmIdDef[] ims?;
    boolean is_external?;
    boolean is_public?;
    boolean is_starred?;
    boolean is_tombstoned?;
    UserIdDef last_editor?;
    string mimetype?;
    string mode?;
    string name?;
    boolean non_owner_editable?;
    int num_stars?;
    int original_h?;
    int original_w?;
    string permalink?;
    string permalink_public?;
    PinnedInfoDef pinned_info?;
    ChannelDef[] pinned_to?;
    string pretty_type?;
    string preview?;
    boolean public_url_shared?;
    ReactionObj[] reactions?;
    FileObj_shares shares?;
    int size?;
    TeamDef source_team?;
    string state?;
    string thumb_1024?;
    int thumb_1024_h?;
    int thumb_1024_w?;
    string thumb_160?;
    string thumb_360?;
    int thumb_360_h?;
    int thumb_360_w?;
    string thumb_480?;
    int thumb_480_h?;
    int thumb_480_w?;
    string thumb_64?;
    string thumb_720?;
    int thumb_720_h?;
    int thumb_720_w?;
    string thumb_80?;
    string thumb_800?;
    int thumb_800_h?;
    int thumb_800_w?;
    string thumb_960?;
    int thumb_960_h?;
    int thumb_960_w?;
    string thumb_tiny?;
    int timestamp?;
    string title?;
    int updated?;
    string url_private?;
    string url_private_download?;
    string user?;
    TeamDef user_team?;
    string username?;
|};

# Schema for successful response from conversations.setTopic method
public type ConversationsSetTopicResponse record {|
    ConversationObj channel;
    OkTrueDef ok;
|};

# Schema for successful response auth.test method
public type AuthTestResponse record {|
    BotIdDef bot_id?;
    boolean is_enterprise_install?;
    OkTrueDef ok;
    string team;
    TeamDef team_id;
    string url;
    string user;
    UserIdDef user_id;
|};

# Represents the Queries record for the operation: admin_teams_list
public type Admin_teams_listQueries record {
    # Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    string cursor?;
    # The maximum number of items to return. Must be between 1 - 100 both inclusive.
    int 'limit?;
};

# Schema for successful response files.upload method
public type FilesUploadResponse record {|
    FileObj file;
    OkTrueDef ok;
|};

# Schema for successful response from files.sharedPublicURL method
public type FilesSharedPublicURLResponse record {|
    FileObj file;
    OkTrueDef ok;
|};
