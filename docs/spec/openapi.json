{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Slack Web API",
    "description" : "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.",
    "contact" : {
      "name" : "Slack developer relations",
      "url" : "https://api.slack.com/support"
    },
    "version" : "1.7.0",
    "x-apisguru-categories" : [ "collaboration", "messaging" ],
    "x-logo" : {
      "url" : "https://api.apis.guru/v2/cache/logo/http_static.tumblr.com_wvuzcz9_LlKncfhmp_slack_logo_240.png"
    },
    "x-origin" : [ {
      "format" : "openapi",
      "url" : "https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json",
      "version" : "3.0"
    } ],
    "x-providerName" : "slack.com"
  },
  "externalDocs" : {
    "description" : "Learn more about the Slack Web API",
    "url" : "https://api.slack.com/web"
  },
  "servers" : [ {
    "url" : "https://slack.com/api"
  } ],
  "paths" : {
    "/admin.apps.approve" : {
      "post" : {
        "tags" : [ "admin.apps", "admin" ],
        "description" : "Approve an app for installation on a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.apps.approve"
        },
        "operationId" : "admin_apps_approve",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminAppsApproveBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.apps:write" ]
        } ]
      }
    },
    "/admin.apps.approved.list" : {
      "get" : {
        "tags" : [ "admin.apps.approved", "admin" ],
        "description" : "List approved apps for an org or workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.apps.approved.list"
        },
        "operationId" : "admin_apps_approved_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "enterprise_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "enterpriseId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse1"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "approved_apps" : [ {
                        "app" : {
                          "additional_info" : "",
                          "app_directory_url" : "https://myteam.enterprise.slack.com/apps/A0W7UKG8E-my-test-app",
                          "app_homepage_url" : "https://www.slack.com",
                          "description" : "test app",
                          "help_url" : "https://www.slack.com",
                          "icons" : {
                            "image_1024" : "https://3026743124446w96_2bd4ea1ad1f89a23c242_1024.png",
                            "image_128" : "https://30267341249446w6_2bd4ea1ad1f89a23c242_128.png",
                            "image_192" : "https://30267431249446w6_2bd4ea1ad1f89a23c242_192.png",
                            "image_32" : "https://302674312496446w_2bd4ea1ad1f89a23c242_32.png",
                            "image_36" : "https://302674312496446w_2bd4ea1ad1f89a23c242_36.png",
                            "image_48" : "https://302674312496446w_2bd4ea1ad1f89a23c242_48.png",
                            "image_512" : "https://30267431249446w6_2bd4ea1ad1f89a23c242_512.png",
                            "image_64" : "https://302674312496446w_2bd4ea1ad1f89a23c242_64.png",
                            "image_72" : "https://302674312496446w_2bd4ea1ad1f89a23c242_72.png",
                            "image_96" : "https://302674312496446w_2bd4ea1ad1f89a23c242_96.png",
                            "image_original" : "https://302674446w12496_2bd4ea1ad1f89a23c242_original.png"
                          },
                          "id" : "A0W7UKG8E",
                          "is_app_directory_approved" : false,
                          "is_internal" : false,
                          "name" : "My Test App",
                          "privacy_policy_url" : "https://www.slack.com"
                        },
                        "date_updated" : 1574296707,
                        "last_resolved_by" : {
                          "actor_id" : "W0G82F4FD",
                          "actor_type" : "user"
                        },
                        "scopes" : [ {
                          "description" : "Add the ability for people to direct message or mention @my_test_app",
                          "is_sensitive" : true,
                          "name" : "bot",
                          "token_type" : "bot"
                        } ]
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : ""
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate1"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.apps:read" ]
        } ]
      }
    },
    "/admin.apps.requests.list" : {
      "get" : {
        "tags" : [ "admin.apps.requests", "admin" ],
        "description" : "List app requests for a team/workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.apps.requests.list"
        },
        "operationId" : "admin_apps_requests_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse2"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "app_requests" : [ {
                        "app" : {
                          "additional_info" : "",
                          "app_directory_url" : "https://acmecorp.slack.com/apps/A061BL8RQ0-test-app",
                          "app_homepage_url" : "",
                          "description" : "",
                          "help_url" : "",
                          "icons" : {
                            "image_1024" : "/cdn/15258203/img/testapp/service_1024.png",
                            "image_128" : "/cdn/157258203/img/testapp/service_128.png",
                            "image_192" : "/cdn/157258203/img/testapp/service_192.png",
                            "image_32" : "/cdn/157658203/img/testapp/service_32.png",
                            "image_36" : "/cdn/157658203/img/testapp/service_36.png",
                            "image_48" : "/cdn/157658203/img/testapp/service_48.png",
                            "image_512" : "/cdn/15758203/img/testapp/service_512.png",
                            "image_64" : "/cdn/157658203/img/testapp/service_64.png",
                            "image_72" : "/cdn/157658203/img/testapp/service_72.png",
                            "image_96" : "/cdn/157658203/img/testapp/service_96.png"
                          },
                          "id" : "A061BL8RQ0",
                          "is_app_directory_approved" : true,
                          "is_internal" : false,
                          "name" : "Test App",
                          "privacy_policy_url" : "https://testapp.com/privacy"
                        },
                        "date_created" : 1578956327,
                        "id" : "Ar0XJGFLMLS",
                        "message" : "test test again",
                        "previous_resolution" : null,
                        "scopes" : [ {
                          "description" : "Post messages to specific channels in Slack",
                          "is_sensitive" : false,
                          "name" : "incoming-webhook",
                          "token_type" : "user"
                        } ],
                        "team" : {
                          "domain" : "acmecorp",
                          "id" : "T0M94LNUCR",
                          "name" : "Acme Corp"
                        },
                        "user" : {
                          "email" : "janedoe@example.com",
                          "id" : "W08RA9G5HR",
                          "name" : "Jane Doe"
                        }
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : ""
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate2"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "missing_scope",
                      "needed" : "admin.apps:read",
                      "ok" : false,
                      "provided" : "read,client,admin,identify,post,apps"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.apps:read" ]
        } ]
      }
    },
    "/admin.apps.restrict" : {
      "post" : {
        "tags" : [ "admin.apps", "admin" ],
        "description" : "Restrict an app for installation on a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.apps.restrict"
        },
        "operationId" : "admin_apps_restrict",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminAppsRestrictBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse3"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate3"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.apps:write" ]
        } ]
      }
    },
    "/admin.apps.restricted.list" : {
      "get" : {
        "tags" : [ "admin.apps.restricted", "admin" ],
        "description" : "List restricted apps for an org or workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.apps.restricted.list"
        },
        "operationId" : "admin_apps_restricted_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "enterprise_id",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "enterpriseId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse4"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : ""
                      },
                      "restricted_apps" : [ {
                        "app" : {
                          "additional_info" : "",
                          "app_directory_url" : "https://myteam.enterprise.slack.com/apps/A0FDLP8M2L-my-test-app",
                          "app_homepage_url" : "https://example.com",
                          "description" : "A fun test app for Slack",
                          "help_url" : "https://example.com",
                          "icons" : {
                            "image_1024" : "https://1433265338rl878408_eb57dbc818daa4ba15d6_1024.png",
                            "image_128" : "https://4332653438rl87808_eb57dbc818daa4ba15d6_128.png",
                            "image_192" : "https://4332653438rl87808_eb57dbc818daa4ba15d6_192.png",
                            "image_32" : "https://143326534038rl8788_eb57dbc818daa4ba15d6_32.png",
                            "image_36" : "https://143326534038rl8788_eb57dbc818daa4ba15d6_36.png",
                            "image_48" : "https://143326534038rl8788_eb57dbc818daa4ba15d6_48.png",
                            "image_512" : "https://4332653438rl87808_eb57dbc818daa4ba15d6_512.png",
                            "image_64" : "https://143326534038rl8788_eb57dbc818daa4ba15d6_64.png",
                            "image_72" : "https://143326534038rl8788_eb57dbc818daa4ba15d6_72.png",
                            "image_96" : "https://143326534038rl8788_eb57dbc818daa4ba15d6_96.png",
                            "image_original" : "https://143338rl8782653408_eb57dbc818daa4ba15d6_original.png"
                          },
                          "id" : "A0FDLP8M2L",
                          "is_app_directory_approved" : true,
                          "is_internal" : false,
                          "name" : "My Test App",
                          "privacy_policy_url" : "https://example.com"
                        },
                        "date_updated" : 1574296721,
                        "last_resolved_by" : {
                          "actor_id" : "W0G82LMFD",
                          "actor_type" : "user"
                        },
                        "scopes" : [ {
                          "description" : "Upload, edit, and delete files on the user‟s behalf",
                          "is_sensitive" : true,
                          "name" : "files:write:user",
                          "token_type" : "user"
                        } ]
                      } ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate4"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.apps:read" ]
        } ]
      }
    },
    "/admin.conversations.archive" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Archive a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.archive"
        },
        "operationId" : "admin_conversations_archive",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsArchiveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsArchiveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsArchiveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.convertToPrivate" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Convert a public channel to a private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.convertToPrivate"
        },
        "operationId" : "admin_conversations_convertToPrivate",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsConvertToPrivateBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsConvertToPrivateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsConvertToPrivateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.create" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Create a public or private channel-based conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.create"
        },
        "operationId" : "admin_conversations_create",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsCreateBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsCreateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel_id" : "C12345",
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsCreateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.delete" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Delete a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.delete"
        },
        "operationId" : "admin_conversations_delete",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsDeleteBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsDeleteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsDeleteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.disconnectShared" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Disconnect a connected channel from one or more workspaces.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.disconnectShared"
        },
        "operationId" : "admin_conversations_disconnectShared",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsDisconnectSharedBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsRenameResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsDisconnectSharedErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.ekm.listOriginalConnectedChannelInfo" : {
      "get" : {
        "tags" : [ "admin.conversations.ekm", "admin" ],
        "description" : "List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo"
        },
        "operationId" : "admin_conversations_ekm_listOriginalConnectedChannelInfo",
        "parameters" : [ {
          "name" : "channel_ids",
          "in" : "query",
          "description" : "A comma-separated list of channels to filter to",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "channelIds"
        }, {
          "name" : "team_ids",
          "in" : "query",
          "description" : "A comma-separated list of the workspaces to which the channels you would like returned belong",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamIds"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse5"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channels" : [ {
                        "id" : "string",
                        "internal_team_ids" : "array",
                        "original_connected_channel_id" : "string",
                        "original_connected_host_id" : "string"
                      } ],
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate5"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:read" ]
        } ]
      }
    },
    "/admin.conversations.getConversationPrefs" : {
      "get" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Get conversation preferences for a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.getConversationPrefs"
        },
        "operationId" : "admin_conversations_getConversationPrefs",
        "parameters" : [ {
          "name" : "channel_id",
          "in" : "query",
          "description" : "The channel to get preferences for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "channelId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsGetConversationPrefsResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsUnarchiveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:read" ]
        } ]
      }
    },
    "/admin.conversations.getTeams" : {
      "get" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Get all the workspaces a given public or private channel is connected to within this Enterprise org.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.getTeams"
        },
        "operationId" : "admin_conversations_getTeams",
        "parameters" : [ {
          "name" : "channel_id",
          "in" : "query",
          "description" : "The channel to determine connected workspaces within the organization for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "channelId"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsGetTeamsResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "teams" : [ "T1234", "T5678" ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsGetTeamsErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:read" ]
        } ]
      }
    },
    "/admin.conversations.invite" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Invite a user to a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.invite"
        },
        "operationId" : "admin_conversations_invite",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsInviteBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsInviteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsInviteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.rename" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Rename a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.rename"
        },
        "operationId" : "admin_conversations_rename",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsRenameBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsRenameResponse1"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsUnarchiveErrorResponse1"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.restrictAccess.addGroup" : {
      "post" : {
        "tags" : [ "admin.conversations.restrictAccess", "admin" ],
        "description" : "Add an allowlist of IDP groups for accessing a channel",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup"
        },
        "operationId" : "admin_conversations_restrictAccess_addGroup",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsRestrictAccessAddGroupBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse6"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate6"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.restrictAccess.listGroups" : {
      "get" : {
        "tags" : [ "admin.conversations.restrictAccess", "admin" ],
        "description" : "List all IDP Groups linked to a channel",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups"
        },
        "operationId" : "admin_conversations_restrictAccess_listGroups",
        "parameters" : [ {
          "name" : "channel_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "channelId"
        }, {
          "name" : "team_id",
          "in" : "query",
          "description" : "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse7"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "group_ids" : [ "YOUR_GROUP_ID" ],
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate7"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:read" ]
        } ]
      }
    },
    "/admin.conversations.restrictAccess.removeGroup" : {
      "post" : {
        "tags" : [ "admin.conversations.restrictAccess", "admin" ],
        "description" : "Remove a linked IDP group linked from a private channel",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup"
        },
        "operationId" : "admin_conversations_restrictAccess_removeGroup",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsRestrictAccessRemoveGroupBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse8"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate8"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.search" : {
      "get" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Search for public or private channels in an Enterprise organization.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.search"
        },
        "operationId" : "admin_conversations_search",
        "parameters" : [ {
          "name" : "team_ids",
          "in" : "query",
          "description" : "Comma separated string of team IDs, signifying the workspaces to search through",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamIds"
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Name of the the channel to query by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "search_channel_types",
          "in" : "query",
          "description" : "The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "searchChannelTypes"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted ",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsSearchResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channels" : [ {
                        "created" : 1449252889,
                        "creator" : "U012A3CDE",
                        "id" : "C012AB3CD",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "name" : "general",
                        "name_normalized" : "general",
                        "num_members" : 4,
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "This channel is for team-wide communication and announcements. All team members are in this channel."
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "Company-wide announcements and work-based matters"
                        },
                        "unlinked" : 0
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTpDMDYxRkE1UEI="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsSearchErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_an_enterprise",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:read" ]
        } ]
      }
    },
    "/admin.conversations.setConversationPrefs" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Set the posting permissions for a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.setConversationPrefs"
        },
        "operationId" : "admin_conversations_setConversationPrefs",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsSetConversationPrefsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsSetConversationPrefsResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsSetConversationPrefsErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.setTeams" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Set the workspaces in an Enterprise grid org that connect to a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.setTeams"
        },
        "operationId" : "admin_conversations_setTeams",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsSetTeamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse9"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate9"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.conversations.unarchive" : {
      "post" : {
        "tags" : [ "admin.conversations", "admin" ],
        "description" : "Unarchive a public or private channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.conversations.unarchive"
        },
        "operationId" : "admin_conversations_unarchive",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminConversationsUnarchiveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsUnarchiveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdminConversationsUnarchiveErrorResponse2"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.conversations:write" ]
        } ]
      }
    },
    "/admin.emoji.add" : {
      "post" : {
        "tags" : [ "admin.emoji", "admin" ],
        "description" : "Add an emoji.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.emoji.add"
        },
        "operationId" : "admin_emoji_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminEmojiAddBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse10"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate10"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.emoji.addAlias" : {
      "post" : {
        "tags" : [ "admin.emoji", "admin" ],
        "description" : "Add an emoji alias.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.emoji.addAlias"
        },
        "operationId" : "admin_emoji_addAlias",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminEmojiAddAliasBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse11"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate11"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.emoji.list" : {
      "get" : {
        "tags" : [ "admin.emoji", "admin" ],
        "description" : "List emoji for an Enterprise Grid organization.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.emoji.list"
        },
        "operationId" : "admin_emoji_list",
        "parameters" : [ {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse12"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "cache_ts" : "1575283387.000000",
                      "categories" : [ {
                        "emoji_names" : [ "grinning", "grin", "joy", "etc etc ..." ],
                        "name" : "Smileys & People"
                      } ],
                      "categories_version" : "5",
                      "emoji" : {
                        "black_square" : "alias:black_large_square",
                        "bowtie" : "https://emoji.slack-edge.com/T9TK3CUKW/bowtie/f3ec6f2bb0.png",
                        "cubimal_chick" : "https://emoji.slack-edge.com/T9TK3CUKW/cubimal_chick/85961c43d7.png",
                        "dusty_stick" : "https://emoji.slack-edge.com/T9TK3CUKW/dusty_stick/6177a62312.png",
                        "glitch_crab" : "https://emoji.slack-edge.com/T9TK3CUKW/glitch_crab/db049f1f9c.png",
                        "piggy" : "https://emoji.slack-edge.com/T9TK3CUKW/piggy/b7762ee8cd.png",
                        "pride" : "https://emoji.slack-edge.com/T9TK3CUKW/pride/56b1bd3388.png",
                        "shipit" : "alias:squirrel",
                        "simple_smile" : {
                          "apple" : "https://a.slack-edge.com/80588/img/emoji_2017_12_06/apple/simple_smile.png",
                          "google" : "https://a.slack-edge.com/80588/img/emoji_2017_12_06/google/simple_smile.png"
                        },
                        "slack" : "https://emoji.slack-edge.com/T9TK3CUKW/slack/7d462d2443.png",
                        "slack_call" : "https://emoji.slack-edge.com/T9TK3CUKW/slack_call/b81fffd6dd.png",
                        "squirrel" : "https://emoji.slack-edge.com/T9TK3CUKW/squirrel/465f40c0e0.png",
                        "thumbsup_all" : "https://emoji.slack-edge.com/T9TK3CUKW/thumbsup_all/50096a1020.gif",
                        "white_square" : "alias:white_large_square"
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate12"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:read" ]
        } ]
      }
    },
    "/admin.emoji.remove" : {
      "post" : {
        "tags" : [ "admin.emoji", "admin" ],
        "description" : "Remove an emoji across an Enterprise Grid organization",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.emoji.remove"
        },
        "operationId" : "admin_emoji_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminEmojiRemoveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse13"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate13"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.emoji.rename" : {
      "post" : {
        "tags" : [ "admin.emoji", "admin" ],
        "description" : "Rename an emoji.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.emoji.rename"
        },
        "operationId" : "admin_emoji_rename",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminEmojiRenameBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse14"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate14"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.inviteRequests.approve" : {
      "post" : {
        "tags" : [ "admin.inviteRequests", "admin" ],
        "description" : "Approve a workspace invite request.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.inviteRequests.approve"
        },
        "operationId" : "admin_inviteRequests_approve",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/admin_inviteRequests_approve"
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse15"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate15"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.invites:write" ]
        } ]
      }
    },
    "/admin.inviteRequests.approved.list" : {
      "get" : {
        "tags" : [ "admin.inviteRequests.approved", "admin" ],
        "description" : "List all approved workspace invite requests.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.inviteRequests.approved.list"
        },
        "operationId" : "admin_inviteRequests_approved_list",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "ID for the workspace where the invite requests were made",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Value of the `next_cursor` field sent as part of the previous API response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse16"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate16"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.invites:read" ]
        } ]
      }
    },
    "/admin.inviteRequests.denied.list" : {
      "get" : {
        "tags" : [ "admin.inviteRequests.denied", "admin" ],
        "description" : "List all denied workspace invite requests.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.inviteRequests.denied.list"
        },
        "operationId" : "admin_inviteRequests_denied_list",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "ID for the workspace where the invite requests were made",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Value of the `next_cursor` field sent as part of the previous api response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse17"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate17"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.invites:read" ]
        } ]
      }
    },
    "/admin.inviteRequests.deny" : {
      "post" : {
        "tags" : [ "admin.inviteRequests", "admin" ],
        "description" : "Deny a workspace invite request.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.inviteRequests.deny"
        },
        "operationId" : "admin_inviteRequests_deny",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/admin_inviteRequests_approve"
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse18"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate18"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.invites:write" ]
        } ]
      }
    },
    "/admin.inviteRequests.list" : {
      "get" : {
        "tags" : [ "admin.inviteRequests", "admin" ],
        "description" : "List all pending workspace invite requests.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.inviteRequests.list"
        },
        "operationId" : "admin_inviteRequests_list",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "ID for the workspace where the invite requests were made",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Value of the `next_cursor` field sent as part of the previous API response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse19"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate19"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.invites:read" ]
        } ]
      }
    },
    "/admin.teams.admins.list" : {
      "get" : {
        "tags" : [ "admin.teams.admins", "admin" ],
        "description" : "List all of the admins on a given workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.admins.list"
        },
        "operationId" : "admin_teams_admins_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse20"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "admin_ids" : [ "U1234" ],
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate20"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:read" ]
        } ]
      }
    },
    "/admin.teams.create" : {
      "post" : {
        "tags" : [ "admin.teams", "admin" ],
        "description" : "Create an Enterprise team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.create"
        },
        "operationId" : "admin_teams_create",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminTeamsCreateBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse21"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "team" : "T12345"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate21"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.teams.list" : {
      "get" : {
        "tags" : [ "admin.teams", "admin" ],
        "description" : "List all teams on an Enterprise organization",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.list"
        },
        "operationId" : "admin_teams_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 100 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse22"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "teams" : [ {
                        "discoverability" : "hidden",
                        "id" : "T1234",
                        "name" : "My Team",
                        "primary_owner" : {
                          "email" : "bront@slack.com",
                          "user_id" : "W1234"
                        },
                        "team_url" : "https://subarachnoid.slack.com/"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate22"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:read" ]
        } ]
      }
    },
    "/admin.teams.owners.list" : {
      "get" : {
        "tags" : [ "admin.teams.owners", "admin" ],
        "description" : "List all of the owners on a given workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.owners.list"
        },
        "operationId" : "admin_teams_owners_list",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Must be between 1 - 1000 both inclusive",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse23"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "owner_ids" : [ "U1234" ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate23"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:read" ]
        } ]
      }
    },
    "/admin.teams.settings.info" : {
      "get" : {
        "tags" : [ "admin.teams.settings", "admin" ],
        "description" : "Fetch information about settings in a workspace",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.settings.info"
        },
        "operationId" : "admin_teams_settings_info",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse24"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "team" : {
                        "default_channels" : "array",
                        "domain" : "string",
                        "email_domain" : "string",
                        "enterprise_id" : "string",
                        "enterprise_name" : "string",
                        "icon" : "array",
                        "id" : "string",
                        "name" : "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate24"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:read" ]
        } ]
      }
    },
    "/admin.teams.settings.setDefaultChannels" : {
      "post" : {
        "tags" : [ "admin.teams.settings", "admin" ],
        "description" : "Set the default channels of a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.settings.setDefaultChannels"
        },
        "operationId" : "admin_teams_settings_setDefaultChannels",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminTeamsSettingsSetDefaultChannelsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse25"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate25"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.teams.settings.setDescription" : {
      "post" : {
        "tags" : [ "admin.teams.settings", "admin" ],
        "description" : "Set the description of a given workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.settings.setDescription"
        },
        "operationId" : "admin_teams_settings_setDescription",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminTeamsSettingsSetDescriptionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse26"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate26"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.teams.settings.setDiscoverability" : {
      "post" : {
        "tags" : [ "admin.teams.settings", "admin" ],
        "description" : "An API method that allows admins to set the discoverability of a given workspace",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.settings.setDiscoverability"
        },
        "operationId" : "admin_teams_settings_setDiscoverability",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminTeamsSettingsSetDiscoverabilityBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse27"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate27"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.teams.settings.setIcon" : {
      "post" : {
        "tags" : [ "admin.teams.settings", "admin" ],
        "description" : "Sets the icon of a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.settings.setIcon"
        },
        "operationId" : "admin_teams_settings_setIcon",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminTeamsSettingsSetIconBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse28"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate28"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.teams.settings.setName" : {
      "post" : {
        "tags" : [ "admin.teams.settings", "admin" ],
        "description" : "Set the name of a given workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.teams.settings.setName"
        },
        "operationId" : "admin_teams_settings_setName",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminTeamsSettingsSetNameBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse29"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate29"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.usergroups.addChannels" : {
      "post" : {
        "tags" : [ "admin.usergroups", "admin" ],
        "description" : "Add one or more default channels to an IDP group.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.usergroups.addChannels"
        },
        "operationId" : "admin_usergroups_addChannels",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsergroupsAddChannelsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse30"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if the token provided is not associated with an Org Admin or Owner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate30"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_an_admin",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.usergroups:write" ]
        } ]
      }
    },
    "/admin.usergroups.addTeams" : {
      "post" : {
        "tags" : [ "admin.usergroups", "admin" ],
        "description" : "Associate one or more default workspaces with an organization-wide IDP group.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.usergroups.addTeams"
        },
        "operationId" : "admin_usergroups_addTeams",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsergroupsAddTeamsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse31"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate31"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.teams:write" ]
        } ]
      }
    },
    "/admin.usergroups.listChannels" : {
      "get" : {
        "tags" : [ "admin.usergroups", "admin" ],
        "description" : "List the channels linked to an org-level IDP group (user group).",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.usergroups.listChannels"
        },
        "operationId" : "admin_usergroups_listChannels",
        "parameters" : [ {
          "name" : "usergroup_id",
          "in" : "query",
          "description" : "ID of the IDP group to list default channels for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "usergroupId"
        }, {
          "name" : "team_id",
          "in" : "query",
          "description" : "ID of the the workspace",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "include_num_members",
          "in" : "query",
          "description" : "Flag to include or exclude the count of members per channel",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeNumMembers"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse32"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channels" : [ {
                        "id" : "C024BE91L",
                        "name" : "fun",
                        "num_members" : 34,
                        "team_id" : "T024BE911"
                      }, {
                        "id" : "C024BE91K",
                        "name" : "more fun",
                        "team_id" : "T024BE912"
                      }, {
                        "id" : "C024BE91M",
                        "is_redacted" : true,
                        "name" : "public-channel",
                        "num_members" : 34,
                        "team_id" : "T024BE911"
                      }, {
                        "id" : "C024BE91N",
                        "name" : "some more fun",
                        "team_id" : "T024BE921"
                      } ],
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if the token provided is not associated with an Org Admin or Owner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate32"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_an_admin",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.usergroups:read" ]
        } ]
      }
    },
    "/admin.usergroups.removeChannels" : {
      "post" : {
        "tags" : [ "admin.usergroups", "admin" ],
        "description" : "Remove one or more default channels from an org-level IDP group (user group).",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.usergroups.removeChannels"
        },
        "operationId" : "admin_usergroups_removeChannels",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsergroupsRemoveChannelsBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse33"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if the token provided is not associated with an Org Admin or Owner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate33"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_an_admin",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.usergroups:write" ]
        } ]
      }
    },
    "/admin.users.assign" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Add an Enterprise user to a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.assign"
        },
        "operationId" : "admin_users_assign",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersAssignBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse34"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate34"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.invite" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Invite a user to a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.invite"
        },
        "operationId" : "admin_users_invite",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersInviteBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse35"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate35"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.list" : {
      "get" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "List users on a workspace",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.list"
        },
        "operationId" : "admin_users_list",
        "parameters" : [ {
          "name" : "team_id",
          "in" : "query",
          "description" : "The ID (`T1234`) of the workspace",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit for how many users to be retrieved per page",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse36"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "users" : [ {
                        "email" : "bront@slack.com",
                        "id" : "T1234",
                        "is_admin" : false,
                        "is_bot" : false,
                        "is_owner" : false,
                        "is_primary_owner" : false,
                        "is_restricted" : false,
                        "is_ultra_restricted" : false
                      } ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate36"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:read" ]
        } ]
      }
    },
    "/admin.users.remove" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Remove a user from a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.remove"
        },
        "operationId" : "admin_users_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersRemoveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse37"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate37"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.session.invalidate" : {
      "post" : {
        "tags" : [ "admin.users.session", "admin" ],
        "description" : "Invalidate a single session for a user by session_id",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.session.invalidate"
        },
        "operationId" : "admin_users_session_invalidate",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersSessionInvalidateBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse38"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate38"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.session.reset" : {
      "post" : {
        "tags" : [ "admin.users.session", "admin" ],
        "description" : "Wipes all valid sessions on all devices for a given user",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.session.reset"
        },
        "operationId" : "admin_users_session_reset",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersSessionResetBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse39"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate39"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.setAdmin" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Set an existing guest, regular user, or owner to be an admin user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.setAdmin"
        },
        "operationId" : "admin_users_setAdmin",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersSetAdminBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse40"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate40"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.setExpiration" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Set an expiration for a guest user",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.setExpiration"
        },
        "operationId" : "admin_users_setExpiration",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersSetExpirationBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse41"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate41"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.setOwner" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Set an existing guest, regular user, or admin user to be a workspace owner.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.setOwner"
        },
        "operationId" : "admin_users_setOwner",
        "parameters" : [ {
          "name" : "token",
          "in" : "header",
          "description" : "Authentication token. Requires scope: `admin.users:write`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersSetOwnerBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse42"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate42"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/admin.users.setRegular" : {
      "post" : {
        "tags" : [ "admin.users", "admin" ],
        "description" : "Set an existing guest user, admin user, or owner to be a regular user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/admin.users.setRegular"
        },
        "operationId" : "admin_users_setRegular",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/AdminUsersSetRegularBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse43"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate43"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin.users:write" ]
        } ]
      }
    },
    "/api.test" : {
      "get" : {
        "tags" : [ "api" ],
        "description" : "Checks API calling code.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/api.test"
        },
        "operationId" : "api_test",
        "parameters" : [ {
          "name" : "foo",
          "in" : "query",
          "description" : "example property to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiTestResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Artificial error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiTestErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "args" : {
                        "error" : "my_error"
                      },
                      "error" : "my_error",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.event.authorizations.list" : {
      "get" : {
        "tags" : [ "apps.event.authorizations", "apps" ],
        "description" : "Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.event.authorizations.list"
        },
        "operationId" : "apps_event_authorizations_list",
        "parameters" : [ {
          "name" : "event_context",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "eventContext"
        }, {
          "name" : "cursor",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse44"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "authorizations" : {
                        "enterprise_id" : "string",
                        "is_bot" : "string",
                        "team_id" : "string",
                        "user_id" : "string"
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate44"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "authorizations:read" ]
        } ]
      }
    },
    "/apps.permissions.info" : {
      "get" : {
        "tags" : [ "apps.permissions", "apps" ],
        "description" : "Returns list of permissions this app has on a team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.permissions.info"
        },
        "operationId" : "apps_permissions_info",
        "responses" : {
          "200" : {
            "description" : "Standard success response when used with a user token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "info" : {
                        "app_home" : {
                          "resources" : {
                            "ids" : [ "D0C0NU1Q8", "D0BH95DLH" ]
                          },
                          "scopes" : [ "chat:write", "im:history", "im:read" ]
                        },
                        "channel" : {
                          "resources" : {
                            "excluded_ids" : [ ],
                            "ids" : [ "C061FA5PB" ],
                            "wildcard" : false
                          },
                          "scopes" : [ "channels:read" ]
                        },
                        "group" : {
                          "resources" : {
                            "ids" : [ ]
                          },
                          "scopes" : [ ]
                        },
                        "im" : {
                          "resources" : {
                            "ids" : [ ]
                          },
                          "scopes" : [ ]
                        },
                        "mpim" : {
                          "resources" : {
                            "ids" : [ ]
                          },
                          "scopes" : [ ]
                        },
                        "team" : {
                          "resources" : {
                            "ids" : [ ]
                          },
                          "scopes" : [ ]
                        }
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Standard failure response when used with an invalid token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.permissions.request" : {
      "get" : {
        "tags" : [ "apps.permissions", "apps" ],
        "description" : "Allows an app to request additional scopes",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.permissions.request"
        },
        "operationId" : "apps_permissions_request",
        "parameters" : [ {
          "name" : "scopes",
          "in" : "query",
          "description" : "A comma separated list of scopes to request for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger_id",
          "in" : "query",
          "description" : "Token used to trigger the permissions API",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "triggerId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard success response when used with a user token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsRequestResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Standard failure response when trigger_id is invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsRequestErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_trigger_id",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.permissions.resources.list" : {
      "get" : {
        "tags" : [ "apps.permissions.resources", "apps" ],
        "description" : "Returns list of resource grants this app has on a team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.permissions.resources.list"
        },
        "operationId" : "apps_permissions_resources_list",
        "parameters" : [ {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical successful paginated response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsResourcesListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "resources" : [ {
                        "id" : "T0DES3UAN",
                        "type" : "team"
                      }, {
                        "id" : "D024BFF1M",
                        "type" : "app_home"
                      }, {
                        "id" : "C024BE91L",
                        "type" : "channel"
                      } ],
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTpDMUg5UkVTR0w="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsResourcesListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_cursor",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.permissions.scopes.list" : {
      "get" : {
        "tags" : [ "apps.permissions.scopes", "apps" ],
        "description" : "Returns list of scopes this app has on a team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.permissions.scopes.list"
        },
        "operationId" : "apps_permissions_scopes_list",
        "responses" : {
          "200" : {
            "description" : "Typical successful paginated response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiPermissionsScopesListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "scopes" : {
                        "app_home" : [ "chat:write", "im:history", "im:read" ],
                        "channel" : [ "channels:history", "chat:write" ],
                        "group" : [ "chat:write" ],
                        "im" : [ "chat:write" ],
                        "mpim" : [ "chat:write" ],
                        "team" : [ "users:read" ],
                        "user" : [ ]
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsPermissionsScopesListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.permissions.users.list" : {
      "get" : {
        "tags" : [ "apps.permissions.users", "apps" ],
        "description" : "Returns list of user grants and corresponding scopes this app has on a team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.permissions.users.list"
        },
        "operationId" : "apps_permissions_users_list",
        "parameters" : [ {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical successful paginated response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse45"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "resources" : [ {
                        "id" : "U0DES3UAN",
                        "scopes" : [ "dnd:write:user", "reminders:write:user" ]
                      }, {
                        "id" : "U024BFF1M",
                        "scopes" : [ "reminders:write:user" ]
                      } ],
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTdPMUg5UkFTT0w="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate45"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_cursor",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.permissions.users.request" : {
      "get" : {
        "tags" : [ "apps.permissions.users", "apps" ],
        "description" : "Enables an app to trigger a permissions modal to grant an app access to a user access scope.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.permissions.users.request"
        },
        "operationId" : "apps_permissions_users_request",
        "parameters" : [ {
          "name" : "scopes",
          "in" : "query",
          "description" : "A comma separated list of user scopes to request for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger_id",
          "in" : "query",
          "description" : "Token used to trigger the request",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "triggerId"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "The user this scope is being requested for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard success response when used with a user token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse46"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Standard failure response when trigger_id is invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate46"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_trigger_id",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/apps.uninstall" : {
      "get" : {
        "tags" : [ "apps" ],
        "description" : "Uninstalls your app from a workspace.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/apps.uninstall"
        },
        "operationId" : "apps_uninstall",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientId"
        }, {
          "name" : "client_secret",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientSecret"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsUninstallResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppsUninstallErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/auth.revoke" : {
      "get" : {
        "tags" : [ "auth" ],
        "description" : "Revokes a token.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/auth.revoke"
        },
        "operationId" : "auth_revoke",
        "parameters" : [ {
          "name" : "test",
          "in" : "query",
          "description" : "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthRevokeResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "revoked" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthRevokeErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/auth.test" : {
      "get" : {
        "tags" : [ "auth" ],
        "description" : "Checks authentication & identity.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/auth.test"
        },
        "operationId" : "auth_test",
        "responses" : {
          "200" : {
            "description" : "Standard success response when used with a user token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthTestResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "team" : "Subarachnoid Workspace",
                      "team_id" : "T12345678",
                      "url" : "https://subarachnoid.slack.com/",
                      "user" : "grace",
                      "user_id" : "W12345678"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Standard failure response when used with an invalid token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthTestErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/bots.info" : {
      "get" : {
        "tags" : [ "bots" ],
        "description" : "Gets information about a bot user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/bots.info"
        },
        "operationId" : "bots_info",
        "parameters" : [ {
          "name" : "bot",
          "in" : "query",
          "description" : "Bot user to get info on",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "When successful, returns bot info by bot ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotsInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "bot" : {
                        "app_id" : "A161CLERW",
                        "deleted" : false,
                        "icons" : {
                          "image_36" : "https://...",
                          "image_48" : "https://...",
                          "image_72" : "https://..."
                        },
                        "id" : "B061F7JD2",
                        "name" : "beforebot",
                        "updated" : 1449272004,
                        "user_id" : "U012ABCDEF"
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "When no bot can be found, it returns an error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BotsInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "bot_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:read" ]
        } ]
      }
    },
    "/calls.add" : {
      "post" : {
        "tags" : [ "calls" ],
        "description" : "Registers a new Call.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/calls.add"
        },
        "operationId" : "calls_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CallsAddBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse47"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate47"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "calls:write" ]
        } ]
      }
    },
    "/calls.end" : {
      "post" : {
        "tags" : [ "calls" ],
        "description" : "Ends a Call.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/calls.end"
        },
        "operationId" : "calls_end",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CallsEndBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse48"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate48"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "calls:write" ]
        } ]
      }
    },
    "/calls.info" : {
      "get" : {
        "tags" : [ "calls" ],
        "description" : "Returns information about a Call.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/calls.info"
        },
        "operationId" : "calls_info",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "`id` of the Call returned by the [`calls.add`](/methods/calls.add) method",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse49"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate49"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "calls:read" ]
        } ]
      }
    },
    "/calls.participants.add" : {
      "post" : {
        "tags" : [ "calls.participants", "calls" ],
        "description" : "Registers new participants added to a Call.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/calls.participants.add"
        },
        "operationId" : "calls_participants_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CallsParticipantsAddBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse50"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate50"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "calls:write" ]
        } ]
      }
    },
    "/calls.participants.remove" : {
      "post" : {
        "tags" : [ "calls.participants", "calls" ],
        "description" : "Registers participants removed from a Call.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/calls.participants.remove"
        },
        "operationId" : "calls_participants_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CallsParticipantsRemoveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse51"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate51"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "calls:write" ]
        } ]
      }
    },
    "/calls.update" : {
      "post" : {
        "tags" : [ "calls" ],
        "description" : "Updates information about a Call.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/calls.update"
        },
        "operationId" : "calls_update",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CallsUpdateBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse52"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate52"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "calls:write" ]
        } ]
      }
    },
    "/chat.delete" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Deletes a message.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.delete"
        },
        "operationId" : "chat_delete",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatDeleteBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatDeleteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : "C024BE91L",
                      "ok" : true,
                      "ts" : "1401383885.000061"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatDeleteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "message_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/chat.deleteScheduledMessage" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Deletes a pending scheduled message from the queue.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.deleteScheduledMessage"
        },
        "operationId" : "chat_deleteScheduledMessage",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatDeleteScheduledMessageBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatDeleteScheduledMessageResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if no message is found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatDeleteScheduledMessageErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_scheduled_message_id",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/chat.getPermalink" : {
      "get" : {
        "tags" : [ "chat" ],
        "description" : "Retrieve a permalink URL for a specific extant message",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.getPermalink"
        },
        "operationId" : "chat_getPermalink",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "The ID of the conversation or channel containing the message",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "message_ts",
          "in" : "query",
          "description" : "A message's `ts` value, uniquely identifying it within a channel",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "messageTs"
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatGetPermalinkResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : "C1H9RESGA",
                      "ok" : true,
                      "permalink" : "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Error response when channel cannot be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatGetPermalinkErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/chat.meMessage" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Share a me message into a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.meMessage"
        },
        "operationId" : "chat_meMessage",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatMeMessageBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatMeMessageResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : "C024BE7LR",
                      "ok" : true,
                      "ts" : "1417671948.000006"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatMeMessageErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/chat.postEphemeral" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Sends an ephemeral message to a user in a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.postEphemeral"
        },
        "operationId" : "chat_postEphemeral",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatPostEphemeralBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatPostEphemeralResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "message_ts" : "1502210682.580145",
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatPostEphemeralErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "user_not_in_channel",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/chat.postMessage" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Sends a message to a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.postMessage"
        },
        "operationId" : "chat_postMessage",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatPostMessageBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatPostMessageResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : "C1H9RESGL",
                      "message" : {
                        "attachments" : [ {
                          "fallback" : "This is an attachment's fallback",
                          "id" : 1,
                          "text" : "This is an attachment"
                        } ],
                        "bot_id" : "B19LU7CSY",
                        "subtype" : "bot_message",
                        "text" : "Here's a message for you",
                        "ts" : "1503435956.000247",
                        "type" : "message",
                        "username" : "ecto1"
                      },
                      "ok" : true,
                      "ts" : "1503435956.000247"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if too many attachments are included",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatPostMessageErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "too_many_attachments",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/chat.scheduleMessage" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Schedules a message to be sent to a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.scheduleMessage"
        },
        "operationId" : "chat_scheduleMessage",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatScheduleMessageBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatScheduleMessageResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : "C1H9RESGL",
                      "message" : {
                        "attachments" : [ {
                          "fallback" : "This is an attachment's fallback",
                          "id" : 1,
                          "text" : "This is an attachment"
                        } ],
                        "bot_id" : "B19LU7CSY",
                        "subtype" : "bot_message",
                        "text" : "Here's a message for you in the future",
                        "type" : "delayed_message",
                        "username" : "ecto1"
                      },
                      "ok" : true,
                      "post_at" : "1562180400",
                      "scheduled_message_id" : "Q1298393284"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatScheduleMessageErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "time_in_past",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/chat.scheduledMessages.list" : {
      "get" : {
        "tags" : [ "chat.scheduledMessages", "chat" ],
        "description" : "Returns a list of scheduled messages.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.scheduledMessages.list"
        },
        "operationId" : "chat_scheduledMessages_list",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "The channel of the scheduled messages",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "A UNIX timestamp of the latest value in the time range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "oldest",
          "in" : "query",
          "description" : "A UNIX timestamp of the oldest value in the time range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of original entries to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatScheduledMessagesListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : ""
                      },
                      "scheduled_messages" : [ {
                        "channel_id" : "C1H9RESGL",
                        "date_created" : 1551891734,
                        "id" : 1298393284,
                        "post_at" : 1551991428,
                        "text" : "Here's a message for you in the future"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if the channel passed is invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatScheduledMessagesListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_channel",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/chat.unfurl" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Provide custom unfurl behavior for user-posted URLs",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.unfurl"
        },
        "operationId" : "chat_unfurl",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatUnfurlBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical, minimal success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatUnfurlResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatUnfurlErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "cannot_unfurl_url",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "links:write" ]
        } ]
      }
    },
    "/chat.update" : {
      "post" : {
        "tags" : [ "chat" ],
        "description" : "Updates a message.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/chat.update"
        },
        "operationId" : "chat_update",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatUpdateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatUpdateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : "C024BE91L",
                      "message" : {
                        "text" : "Updated text you carefully authored",
                        "user" : "U34567890"
                      },
                      "ok" : true,
                      "text" : "Updated text you carefully authored",
                      "ts" : "1401383885.000061"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatUpdateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "cant_update_message",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "chat:write:user", "chat:write:bot" ]
        } ]
      }
    },
    "/conversations.archive" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Archives a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.archive"
        },
        "operationId" : "conversations_archive",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsArchiveBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsArchiveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsArchiveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.close" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Closes a direct message or multi-person direct message.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.close"
        },
        "operationId" : "conversations_close",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsCloseBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsCloseResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsCloseErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.create" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Initiates a public or private channel-based conversation",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.create"
        },
        "operationId" : "conversations_create",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "If successful, the command returns a rather stark [conversation object](/types/conversation)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsCreateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : {
                        "created" : 1504554479,
                        "creator" : "U0123456",
                        "id" : "C0EAQDV4Z",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : false,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "last_read" : "0000000000.000000",
                        "latest" : null,
                        "name" : "endeavor",
                        "name_normalized" : "endeavor",
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "priority" : 0,
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : ""
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : ""
                        },
                        "unlinked" : 0,
                        "unread_count" : 0,
                        "unread_count_display" : 0
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when name already in use",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsCreateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "name_taken",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.history" : {
      "get" : {
        "tags" : [ "conversations" ],
        "description" : "Fetches a conversation's history of messages and events.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.history"
        },
        "operationId" : "conversations_history",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "Conversation ID to fetch history for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "End of time range of messages to include in results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "oldest",
          "in" : "query",
          "description" : "Start of time range of messages to include in results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "inclusive",
          "in" : "query",
          "description" : "Include messages with latest or oldest timestamp in results only when either timestamp is specified",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response containing a channel's messages",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsHistoryResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "has_more" : true,
                      "messages" : [ {
                        "text" : "I find you punny and would like to smell your nose letter",
                        "ts" : "1512085950.000216",
                        "type" : "message",
                        "user" : "U012AB3CDE"
                      }, {
                        "text" : "What, you want to smell my shoes better?",
                        "ts" : "1512104434.000490",
                        "type" : "message",
                        "user" : "U061F7AUR"
                      } ],
                      "ok" : true,
                      "pin_count" : 0,
                      "response_metadata" : {
                        "next_cursor" : "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQz"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsHistoryErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:history", "groups:history", "im:history", "mpim:history" ]
        } ]
      }
    },
    "/conversations.info" : {
      "get" : {
        "tags" : [ "conversations" ],
        "description" : "Retrieve information about a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.info"
        },
        "operationId" : "conversations_info",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "Conversation ID to learn more about",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include_locale",
          "in" : "query",
          "description" : "Set this to `true` to receive the locale for this conversation. Defaults to `false`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeLocale"
        }, {
          "name" : "include_num_members",
          "in" : "query",
          "description" : "Set to `true` to include the member count for the specified conversation. Defaults to `false`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeNumMembers"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : {
                        "created" : 1449252889,
                        "creator" : "W012A3BCD",
                        "id" : "C012AB3CD",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_read_only" : false,
                        "is_shared" : false,
                        "last_read" : "1502126650.228446",
                        "locale" : "en-US",
                        "name" : "general",
                        "name_normalized" : "general",
                        "parent_conversation" : null,
                        "pending_shared" : [ ],
                        "previous_names" : [ "specifics", "abstractions", "etc" ],
                        "purpose" : {
                          "creator" : "W012A3BCD",
                          "last_set" : 1449709364,
                          "value" : "This part of the workspace is for fun. Make fun here."
                        },
                        "topic" : {
                          "creator" : "W012A3BCD",
                          "last_set" : 1449709364,
                          "value" : "For public discussion of generalities"
                        },
                        "unlinked" : 0
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when a channel cannot be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:read", "groups:read", "im:read", "mpim:read" ]
        } ]
      }
    },
    "/conversations.invite" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Invites users to a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.invite"
        },
        "operationId" : "conversations_invite",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsInviteBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response when an invitation is extended",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsInviteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : {
                        "created" : 1449252889,
                        "creator" : "W012A3BCD",
                        "id" : "C012AB3CD",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_read_only" : false,
                        "is_shared" : false,
                        "last_read" : "1502126650.228446",
                        "locale" : "en-US",
                        "name" : "general",
                        "name_normalized" : "general",
                        "num_members" : 23,
                        "pending_shared" : [ ],
                        "previous_names" : [ "specifics", "abstractions", "etc" ],
                        "purpose" : {
                          "creator" : "W012A3BCD",
                          "last_set" : 1449709364,
                          "value" : "This part of the workspace is for fun. Make fun here."
                        },
                        "topic" : {
                          "creator" : "W012A3BCD",
                          "last_set" : 1449709364,
                          "value" : "For public discussion of generalities"
                        },
                        "unlinked" : 0
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when an invite is attempted on a conversation type that does not support it",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsInviteErrorResponse1"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "method_not_supported_for_channel_type",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.join" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Joins an existing conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.join"
        },
        "operationId" : "conversations_join",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsJoinBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsJoinResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : {
                        "created" : 1449252889,
                        "creator" : "U061F7AUR",
                        "id" : "C061EG9SL",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "name" : "general",
                        "name_normalized" : "general",
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "For widget discussion"
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "Which widget do you worry about?"
                        },
                        "unlinked" : 0
                      },
                      "ok" : true,
                      "response_metadata" : {
                        "warnings" : [ "already_in_channel" ]
                      },
                      "warning" : "already_in_channel"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response if the conversation is archived and cannot be joined",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsJoinErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "is_archived",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write" ]
        } ]
      }
    },
    "/conversations.kick" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Removes a user from a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.kick"
        },
        "operationId" : "conversations_kick",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsKickBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsKickResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when you attempt to kick yourself from a channel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsKickErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "cant_kick_self",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.leave" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Leaves a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.leave"
        },
        "operationId" : "conversations_leave",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsLeaveBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsLeaveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when attempting to leave a workspace's \"general\" channel",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsLeaveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "cant_leave_general",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.list" : {
      "get" : {
        "tags" : [ "conversations" ],
        "description" : "Lists all channels in a Slack team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.list"
        },
        "operationId" : "conversations_list",
        "parameters" : [ {
          "name" : "exclude_archived",
          "in" : "query",
          "description" : "Set to `true` to exclude archived channels from the list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "excludeArchived"
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response with only public channels",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channels" : [ {
                        "created" : 1449252889,
                        "creator" : "U012A3CDE",
                        "id" : "C012AB3CD",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "name" : "general",
                        "name_normalized" : "general",
                        "num_members" : 4,
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "This channel is for team-wide communication and announcements. All team members are in this channel."
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "Company-wide announcements and work-based matters"
                        },
                        "unlinked" : 0
                      }, {
                        "created" : 1449252889,
                        "creator" : "U061F7AUR",
                        "id" : "C061EG9T2",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : false,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "name" : "random",
                        "name_normalized" : "random",
                        "num_members" : 4,
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "Non-work banter and water cooler conversation"
                        },
                        "unlinked" : 0
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTpDMDYxRkE1UEI="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:read", "groups:read", "im:read", "mpim:read" ]
        } ]
      }
    },
    "/conversations.mark" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Sets the read cursor in a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.mark"
        },
        "operationId" : "conversations_mark",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsMarkBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsMarkResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsMarkErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.members" : {
      "get" : {
        "tags" : [ "conversations" ],
        "description" : "Retrieve members of a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.members"
        },
        "operationId" : "conversations_members",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "ID of the conversation to retrieve members for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical paginated success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsMembersResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "members" : [ "U023BECGF", "U061F7AUR", "W012A3CDE" ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when an invalid cursor is provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsMembersErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_cursor",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:read", "groups:read", "im:read", "mpim:read" ]
        } ]
      }
    },
    "/conversations.open" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Opens or resumes a direct message or multi-person direct message.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.open"
        },
        "operationId" : "conversations_open",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsOpenBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsOpenResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : {
                        "id" : "D069C7QFK"
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsOpenErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.rename" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Renames a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.rename"
        },
        "operationId" : "conversations_rename",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsRenameBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsRenameResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channel" : {
                        "created" : 1449252889,
                        "creator" : "W012A3BCD",
                        "id" : "C012AB3CD",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_member" : true,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_read_only" : false,
                        "is_shared" : false,
                        "last_read" : "1502126650.228446",
                        "locale" : "en-US",
                        "name" : "general",
                        "name_normalized" : "general",
                        "num_members" : 23,
                        "pending_shared" : [ ],
                        "previous_names" : [ "specifics", "abstractions", "etc" ],
                        "purpose" : {
                          "creator" : "W012A3BCD",
                          "last_set" : 1449709364,
                          "value" : "This part of the workspace is for fun. Make fun here."
                        },
                        "topic" : {
                          "creator" : "W012A3BCD",
                          "last_set" : 1449709364,
                          "value" : "For public discussion of generalities"
                        },
                        "unlinked" : 0
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when the calling user is not a member of the conversation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsRenameErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_in_channel",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.replies" : {
      "get" : {
        "tags" : [ "conversations" ],
        "description" : "Retrieve a thread of messages posted to a conversation",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.replies"
        },
        "operationId" : "conversations_replies",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "Conversation ID to fetch thread from",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ts",
          "in" : "query",
          "description" : "Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "End of time range of messages to include in results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "oldest",
          "in" : "query",
          "description" : "Start of time range of messages to include in results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "inclusive",
          "in" : "query",
          "description" : "Include messages with latest or oldest timestamp in results only when either timestamp is specified",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsRepliesResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "has_more" : true,
                      "messages" : [ {
                        "last_read" : "1484678597.521003",
                        "reply_count" : 3,
                        "subscribed" : true,
                        "text" : "island",
                        "thread_ts" : "1482960137.003543",
                        "ts" : "1482960137.003543",
                        "type" : "message",
                        "unread_count" : 0,
                        "user" : "U061F7AUR"
                      }, {
                        "parent_user_id" : "U061F7AUR",
                        "text" : "one island",
                        "thread_ts" : "1482960137.003543",
                        "ts" : "1483037603.017503",
                        "type" : "message",
                        "user" : "U061F7AUR"
                      }, {
                        "parent_user_id" : "U061F7AUR",
                        "text" : "two island",
                        "thread_ts" : "1482960137.003543",
                        "ts" : "1483051909.018632",
                        "type" : "message",
                        "user" : "U061F7AUR"
                      }, {
                        "parent_user_id" : "U061F7AUR",
                        "text" : "three for the land",
                        "thread_ts" : "1482960137.003543",
                        "ts" : "1483125339.020269",
                        "type" : "message",
                        "user" : "U061F7AUR"
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "bmV4dF90czoxNDg0Njc4MjkwNTE3MDkx"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsRepliesErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "thread_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:history", "groups:history", "im:history", "mpim:history" ]
        } ]
      }
    },
    "/conversations.setPurpose" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Sets the purpose for a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.setPurpose"
        },
        "operationId" : "conversations_setPurpose",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsSetPurposeBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsSetPurposeResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsSetPurposeErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.setTopic" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Sets the topic for a conversation.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.setTopic"
        },
        "operationId" : "conversations_setTopic",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsSetTopicBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsSetTopicResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsSetTopicErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/conversations.unarchive" : {
      "post" : {
        "tags" : [ "conversations" ],
        "description" : "Reverses conversation archival.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/conversations.unarchive"
        },
        "operationId" : "conversations_unarchive",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConversationsUnarchiveBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsUnarchiveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConversationsUnarchiveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:write", "groups:write", "im:write", "mpim:write" ]
        } ]
      }
    },
    "/dialog.open" : {
      "get" : {
        "tags" : [ "dialog" ],
        "description" : "Open a dialog with a user",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/dialog.open"
        },
        "operationId" : "dialog_open",
        "parameters" : [ {
          "name" : "dialog",
          "in" : "query",
          "description" : "The dialog definition. This must be a JSON-encoded string",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "trigger_id",
          "in" : "query",
          "description" : "Exchange a trigger to post to the user",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "triggerId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response is quite minimal",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DialogOpenResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response, before getting to any possible validation errors.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DialogOpenErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "missing_trigger",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/dnd.endDnd" : {
      "post" : {
        "tags" : [ "dnd" ],
        "description" : "Ends the current user's Do Not Disturb session immediately.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/dnd.endDnd"
        },
        "operationId" : "dnd_endDnd",
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndEndDndResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndEndDndErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "dnd:write" ]
        } ]
      }
    },
    "/dnd.endSnooze" : {
      "post" : {
        "tags" : [ "dnd" ],
        "description" : "Ends the current user's snooze mode immediately.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/dnd.endSnooze"
        },
        "operationId" : "dnd_endSnooze",
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndEndSnoozeResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndEndSnoozeErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "dnd:write" ]
        } ]
      }
    },
    "/dnd.info" : {
      "get" : {
        "tags" : [ "dnd" ],
        "description" : "Retrieves a user's current Do Not Disturb status.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/dnd.info"
        },
        "operationId" : "dnd_info",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "User to fetch status for (defaults to current user)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "dnd:read" ]
        } ]
      }
    },
    "/dnd.setSnooze" : {
      "post" : {
        "tags" : [ "dnd" ],
        "description" : "Turns on Do Not Disturb mode for the current user, or changes its duration.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/dnd.setSnooze"
        },
        "operationId" : "dnd_setSnooze",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/DndSetSnoozeBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndSetSnoozeResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DndSetSnoozeErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "dnd:write" ]
        } ]
      }
    },
    "/dnd.teamInfo" : {
      "get" : {
        "tags" : [ "dnd" ],
        "description" : "Retrieves the Do Not Disturb status for up to 50 users on a team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/dnd.teamInfo"
        },
        "operationId" : "dnd_teamInfo",
        "parameters" : [ {
          "name" : "users",
          "in" : "query",
          "description" : "Comma-separated list of users to fetch Do Not Disturb status for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse53"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "users" : {
                        "U023BECGF" : {
                          "dnd_enabled" : true,
                          "next_dnd_end_ts" : 1450423800,
                          "next_dnd_start_ts" : 1450387800
                        },
                        "W058CJVAA" : {
                          "dnd_enabled" : false,
                          "next_dnd_end_ts" : 1,
                          "next_dnd_start_ts" : 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate53"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "dnd:read" ]
        } ]
      }
    },
    "/emoji.list" : {
      "get" : {
        "tags" : [ "emoji" ],
        "description" : "Lists custom emoji for a team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/emoji.list"
        },
        "operationId" : "emoji_list",
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse54"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate54"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "emoji:read" ]
        } ]
      }
    },
    "/files.comments.delete" : {
      "post" : {
        "tags" : [ "files.comments", "files" ],
        "description" : "Deletes an existing comment on a file.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.comments.delete"
        },
        "operationId" : "files_comments_delete",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesCommentsDeleteBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Standard success response is very simple",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesCommentsDeleteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Standard failure response when used with an invalid token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesCommentsDeleteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "file_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:write:user" ]
        } ]
      }
    },
    "/files.delete" : {
      "post" : {
        "tags" : [ "files" ],
        "description" : "Deletes a file.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.delete"
        },
        "operationId" : "files_delete",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesDeleteBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesDeleteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesDeleteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:write:user" ]
        } ]
      }
    },
    "/files.info" : {
      "get" : {
        "tags" : [ "files" ],
        "description" : "Gets information about a file.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.info"
        },
        "operationId" : "files_info",
        "parameters" : [ {
          "name" : "file",
          "in" : "query",
          "description" : "Specify a file by providing its ID",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "comments" : [ ],
                      "file" : {
                        "channels" : [ "C0T8SE4AU" ],
                        "comments_count" : 0,
                        "created" : 1531763342,
                        "deanimate_gif" : "https://.../tedair_deanimate_gif.png",
                        "display_as_bot" : false,
                        "editable" : false,
                        "external_type" : "",
                        "filetype" : "gif",
                        "groups" : [ ],
                        "has_rich_preview" : false,
                        "id" : "F0S43PZDF",
                        "image_exif_rotation" : 1,
                        "ims" : [ ],
                        "is_external" : false,
                        "is_public" : true,
                        "is_starred" : false,
                        "mimetype" : "image/gif",
                        "mode" : "hosted",
                        "name" : "tedair.gif",
                        "original_h" : 226,
                        "original_w" : 176,
                        "permalink" : "https://.../tedair.gif",
                        "permalink_public" : "https://.../...",
                        "pjpeg" : "https://.../tedair_pjpeg.jpg",
                        "pretty_type" : "GIF",
                        "public_url_shared" : false,
                        "shares" : {
                          "public" : {
                            "C0T8SE4AU" : [ {
                              "channel_name" : "file-under",
                              "latest_reply" : "1531763348.000001",
                              "reply_count" : 1,
                              "reply_users" : [ "U061F7AUR" ],
                              "reply_users_count" : 1,
                              "team_id" : "T061EG9R6",
                              "thread_ts" : "1531763273.000015",
                              "ts" : "1531763348.000001"
                            } ]
                          }
                        },
                        "size" : 137531,
                        "thumb_160" : "https://.../tedair_=_160.png",
                        "thumb_360" : "https://.../tedair_360.png",
                        "thumb_360_gif" : "https://.../tedair_360.gif",
                        "thumb_360_h" : 226,
                        "thumb_360_w" : 176,
                        "thumb_64" : "https://.../tedair_64.png",
                        "thumb_80" : "https://.../tedair_80.png",
                        "timestamp" : 1531763342,
                        "title" : "tedair.gif",
                        "url_private" : "https://.../tedair.gif",
                        "url_private_download" : "https://.../tedair.gif",
                        "user" : "U061F7AUR",
                        "username" : ""
                      },
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTpDMUg5UkVTR0w="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:read" ]
        } ]
      }
    },
    "/files.list" : {
      "get" : {
        "tags" : [ "files" ],
        "description" : "List for a team, in a channel, or from a user with applied filters.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.list"
        },
        "operationId" : "files_list",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Filter files created by a single user",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "channel",
          "in" : "query",
          "description" : "Filter files appearing in a specific channel, indicated by its ID",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ts_from",
          "in" : "query",
          "description" : "Filter files created after this timestamp (inclusive)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "x-ballerina-name" : "tsFrom"
        }, {
          "name" : "ts_to",
          "in" : "query",
          "description" : "Filter files created before this timestamp (inclusive)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "x-ballerina-name" : "tsTo"
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "show_files_hidden_by_limit",
          "in" : "query",
          "description" : "Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "showFilesHiddenByLimit"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "files" : [ {
                        "channels" : [ "C0T8SE4AU" ],
                        "comments_count" : 0,
                        "created" : 1531763254,
                        "deanimate_gif" : "https://.../billair_deanimate_gif.png",
                        "display_as_bot" : false,
                        "editable" : false,
                        "external_type" : "",
                        "filetype" : "gif",
                        "groups" : [ ],
                        "id" : "F0S43P1CZ",
                        "image_exif_rotation" : 1,
                        "ims" : [ ],
                        "is_external" : false,
                        "is_public" : true,
                        "mimetype" : "image/gif",
                        "mode" : "hosted",
                        "name" : "billair.gif",
                        "original_h" : 226,
                        "original_w" : 176,
                        "permalink" : "https://.../billair.gif",
                        "permalink_public" : "https://.../...",
                        "pjpeg" : "https://.../billair_pjpeg.jpg",
                        "pretty_type" : "GIF",
                        "public_url_shared" : false,
                        "size" : 144538,
                        "thumb_160" : "https://.../billair_=_160.png",
                        "thumb_360" : "https://.../billair_360.png",
                        "thumb_360_gif" : "https://.../billair_360.gif",
                        "thumb_360_h" : 226,
                        "thumb_360_w" : 176,
                        "thumb_64" : "https://.../billair_64.png",
                        "thumb_80" : "https://.../billair_80.png",
                        "timestamp" : 1531763254,
                        "title" : "billair.gif",
                        "url_private" : "https://.../billair.gif",
                        "url_private_download" : "https://.../billair.gif",
                        "user" : "U061F7AUR",
                        "username" : ""
                      }, {
                        "channels" : [ "C0T8SE4AU" ],
                        "comments_count" : 0,
                        "created" : 1531763342,
                        "deanimate_gif" : "https://.../tedair_deanimate_gif.png",
                        "display_as_bot" : false,
                        "editable" : false,
                        "external_type" : "",
                        "filetype" : "gif",
                        "groups" : [ ],
                        "id" : "F0S43PZDF",
                        "image_exif_rotation" : 1,
                        "ims" : [ ],
                        "is_external" : false,
                        "is_public" : true,
                        "mimetype" : "image/gif",
                        "mode" : "hosted",
                        "name" : "tedair.gif",
                        "original_h" : 226,
                        "original_w" : 176,
                        "permalink" : "https://.../tedair.gif",
                        "permalink_public" : "https://.../...",
                        "pjpeg" : "https://.../tedair_pjpeg.jpg",
                        "pretty_type" : "GIF",
                        "public_url_shared" : false,
                        "size" : 137531,
                        "thumb_160" : "https://.../tedair_=_160.png",
                        "thumb_360" : "https://.../tedair_360.png",
                        "thumb_360_gif" : "https://.../tedair_360.gif",
                        "thumb_360_h" : 226,
                        "thumb_360_w" : 176,
                        "thumb_64" : "https://.../tedair_64.png",
                        "thumb_80" : "https://.../tedair_80.png",
                        "timestamp" : 1531763342,
                        "title" : "tedair.gif",
                        "url_private" : "https://.../tedair.gif",
                        "url_private_download" : "https://.../tedair.gif",
                        "user" : "U061F7AUR",
                        "username" : ""
                      } ],
                      "ok" : true,
                      "paging" : {
                        "count" : 100,
                        "page" : 1,
                        "pages" : 1,
                        "total" : 2
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:read" ]
        } ]
      }
    },
    "/files.remote.add" : {
      "post" : {
        "tags" : [ "files.remote", "files" ],
        "description" : "Adds a file from a remote service",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.remote.add"
        },
        "operationId" : "files_remote_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesRemoteAddBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse55"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate55"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "remote_files:write" ]
        } ]
      }
    },
    "/files.remote.info" : {
      "get" : {
        "tags" : [ "files.remote", "files" ],
        "description" : "Retrieve information about a remote file added to Slack",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.remote.info"
        },
        "operationId" : "files_remote_info",
        "parameters" : [ {
          "name" : "file",
          "in" : "query",
          "description" : "Specify a file by providing its ID",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "external_id",
          "in" : "query",
          "description" : "Creator defined GUID for the file",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "externalId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse56"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate56"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "remote_files:read" ]
        } ]
      }
    },
    "/files.remote.list" : {
      "get" : {
        "tags" : [ "files.remote", "files" ],
        "description" : "Retrieve information about a remote file added to Slack",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.remote.list"
        },
        "operationId" : "files_remote_list",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "Filter files appearing in a specific channel, indicated by its ID",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ts_from",
          "in" : "query",
          "description" : "Filter files created after this timestamp (inclusive)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "x-ballerina-name" : "tsFrom"
        }, {
          "name" : "ts_to",
          "in" : "query",
          "description" : "Filter files created before this timestamp (inclusive)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          },
          "x-ballerina-name" : "tsTo"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse57"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate57"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "remote_files:read" ]
        } ]
      }
    },
    "/files.remote.remove" : {
      "post" : {
        "tags" : [ "files.remote", "files" ],
        "description" : "Remove a remote file.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.remote.remove"
        },
        "operationId" : "files_remote_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesRemoteRemoveBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse58"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate58"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "remote_files:write" ]
        } ]
      }
    },
    "/files.remote.share" : {
      "get" : {
        "tags" : [ "files.remote", "files" ],
        "description" : "Share a remote file into a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.remote.share"
        },
        "operationId" : "files_remote_share",
        "parameters" : [ {
          "name" : "file",
          "in" : "query",
          "description" : "Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "external_id",
          "in" : "query",
          "description" : "The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "externalId"
        }, {
          "name" : "channels",
          "in" : "query",
          "description" : "Comma-separated list of channel IDs where the file will be shared",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse59"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate59"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "remote_files:share" ]
        } ]
      }
    },
    "/files.remote.update" : {
      "post" : {
        "tags" : [ "files.remote", "files" ],
        "description" : "Updates an existing remote file.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.remote.update"
        },
        "operationId" : "files_remote_update",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesRemoteUpdateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse60"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate60"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "remote_files:write" ]
        } ]
      }
    },
    "/files.revokePublicURL" : {
      "post" : {
        "tags" : [ "files" ],
        "description" : "Revokes public/external sharing access for a file",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.revokePublicURL"
        },
        "operationId" : "files_revokePublicURL",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesRevokePublicURLBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesRevokePublicURLResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesRevokePublicURLErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:write:user" ]
        } ]
      }
    },
    "/files.sharedPublicURL" : {
      "post" : {
        "tags" : [ "files" ],
        "description" : "Enables a file for public/external sharing.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.sharedPublicURL"
        },
        "operationId" : "files_sharedPublicURL",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesSharedPublicURLBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesSharedPublicURLResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesSharedPublicURLErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:write:user" ]
        } ]
      }
    },
    "/files.upload" : {
      "post" : {
        "tags" : [ "files" ],
        "description" : "Uploads or creates a file.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/files.upload"
        },
        "operationId" : "files_upload",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/FilesUploadBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success response after uploading a file to a channel with an initial message",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesUploadResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "file" : {
                        "channels" : [ ],
                        "comments_count" : 0,
                        "created" : 1532293501,
                        "display_as_bot" : false,
                        "editable" : false,
                        "external_type" : "",
                        "filetype" : "gif",
                        "groups" : [ ],
                        "has_rich_preview" : false,
                        "id" : "F0TD00400",
                        "image_exif_rotation" : 1,
                        "ims" : [ "D0L4B9P0Q" ],
                        "is_external" : false,
                        "is_public" : false,
                        "is_starred" : false,
                        "mimetype" : "image/jpeg",
                        "mode" : "hosted",
                        "name" : "dramacat.gif",
                        "original_h" : 366,
                        "original_w" : 526,
                        "permalink" : "https://.../dramacat.gif",
                        "permalink_public" : "https://.../More-Path-Components",
                        "pretty_type" : "JPEG",
                        "public_url_shared" : false,
                        "shares" : {
                          "private" : {
                            "D0L4B9P0Q" : [ {
                              "reply_count" : 0,
                              "reply_users" : [ ],
                              "reply_users_count" : 0,
                              "ts" : "1532293503.000001"
                            } ]
                          }
                        },
                        "size" : 43518,
                        "thumb_160" : "https://.../dramacat_160.gif",
                        "thumb_360" : "https://.../dramacat_360.gif",
                        "thumb_360_h" : 250,
                        "thumb_360_w" : 360,
                        "thumb_480" : "https://.../dramacat_480.gif",
                        "thumb_480_h" : 334,
                        "thumb_480_w" : 480,
                        "thumb_64" : "https://.../dramacat_64.gif",
                        "thumb_80" : "https://.../dramacat_80.gif",
                        "timestamp" : 1532293501,
                        "title" : "dramacat",
                        "url_private" : "https://.../dramacat.gif",
                        "url_private_download" : "https://.../dramacat.gif",
                        "user" : "U0L4B9NSU",
                        "username" : ""
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FilesUploadErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "files:write:user" ]
        } ]
      }
    },
    "/migration.exchange" : {
      "get" : {
        "tags" : [ "migration" ],
        "description" : "For Enterprise Grid workspaces, map local user IDs to global user IDs",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/migration.exchange"
        },
        "operationId" : "migration_exchange",
        "parameters" : [ {
          "name" : "users",
          "in" : "query",
          "description" : "A comma-separated list of user ids, up to 400 per request",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "team_id",
          "in" : "query",
          "description" : "Specify team_id starts with `T` in case of Org Token",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "teamId"
        }, {
          "name" : "to_old",
          "in" : "query",
          "description" : "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "toOld"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response when mappings exist for the specified user IDs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MigrationExchangeResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "enterprise_id" : "E1KQTNXE1",
                      "invalid_user_ids" : [ "U21ABZZXX" ],
                      "ok" : true,
                      "team_id" : "T1KR7PE1W",
                      "user_id_map" : {
                        "U06UBSUN5" : "W06M56XJM",
                        "U06UBSVB3" : "W06PUUDLY",
                        "U06UBSVDX" : "W06PUUDMW",
                        "U06UEB62U" : "W06PTT6GH",
                        "W06UAZ65Q" : "W06UAZ65Q"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response when there are no mappings to provide",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MigrationExchangeErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_enterprise_team",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "tokens.basic" ]
        } ]
      }
    },
    "/oauth.access" : {
      "get" : {
        "tags" : [ "oauth" ],
        "description" : "Exchanges a temporary OAuth verifier code for an access token.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/oauth.access"
        },
        "operationId" : "oauth_access",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientId"
        }, {
          "name" : "client_secret",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientSecret"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The `code` param returned via the OAuth callback",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "description" : "This must match the originally submitted URI (if one was sent)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "redirectUri"
        }, {
          "name" : "single_channel",
          "in" : "query",
          "description" : "Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "singleChannel"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful user token negotiation for a single scope",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse61"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "access_token" : "xoxp-XXXXXXXX-XXXXXXXX-XXXXX",
                      "enterprise_id" : null,
                      "scope" : "groups:write",
                      "team_id" : "TXXXXXXXXX",
                      "team_name" : "Wyld Stallyns LLC"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate61"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_client_id",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/oauth.token" : {
      "get" : {
        "tags" : [ "oauth" ],
        "description" : "Exchanges a temporary OAuth verifier code for a workspace token.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/oauth.token"
        },
        "operationId" : "oauth_token",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientId"
        }, {
          "name" : "client_secret",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientSecret"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The `code` param returned via the OAuth callback",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "description" : "This must match the originally submitted URI (if one was sent)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "redirectUri"
        }, {
          "name" : "single_channel",
          "in" : "query",
          "description" : "Request the user to add your app only to a single channel",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "singleChannel"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success example using a workspace app produces a very different kind of response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse62"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "access_token" : "xoxa-access-token-string",
                      "app_id" : "A012345678",
                      "app_user_id" : "U0AB12ABC",
                      "authorizing_user_id" : "U0HTT3Q0G",
                      "installer_user_id" : "U061F7AUR",
                      "ok" : true,
                      "permissions" : [ {
                        "resource_id" : 0,
                        "resource_type" : "channel",
                        "scopes" : [ "channels:read", "chat:write:user" ]
                      } ],
                      "single_channel_id" : "C061EG9T2",
                      "team_id" : "T061EG9Z9",
                      "team_name" : "Subarachnoid Workspace",
                      "token_type" : "app"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate62"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_client_id",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/oauth.v2.access" : {
      "get" : {
        "tags" : [ "oauth.v2", "oauth" ],
        "description" : "Exchanges a temporary OAuth verifier code for an access token.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/oauth.v2.access"
        },
        "operationId" : "oauth_v2_access",
        "parameters" : [ {
          "name" : "client_id",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientId"
        }, {
          "name" : "client_secret",
          "in" : "query",
          "description" : "Issued when you created your application",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "clientSecret"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The `code` param returned via the OAuth callback",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "description" : "This must match the originally submitted URI (if one was sent)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "redirectUri"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful token request with scopes for both a bot user and a user token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse63"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "access_token" : "xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy",
                      "app_id" : "A0KRD7HC3",
                      "authed_user" : {
                        "access_token" : "xoxp-1234",
                        "id" : "U1234",
                        "scope" : "chat:write",
                        "token_type" : "user"
                      },
                      "bot_user_id" : "U0KRQLJ9H",
                      "enterprise" : {
                        "id" : "E12345678",
                        "name" : "slack-sports"
                      },
                      "ok" : true,
                      "scope" : "commands,incoming-webhook",
                      "team" : {
                        "id" : "T9TK3CUKW",
                        "name" : "Slack Softball Team"
                      },
                      "token_type" : "bot"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate63"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_client_id",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/pins.add" : {
      "post" : {
        "tags" : [ "pins" ],
        "description" : "Pins an item to a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/pins.add"
        },
        "operationId" : "pins_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PinsAddBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PinsAddResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PinsAddErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "channel_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "pins:write" ]
        } ]
      }
    },
    "/pins.list" : {
      "get" : {
        "tags" : [ "pins" ],
        "description" : "Lists items pinned to a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/pins.list"
        },
        "operationId" : "pins_list",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "Channel to get pinned items for",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "PinsListResponse",
                  "type" : "array",
                  "description" : "Schema for successful response from pins.list method",
                  "items" : {
                    "$ref" : "#/components/schemas/InlineResponseItems200"
                  }
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "items" : [ {
                        "channel" : "C2U86NC6H",
                        "created" : 1508881078,
                        "created_by" : "U2U85N1RZ",
                        "message" : {
                          "permalink" : "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508197641000151",
                          "pinned_to" : [ "C2U86NC6H" ],
                          "text" : "What is the meaning of life?",
                          "ts" : "1508197641.000151",
                          "type" : "message",
                          "user" : "U2U85N1RZ"
                        },
                        "type" : "message"
                      }, {
                        "channel" : "C2U86NC6H",
                        "created" : 1508880991,
                        "created_by" : "U2U85N1RZ",
                        "message" : {
                          "permalink" : "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508284197000015",
                          "pinned_to" : [ "C2U86NC6H" ],
                          "text" : "The meaning of life, the universe, and everything is 42.",
                          "ts" : "1503289197.000015",
                          "type" : "message",
                          "user" : "U2U85N1RZ"
                        },
                        "type" : "message"
                      } ],
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PinsListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "pins:read" ]
        } ]
      }
    },
    "/pins.remove" : {
      "post" : {
        "tags" : [ "pins" ],
        "description" : "Un-pins an item from a channel.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/pins.remove"
        },
        "operationId" : "pins_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/PinsRemoveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PinsRemoveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PinsRemoveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "no_pin",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "pins:write" ]
        } ]
      }
    },
    "/reactions.add" : {
      "post" : {
        "tags" : [ "reactions" ],
        "description" : "Adds a reaction to an item.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reactions.add"
        },
        "operationId" : "reactions_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReactionsAddBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsAddResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsAddErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "already_reacted",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reactions:write" ]
        } ]
      }
    },
    "/reactions.get" : {
      "get" : {
        "tags" : [ "reactions" ],
        "description" : "Gets reactions for an item.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reactions.get"
        },
        "operationId" : "reactions_get",
        "parameters" : [ {
          "name" : "channel",
          "in" : "query",
          "description" : "Channel where the message to get reactions for was posted",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "file",
          "in" : "query",
          "description" : "File to get reactions for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "file_comment",
          "in" : "query",
          "description" : "File comment to get reactions for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "fileComment"
        }, {
          "name" : "full",
          "in" : "query",
          "description" : "If true always return the complete reaction list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "timestamp",
          "in" : "query",
          "description" : "Timestamp of the message to get reactions for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ReactionsGetResponse",
                  "type" : "array",
                  "description" : "Schema for successful response from reactions.get method",
                  "items" : {
                    "$ref" : "#/components/schemas/InlineResponseItems2001"
                  }
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "file" : {
                        "channels" : [ "C2U7V2YA2" ],
                        "comments_count" : 1,
                        "created" : 1507850315,
                        "groups" : [ ],
                        "id" : "F7H0D7ZA4",
                        "ims" : [ ],
                        "name" : "computer.gif",
                        "reactions" : [ {
                          "count" : 1,
                          "name" : "stuck_out_tongue_winking_eye",
                          "users" : [ "U2U85N1RV" ]
                        } ],
                        "timestamp" : 1507850315,
                        "title" : "computer.gif",
                        "user" : "U2U85N1RV"
                      },
                      "ok" : true,
                      "type" : "file"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsGetErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reactions:read" ]
        } ]
      }
    },
    "/reactions.list" : {
      "get" : {
        "tags" : [ "reactions" ],
        "description" : "Lists reactions made by a user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reactions.list"
        },
        "operationId" : "reactions_list",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Show reactions made by this user. Defaults to the authed user",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "full",
          "in" : "query",
          "description" : "If true always return the complete reaction list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "items" : [ {
                        "channel" : "C3UKJTQAC",
                        "message" : {
                          "bot_id" : "B4VLRLMKJ",
                          "reactions" : [ {
                            "count" : 1,
                            "name" : "robot_face",
                            "users" : [ "U2U85N1RV" ]
                          } ],
                          "subtype" : "bot_message",
                          "text" : "Hello from Python! :tada:",
                          "ts" : "1507849573.000090",
                          "username" : "Shipit Notifications"
                        },
                        "type" : "message"
                      }, {
                        "comment" : {
                          "comment" : "This is a file comment",
                          "created" : 1508286096,
                          "id" : "Fc7LP08P1U",
                          "reactions" : [ {
                            "count" : 1,
                            "name" : "white_check_mark",
                            "users" : [ "U2U85N1RV" ]
                          } ],
                          "timestamp" : 1508286096,
                          "type" : "file_comment",
                          "user" : "U2U85N1RV"
                        },
                        "file" : {
                          "channels" : [ "C2U7V2YA2" ],
                          "comments_count" : 1,
                          "created" : 1507850315,
                          "reactions" : [ {
                            "count" : 1,
                            "name" : "stuck_out_tongue_winking_eye",
                            "users" : [ "U2U85N1RV" ]
                          } ],
                          "title" : "computer.gif",
                          "user" : "U2U85N1RV",
                          "username" : ""
                        }
                      }, {
                        "file" : {
                          "channels" : [ "C2U7V2YA2" ],
                          "comments_count" : 1,
                          "created" : 1507850315,
                          "id" : "F7H0D7ZA4",
                          "name" : "computer.gif",
                          "reactions" : [ {
                            "count" : 1,
                            "name" : "stuck_out_tongue_winking_eye",
                            "users" : [ "U2U85N1RV" ]
                          } ],
                          "size" : 1639034,
                          "title" : "computer.gif",
                          "user" : "U2U85N1RV",
                          "username" : ""
                        },
                        "type" : "file"
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTpDMUg5UkVTR0w="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reactions:read" ]
        } ]
      }
    },
    "/reactions.remove" : {
      "post" : {
        "tags" : [ "reactions" ],
        "description" : "Removes a reaction from an item.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reactions.remove"
        },
        "operationId" : "reactions_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReactionsRemoveBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsRemoveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReactionsRemoveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "no_reaction",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reactions:write" ]
        } ]
      }
    },
    "/reminders.add" : {
      "post" : {
        "tags" : [ "reminders" ],
        "description" : "Creates a reminder.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reminders.add"
        },
        "operationId" : "reminders_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemindersAddBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersAddResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersAddErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reminders:write" ]
        } ]
      }
    },
    "/reminders.complete" : {
      "post" : {
        "tags" : [ "reminders" ],
        "description" : "Marks a reminder as complete.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reminders.complete"
        },
        "operationId" : "reminders_complete",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemindersCompleteBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersCompleteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersCompleteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reminders:write" ]
        } ]
      }
    },
    "/reminders.delete" : {
      "post" : {
        "tags" : [ "reminders" ],
        "description" : "Deletes a reminder.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reminders.delete"
        },
        "operationId" : "reminders_delete",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RemindersDeleteBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersDeleteResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersDeleteErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reminders:write" ]
        } ]
      }
    },
    "/reminders.info" : {
      "get" : {
        "tags" : [ "reminders" ],
        "description" : "Gets information about a reminder.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reminders.info"
        },
        "operationId" : "reminders_info",
        "parameters" : [ {
          "name" : "reminder",
          "in" : "query",
          "description" : "The ID of the reminder",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reminders:read" ]
        } ]
      }
    },
    "/reminders.list" : {
      "get" : {
        "tags" : [ "reminders" ],
        "description" : "Lists all reminders created by or for a given user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/reminders.list"
        },
        "operationId" : "reminders_list",
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RemindersListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "reminders:read" ]
        } ]
      }
    },
    "/rtm.connect" : {
      "get" : {
        "tags" : [ "rtm" ],
        "description" : "Starts a Real Time Messaging session.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/rtm.connect"
        },
        "operationId" : "rtm_connect",
        "parameters" : [ {
          "name" : "batch_presence_aware",
          "in" : "query",
          "description" : "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "batchPresenceAware"
        }, {
          "name" : "presence_sub",
          "in" : "query",
          "description" : "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "presenceSub"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtmConnectResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "self" : {
                        "id" : "U4X318ZMZ",
                        "name" : "robotoverlord"
                      },
                      "team" : {
                        "domain" : "slackdemo",
                        "id" : "T2U81E2FP",
                        "name" : "SlackDemo"
                      },
                      "url" : "wss://..."
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RtmConnectErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "rtm:stream" ]
        } ]
      }
    },
    "/search.messages" : {
      "get" : {
        "tags" : [ "search" ],
        "description" : "Searches for messages matching a query.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/search.messages"
        },
        "operationId" : "search_messages",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Pass the number of results you want per \"page\". Maximum of `100`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "highlight",
          "in" : "query",
          "description" : "Pass a value of `true` to enable query highlight markers (see below)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Search query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Return matches sorted by either `score` or `timestamp`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sort_dir",
          "in" : "query",
          "description" : "Change sort direction to ascending (`asc`) or descending (`desc`)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "sortDir"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse64"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "messages" : {
                        "matches" : [ {
                          "channel" : {
                            "id" : "C12345678",
                            "is_ext_shared" : false,
                            "is_mpim" : false,
                            "is_org_shared" : false,
                            "is_pending_ext_shared" : false,
                            "is_private" : false,
                            "is_shared" : false,
                            "name" : "general",
                            "pending_shared" : [ ]
                          },
                          "iid" : "cb64bdaa-c1e8-4631-8a91-0f78080113e9",
                          "permalink" : "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015",
                          "team" : "T12345678",
                          "text" : "The meaning of life the universe and everything is 42.",
                          "ts" : "1508284197.000015",
                          "type" : "message",
                          "user" : "U2U85N1RV",
                          "username" : "roach"
                        }, {
                          "channel" : {
                            "id" : "C12345678",
                            "is_ext_shared" : false,
                            "is_mpim" : false,
                            "is_org_shared" : false,
                            "is_pending_ext_shared" : false,
                            "is_private" : false,
                            "is_shared" : false,
                            "name" : "random",
                            "pending_shared" : [ ]
                          },
                          "iid" : "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90",
                          "permalink" : "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236",
                          "team" : "T12345678",
                          "text" : "The meaning of life the universe and everything is 101010",
                          "ts" : "1508795665.000236",
                          "type" : "message",
                          "user" : "",
                          "username" : "robot overlord"
                        } ],
                        "pagination" : {
                          "first" : 1,
                          "last" : 2,
                          "page" : 1,
                          "page_count" : 1,
                          "per_page" : 20,
                          "total_count" : 2
                        },
                        "paging" : {
                          "count" : 20,
                          "page" : 1,
                          "pages" : 1,
                          "total" : 2
                        },
                        "total" : 2
                      },
                      "ok" : true,
                      "query" : "The meaning of life the universe and everything"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate64"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "No query passed",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "search:read" ]
        } ]
      }
    },
    "/stars.add" : {
      "post" : {
        "tags" : [ "stars" ],
        "description" : "Adds a star to an item.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/stars.add"
        },
        "operationId" : "stars_add",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/StarsAddBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarsAddResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarsAddErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "stars:write" ]
        } ]
      }
    },
    "/stars.list" : {
      "get" : {
        "tags" : [ "stars" ],
        "description" : "Lists stars for a user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/stars.list"
        },
        "operationId" : "stars_list",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarsListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarsListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "stars:read" ]
        } ]
      }
    },
    "/stars.remove" : {
      "post" : {
        "tags" : [ "stars" ],
        "description" : "Removes a star from an item.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/stars.remove"
        },
        "operationId" : "stars_remove",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/StarsRemoveBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarsRemoveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarsRemoveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "stars:write" ]
        } ]
      }
    },
    "/team.accessLogs" : {
      "get" : {
        "tags" : [ "team" ],
        "description" : "Gets the access logs for the current team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/team.accessLogs"
        },
        "operationId" : "team_accessLogs",
        "parameters" : [ {
          "name" : "before",
          "in" : "query",
          "description" : "End of time range of logs to include in results (inclusive)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "This response demonstrates pagination and two access log entries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamAccessLogsResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "logins" : [ {
                        "count" : 1,
                        "country" : "US",
                        "date_first" : 1422922864,
                        "date_last" : 1422922864,
                        "ip" : "127.0.0.1",
                        "isp" : "BigCo ISP",
                        "region" : "CA",
                        "user_agent" : "SlackWeb Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.35 Safari/537.36",
                        "user_id" : "U45678",
                        "username" : "alice"
                      }, {
                        "count" : 1,
                        "country" : "US",
                        "date_first" : 1422922493,
                        "date_last" : 1422922493,
                        "ip" : "127.0.0.1",
                        "isp" : "BigCo ISP",
                        "region" : "CA",
                        "user_agent" : "SlackWeb Mozilla/5.0 (iPhone; CPU iPhone OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4",
                        "user_id" : "U12345",
                        "username" : "white_rabbit"
                      } ],
                      "ok" : true,
                      "paging" : {
                        "count" : 100,
                        "page" : 1,
                        "pages" : 1,
                        "total" : 2
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamAccessLogsErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "paid_only",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin" ]
        } ]
      }
    },
    "/team.billableInfo" : {
      "get" : {
        "tags" : [ "team" ],
        "description" : "Gets billable users information for the current team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/team.billableInfo"
        },
        "operationId" : "team_billableInfo",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "A user to retrieve the billable information for. Defaults to all users",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse65"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "billable_info" : {
                        "U02UCPE1R" : {
                          "billing_active" : true
                        },
                        "U02UEBSD2" : {
                          "billing_active" : true
                        },
                        "U0632EWRW" : {
                          "billing_active" : false
                        }
                      },
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate65"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin" ]
        } ]
      }
    },
    "/team.info" : {
      "get" : {
        "tags" : [ "team" ],
        "description" : "Gets information about the current team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/team.info"
        },
        "operationId" : "team_info",
        "parameters" : [ {
          "name" : "team",
          "in" : "query",
          "description" : "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "team" : {
                        "domain" : "example",
                        "email_domain" : "example.com",
                        "enterprise_id" : "E1234A12AB",
                        "enterprise_name" : "Umbrella Corporation",
                        "icon" : {
                          "image_102" : "https://...",
                          "image_132" : "https://...",
                          "image_34" : "https://...",
                          "image_44" : "https://...",
                          "image_68" : "https://...",
                          "image_88" : "https://...",
                          "image_default" : true
                        },
                        "id" : "T12345",
                        "name" : "My Team"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "team:read" ]
        } ]
      }
    },
    "/team.integrationLogs" : {
      "get" : {
        "tags" : [ "team" ],
        "description" : "Gets the integration logs for the current team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/team.integrationLogs"
        },
        "operationId" : "team_integrationLogs",
        "parameters" : [ {
          "name" : "app_id",
          "in" : "query",
          "description" : "Filter logs to this Slack app. Defaults to all logs",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "appId"
        }, {
          "name" : "change_type",
          "in" : "query",
          "description" : "Filter logs with this change type. Defaults to all logs",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "changeType"
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "service_id",
          "in" : "query",
          "description" : "Filter logs to this service. Defaults to all logs",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "serviceId"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "Filter logs generated by this user’s actions. Defaults to all logs",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamIntegrationLogsResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamIntegrationLogsErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "admin" ]
        } ]
      }
    },
    "/team.profile.get" : {
      "get" : {
        "tags" : [ "team.profile", "team" ],
        "description" : "Retrieve a team's profile.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/team.profile.get"
        },
        "operationId" : "team_profile_get",
        "parameters" : [ {
          "name" : "visibility",
          "in" : "query",
          "description" : "Filter by visibility",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamProfileGetResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "profile" : {
                        "fields" : [ {
                          "hint" : "Enter the extension to reach your desk",
                          "id" : "Xf06054AAA",
                          "is_hidden" : 1,
                          "label" : "Phone extension",
                          "options" : null,
                          "ordering" : 0,
                          "possible_values" : null,
                          "type" : "text"
                        }, {
                          "hint" : "When you were born",
                          "id" : "Xf06054BBB",
                          "label" : "Date of birth",
                          "options" : null,
                          "ordering" : 1,
                          "possible_values" : null,
                          "type" : "date"
                        }, {
                          "hint" : "Enter a link to your Facebook profile",
                          "id" : "Xf06054CCC",
                          "label" : "Facebook",
                          "options" : null,
                          "ordering" : 2,
                          "possible_values" : null,
                          "type" : "link"
                        }, {
                          "hint" : "Hogwarts, obviously",
                          "id" : "Xf06054DDD",
                          "label" : "House",
                          "options" : null,
                          "ordering" : 3,
                          "possible_values" : [ "Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin" ],
                          "type" : "options_list"
                        }, {
                          "hint" : "Office location (LDAP)",
                          "id" : "Xf06054EEE",
                          "label" : "Location",
                          "options" : {
                            "is_protected" : 1
                          },
                          "ordering" : 4,
                          "possible_values" : null,
                          "type" : "text"
                        }, {
                          "hint" : "The boss",
                          "id" : "Xf06054FFF",
                          "label" : "Manager",
                          "options" : null,
                          "ordering" : 5,
                          "possible_values" : null,
                          "type" : "user"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TeamProfileGetErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users.profile:read" ]
        } ]
      }
    },
    "/usergroups.create" : {
      "post" : {
        "tags" : [ "usergroups" ],
        "description" : "Create a User Group",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.create"
        },
        "operationId" : "usergroups_create",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsergroupsCreateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsCreateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsCreateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:write" ]
        } ]
      }
    },
    "/usergroups.disable" : {
      "post" : {
        "tags" : [ "usergroups" ],
        "description" : "Disable an existing User Group",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.disable"
        },
        "operationId" : "usergroups_disable",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsergroupsDisableBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsDisableResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsDisableErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:write" ]
        } ]
      }
    },
    "/usergroups.enable" : {
      "post" : {
        "tags" : [ "usergroups" ],
        "description" : "Enable a User Group",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.enable"
        },
        "operationId" : "usergroups_enable",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsergroupsEnableBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsEnableResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsEnableErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:write" ]
        } ]
      }
    },
    "/usergroups.list" : {
      "get" : {
        "tags" : [ "usergroups" ],
        "description" : "List all User Groups for a team",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.list"
        },
        "operationId" : "usergroups_list",
        "parameters" : [ {
          "name" : "include_users",
          "in" : "query",
          "description" : "Include the list of users for each User Group",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeUsers"
        }, {
          "name" : "include_count",
          "in" : "query",
          "description" : "Include the number of users in each User Group",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeCount"
        }, {
          "name" : "include_disabled",
          "in" : "query",
          "description" : "Include disabled User Groups",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeDisabled"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "usergroups" : [ {
                        "auto_type" : "admin",
                        "created_by" : "USLACKBOT",
                        "date_create" : 1446598059,
                        "date_delete" : 0,
                        "date_update" : 1446670362,
                        "deleted_by" : null,
                        "description" : "A group of all Administrators on your team.",
                        "handle" : "admins",
                        "id" : "S0614TZR7",
                        "is_external" : false,
                        "is_usergroup" : true,
                        "name" : "Team Admins",
                        "prefs" : {
                          "channels" : [ ],
                          "groups" : [ ]
                        },
                        "team_id" : "T060RNRCH",
                        "updated_by" : "U060RNRCZ",
                        "user_count" : "2"
                      }, {
                        "auto_type" : "owner",
                        "created_by" : "USLACKBOT",
                        "date_create" : 1446678371,
                        "date_delete" : 0,
                        "date_update" : 1446678371,
                        "deleted_by" : null,
                        "description" : "A group of all Owners on your team.",
                        "handle" : "owners",
                        "id" : "S06158AV7",
                        "is_external" : false,
                        "is_usergroup" : true,
                        "name" : "Team Owners",
                        "prefs" : {
                          "channels" : [ ],
                          "groups" : [ ]
                        },
                        "team_id" : "T060RNRCH",
                        "updated_by" : "USLACKBOT",
                        "user_count" : "1"
                      }, {
                        "auto_type" : null,
                        "created_by" : "U060RNRCZ",
                        "date_create" : 1446746793,
                        "date_delete" : 1446748865,
                        "date_update" : 1446747767,
                        "deleted_by" : null,
                        "description" : "Marketing gurus, PR experts and product advocates.",
                        "handle" : "marketing-team",
                        "id" : "S0615G0KT",
                        "is_external" : false,
                        "is_usergroup" : true,
                        "name" : "Marketing Team",
                        "prefs" : {
                          "channels" : [ ],
                          "groups" : [ ]
                        },
                        "team_id" : "T060RNRCH",
                        "updated_by" : "U060RNRCZ",
                        "user_count" : "0"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:read" ]
        } ]
      }
    },
    "/usergroups.update" : {
      "post" : {
        "tags" : [ "usergroups" ],
        "description" : "Update an existing User Group",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.update"
        },
        "operationId" : "usergroups_update",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsergroupsUpdateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsUpdateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "usergroup" : {
                        "auto_type" : null,
                        "created_by" : "U060R4BJ4",
                        "date_create" : 1447096577,
                        "date_delete" : 0,
                        "date_update" : 1447102109,
                        "deleted_by" : null,
                        "description" : "Marketing gurus, PR experts and product advocates.",
                        "handle" : "marketing-team",
                        "id" : "S0616NG6M",
                        "is_external" : false,
                        "is_usergroup" : true,
                        "name" : "Marketing Team",
                        "prefs" : {
                          "channels" : [ ],
                          "groups" : [ ]
                        },
                        "team_id" : "T060R4BHN",
                        "updated_by" : "U060R4BJ4",
                        "user_count" : 1,
                        "users" : [ "U060R4BJ4", "U060RNRCZ" ]
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsUpdateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:write" ]
        } ]
      }
    },
    "/usergroups.users.list" : {
      "get" : {
        "tags" : [ "usergroups.users", "usergroups" ],
        "description" : "List all users in a User Group",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.users.list"
        },
        "operationId" : "usergroups_users_list",
        "parameters" : [ {
          "name" : "include_disabled",
          "in" : "query",
          "description" : "Allow results that involve disabled User Groups",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeDisabled"
        }, {
          "name" : "usergroup",
          "in" : "query",
          "description" : "The encoded ID of the User Group to update",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard success response when used with a user token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsUsersListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "users" : [ "U060R4BJ4", "W123A4BC5" ]
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Standard failure response when used with an invalid token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsUsersListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:read" ]
        } ]
      }
    },
    "/usergroups.users.update" : {
      "post" : {
        "tags" : [ "usergroups.users", "usergroups" ],
        "description" : "Update the list of users for a User Group",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/usergroups.users.update"
        },
        "operationId" : "usergroups_users_update",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsergroupsUsersUpdateBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsUsersUpdateResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "usergroup" : {
                        "auto_type" : null,
                        "created_by" : "U060R4BJ4",
                        "date_create" : 1447096577,
                        "date_delete" : 0,
                        "date_update" : 1447102109,
                        "deleted_by" : null,
                        "description" : "Marketing gurus, PR experts and product advocates.",
                        "handle" : "marketing-team",
                        "id" : "S0616NG6M",
                        "is_external" : false,
                        "is_usergroup" : true,
                        "name" : "Marketing Team",
                        "prefs" : {
                          "channels" : [ ],
                          "groups" : [ ]
                        },
                        "team_id" : "T060R4BHN",
                        "updated_by" : "U060R4BJ4",
                        "user_count" : 1,
                        "users" : [ "U060R4BJ4", "U060RNRCZ" ]
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsergroupsUsersUpdateErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "usergroups:write" ]
        } ]
      }
    },
    "/users.conversations" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "List conversations the calling user may access.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.conversations"
        },
        "operationId" : "users_conversations",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "types",
          "in" : "query",
          "description" : "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "exclude_archived",
          "in" : "query",
          "description" : "Set to `true` to exclude archived channels from the list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "excludeArchived"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersConversationsResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "channels" : [ {
                        "created" : 1449252889,
                        "creator" : "U012A3CDE",
                        "id" : "C012AB3CD",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : true,
                        "is_group" : false,
                        "is_im" : false,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "name" : "general",
                        "name_normalized" : "general",
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "This channel is for team-wide communication and announcements. All team members are in this channel."
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "Company-wide announcements and work-based matters"
                        },
                        "unlinked" : 0
                      }, {
                        "created" : 1449252889,
                        "creator" : "U061F7AUR",
                        "id" : "C061EG9T2",
                        "is_archived" : false,
                        "is_channel" : true,
                        "is_ext_shared" : false,
                        "is_general" : false,
                        "is_group" : false,
                        "is_im" : false,
                        "is_mpim" : false,
                        "is_org_shared" : false,
                        "is_pending_ext_shared" : false,
                        "is_private" : false,
                        "is_shared" : false,
                        "name" : "random",
                        "name_normalized" : "random",
                        "pending_shared" : [ ],
                        "previous_names" : [ ],
                        "purpose" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."
                        },
                        "topic" : {
                          "creator" : "",
                          "last_set" : 0,
                          "value" : "Non-work banter and water cooler conversation"
                        },
                        "unlinked" : 0
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "dGVhbTpDMDYxRkE1UEI="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersConversationsErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "channels:read", "groups:read", "im:read", "mpim:read" ]
        } ]
      }
    },
    "/users.deletePhoto" : {
      "post" : {
        "tags" : [ "users" ],
        "description" : "Delete the user profile photo",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.deletePhoto"
        },
        "operationId" : "users_deletePhoto",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsersDeletePhotoBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDeletePhotoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersDeletePhotoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users.profile:write" ]
        } ]
      }
    },
    "/users.getPresence" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "Gets user presence information.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.getPresence"
        },
        "operationId" : "users_getPresence",
        "parameters" : [ {
          "name" : "user",
          "in" : "query",
          "description" : "User to get presence info on. Defaults to the authed user",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "When requesting information for a different user, this method just returns the current presence (either `active` or `away`)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/APIMethodUsersGetPresence"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "presence" : "active"
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersCountsErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:read" ]
        } ]
      }
    },
    "/users.identity" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "Get a user's identity.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.identity"
        },
        "operationId" : "users_identity",
        "responses" : {
          "200" : {
            "description" : "You will receive at a minimum the following information:",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "UsersIdentityResponse",
                  "type" : "array",
                  "description" : "Schema for successful response from users.identity method",
                  "items" : {
                    "$ref" : "#/components/schemas/InlineResponseItems2002"
                  }
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "team" : {
                        "id" : "T0G9PQBBK"
                      },
                      "user" : {
                        "id" : "U0G9QF9C6",
                        "name" : "Sonny Whether"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersIdentityErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "account_inactive",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "identity.basic" ]
        } ]
      }
    },
    "/users.info" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "Gets information about a user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.info"
        },
        "operationId" : "users_info",
        "parameters" : [ {
          "name" : "include_locale",
          "in" : "query",
          "description" : "Set this to `true` to receive the locale for this user. Defaults to `false`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeLocale"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User to get info on",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersInfoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "user" : {
                        "color" : "9f69e7",
                        "deleted" : false,
                        "has_2fa" : false,
                        "id" : "W012A3CDE",
                        "is_admin" : true,
                        "is_app_user" : false,
                        "is_bot" : false,
                        "is_owner" : false,
                        "is_primary_owner" : false,
                        "is_restricted" : false,
                        "is_ultra_restricted" : false,
                        "name" : "spengler",
                        "profile" : {
                          "avatar_hash" : "ge3b51ca72de",
                          "display_name" : "spengler",
                          "display_name_normalized" : "spengler",
                          "email" : "spengler@ghostbusters.example.com",
                          "image_192" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_24" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_32" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_48" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_512" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_72" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_original" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "real_name" : "Egon Spengler",
                          "real_name_normalized" : "Egon Spengler",
                          "status_emoji" : ":books:",
                          "status_text" : "Print is dead",
                          "team" : "T012AB3C4"
                        },
                        "real_name" : "Egon Spengler",
                        "team_id" : "T012AB3C4",
                        "tz" : "America/Los_Angeles",
                        "tz_label" : "Pacific Daylight Time",
                        "tz_offset" : -25200,
                        "updated" : 1502138686
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersInfoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "user_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:read" ]
        } ]
      }
    },
    "/users.list" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "Lists all users in a Slack team.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.list"
        },
        "operationId" : "users_list",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include_locale",
          "in" : "query",
          "description" : "Set this to `true` to receive the locale for users. Defaults to `false`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeLocale"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersListResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "cache_ts" : 1498777272,
                      "members" : [ {
                        "color" : "9f69e7",
                        "deleted" : false,
                        "has_2fa" : false,
                        "id" : "W012A3CDE",
                        "is_admin" : true,
                        "is_app_user" : false,
                        "is_bot" : false,
                        "is_owner" : false,
                        "is_primary_owner" : false,
                        "is_restricted" : false,
                        "is_ultra_restricted" : false,
                        "name" : "spengler",
                        "profile" : {
                          "avatar_hash" : "ge3b51ca72de",
                          "display_name" : "spengler",
                          "display_name_normalized" : "spengler",
                          "email" : "spengler@ghostbusters.example.com",
                          "image_192" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_24" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_32" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_48" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_512" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_72" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "real_name" : "Egon Spengler",
                          "real_name_normalized" : "Egon Spengler",
                          "status_emoji" : ":books:",
                          "status_text" : "Print is dead",
                          "team" : "T012AB3C4"
                        },
                        "real_name" : "spengler",
                        "team_id" : "T012AB3C4",
                        "tz" : "America/Los_Angeles",
                        "tz_label" : "Pacific Daylight Time",
                        "tz_offset" : -25200,
                        "updated" : 1502138686
                      }, {
                        "color" : "9f69e7",
                        "deleted" : false,
                        "has_2fa" : false,
                        "id" : "W07QCRPA4",
                        "is_admin" : true,
                        "is_bot" : false,
                        "is_owner" : false,
                        "is_primary_owner" : false,
                        "is_restricted" : false,
                        "is_ultra_restricted" : false,
                        "name" : "glinda",
                        "profile" : {
                          "avatar_hash" : "8fbdd10b41c6",
                          "display_name" : "Glinda the Fairly Good",
                          "display_name_normalized" : "Glinda the Fairly Good",
                          "email" : "glenda@south.oz.coven",
                          "first_name" : "Glinda",
                          "image_1024" : "https://a.slack-edge.com...png",
                          "image_192" : "https://a.slack-edge.com...png",
                          "image_24" : "https://a.slack-edge.com...png",
                          "image_32" : "https://a.slack-edge.com...png",
                          "image_48" : "https://a.slack-edge.com...png",
                          "image_512" : "https://a.slack-edge.com...png",
                          "image_72" : "https://a.slack-edge.com...png",
                          "image_original" : "https://a.slack-edge.com...png",
                          "last_name" : "Southgood",
                          "phone" : "",
                          "real_name" : "Glinda Southgood",
                          "real_name_normalized" : "Glinda Southgood",
                          "skype" : "",
                          "title" : "Glinda the Good"
                        },
                        "real_name" : "Glinda Southgood",
                        "team_id" : "T0G9PQBBK",
                        "tz" : "America/Los_Angeles",
                        "tz_label" : "Pacific Daylight Time",
                        "tz_offset" : -25200,
                        "updated" : 1480527098
                      } ],
                      "ok" : true,
                      "response_metadata" : {
                        "next_cursor" : "dXNlcjpVMEc5V0ZYTlo="
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersListErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_cursor",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:read" ]
        } ]
      }
    },
    "/users.lookupByEmail" : {
      "get" : {
        "tags" : [ "users" ],
        "description" : "Find a user with an email address.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.lookupByEmail"
        },
        "operationId" : "users_lookupByEmail",
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "An email address belonging to a user in the workspace",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersLookupByEmailResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "user" : {
                        "color" : "9f69e7",
                        "deleted" : false,
                        "has_2fa" : false,
                        "id" : "W012A3CDE",
                        "is_admin" : true,
                        "is_app_user" : false,
                        "is_bot" : false,
                        "is_owner" : false,
                        "is_primary_owner" : false,
                        "is_restricted" : false,
                        "is_ultra_restricted" : false,
                        "name" : "spengler",
                        "profile" : {
                          "avatar_hash" : "ge3b51ca72de",
                          "display_name" : "spengler",
                          "display_name_normalized" : "spengler",
                          "email" : "spengler@ghostbusters.example.com",
                          "image_192" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_24" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_32" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_48" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_512" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "image_72" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                          "real_name" : "Egon Spengler",
                          "real_name_normalized" : "Egon Spengler",
                          "status_emoji" : ":books:",
                          "status_text" : "Print is dead",
                          "team" : "T012AB3C4"
                        },
                        "real_name" : "Egon Spengler",
                        "team_id" : "T012AB3C4",
                        "tz" : "America/Los_Angeles",
                        "tz_label" : "Pacific Daylight Time",
                        "tz_offset" : -25200,
                        "updated" : 1502138686
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersLookupByEmailErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "users_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:read.email" ]
        } ]
      }
    },
    "/users.profile.get" : {
      "get" : {
        "tags" : [ "users.profile", "users" ],
        "description" : "Retrieves a user's profile information.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.profile.get"
        },
        "operationId" : "users_profile_get",
        "parameters" : [ {
          "name" : "include_labels",
          "in" : "query",
          "description" : "Include labels for each ID in custom profile fields",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          },
          "x-ballerina-name" : "includeLabels"
        }, {
          "name" : "user",
          "in" : "query",
          "description" : "User to retrieve profile info for",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersProfileGetResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "profile" : {
                        "avatar_hash" : "ge3b51ca72de",
                        "display_name" : "spengler",
                        "display_name_normalized" : "spengler",
                        "email" : "spengler@ghostbusters.example.com",
                        "image_192" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_24" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_32" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_48" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_512" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_72" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_original" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "real_name" : "Egon Spengler",
                        "real_name_normalized" : "Egon Spengler",
                        "status_emoji" : ":books:",
                        "status_expiration" : 0,
                        "status_text" : "Print is dead",
                        "team" : "T012AB3C4"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersProfileGetErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "user_not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users.profile:read" ]
        } ]
      }
    },
    "/users.profile.set" : {
      "post" : {
        "tags" : [ "users.profile", "users" ],
        "description" : "Set the profile information for a user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.profile.set"
        },
        "operationId" : "users_profile_set",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsersProfileSetBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersProfileSetResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "profile" : {
                        "avatar_hash" : "ge3b51ca72de",
                        "display_name" : "spengler",
                        "display_name_normalized" : "spengler",
                        "email" : "spengler@ghostbusters.example.com",
                        "image_192" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_24" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_32" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_48" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_512" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "image_72" : "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                        "real_name" : "Egon Spengler",
                        "real_name_normalized" : "Egon Spengler",
                        "status_emoji" : ":books:",
                        "status_expiration" : 0,
                        "status_text" : "Print is dead",
                        "team" : "T012AB3C4"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersProfileSetErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_profile",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users.profile:write" ]
        } ]
      }
    },
    "/users.setActive" : {
      "post" : {
        "tags" : [ "users" ],
        "description" : "Marked a user as active. Deprecated and non-functional.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.setActive"
        },
        "operationId" : "users_setActive",
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersSetActiveResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersSetActiveErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:write" ]
        } ]
      }
    },
    "/users.setPhoto" : {
      "post" : {
        "tags" : [ "users" ],
        "description" : "Set the user profile photo",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.setPhoto"
        },
        "operationId" : "users_setPhoto",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsersSetPhotoBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersSetPhotoResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersSetPhotoErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users.profile:write" ]
        } ]
      }
    },
    "/users.setPresence" : {
      "post" : {
        "tags" : [ "users" ],
        "description" : "Manually sets user presence.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/users.setPresence"
        },
        "operationId" : "users_setPresence",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/UsersSetPresenceBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersSetPresenceResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UsersSetPresenceErrorResponse"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "users:write" ]
        } ]
      }
    },
    "/views.open" : {
      "get" : {
        "tags" : [ "views" ],
        "description" : "Open a view for a user.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/views.open"
        },
        "operationId" : "views_open",
        "parameters" : [ {
          "name" : "trigger_id",
          "in" : "query",
          "description" : "Exchange a trigger to post to the user",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "triggerId"
        }, {
          "name" : "view",
          "in" : "query",
          "description" : "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response includes the opened view payload",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse66"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "view" : {
                        "app_id" : "AA4928AQ",
                        "blocks" : [ {
                          "block_id" : "a_block_id",
                          "element" : {
                            "action_id" : "an_action_id",
                            "type" : "plain_text_input"
                          },
                          "label" : {
                            "emoji" : true,
                            "text" : "A simple label",
                            "type" : "plain_text"
                          },
                          "optional" : false,
                          "type" : "input"
                        } ],
                        "bot_id" : "BA13894H",
                        "callback_id" : "identify_your_modals",
                        "clear_on_close" : false,
                        "external_id" : "",
                        "hash" : "156772938.1827394",
                        "id" : "VMHU10V25",
                        "notify_on_close" : false,
                        "private_metadata" : "Shh it is a secret",
                        "root_view_id" : "VMHU10V25",
                        "state" : {
                          "values" : { }
                        },
                        "submit" : {
                          "text" : "Create",
                          "type" : "plain_text"
                        },
                        "team_id" : "T8N4K1JN",
                        "title" : {
                          "text" : "Quite a plain modal",
                          "type" : "plain_text"
                        },
                        "type" : "modal"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response, before getting to any possible validation errors.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate66"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_arguments",
                      "ok" : false,
                      "response_metadata" : {
                        "messages" : [ "invalid `trigger_id`" ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/views.publish" : {
      "get" : {
        "tags" : [ "views" ],
        "description" : "Publish a static view for a User.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/views.publish"
        },
        "operationId" : "views_publish",
        "parameters" : [ {
          "name" : "user_id",
          "in" : "query",
          "description" : "`id` of the user you want publish a view to",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "userId"
        }, {
          "name" : "view",
          "in" : "query",
          "description" : "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "hash",
          "in" : "query",
          "description" : "A string that represents view state to protect against possible race conditions",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response includes the published view payload",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse67"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "view" : {
                        "app_id" : "AA4928AQ",
                        "blocks" : [ {
                          "block_id" : "2WGp9",
                          "text" : {
                            "text" : "A simple section with some sample sentence.",
                            "type" : "mrkdwn",
                            "verbatim" : false
                          },
                          "type" : "section"
                        } ],
                        "bot_id" : "BA13894H",
                        "callback_id" : "identify_your_home_tab",
                        "clear_on_close" : false,
                        "close" : null,
                        "external_id" : "",
                        "hash" : "156772938.1827394",
                        "id" : "VMHU10V25",
                        "notify_on_close" : false,
                        "previous_view_id" : null,
                        "private_metadata" : "Shh it is a secret",
                        "root_view_id" : "VMHU10V25",
                        "state" : {
                          "values" : { }
                        },
                        "submit" : null,
                        "team_id" : "T8N4K1JN",
                        "type" : "home"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response, before getting to any possible validation errors.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate67"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_arguments",
                      "ok" : false,
                      "response_metadata" : {
                        "messages" : [ "invalid `user_id`" ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/views.push" : {
      "get" : {
        "tags" : [ "views" ],
        "description" : "Push a view onto the stack of a root view.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/views.push"
        },
        "operationId" : "views_push",
        "parameters" : [ {
          "name" : "trigger_id",
          "in" : "query",
          "description" : "Exchange a trigger to post to the user",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "triggerId"
        }, {
          "name" : "view",
          "in" : "query",
          "description" : "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response includes the pushed view payload",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse68"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "view" : {
                        "app_id" : "AAD3351BQ",
                        "blocks" : [ {
                          "block_id" : "edit_details",
                          "element" : {
                            "action_id" : "detail_input",
                            "type" : "plain_text_input"
                          },
                          "label" : {
                            "text" : "Edit details",
                            "type" : "plain_text"
                          },
                          "type" : "input"
                        } ],
                        "bot_id" : "BADF7A34H",
                        "callback_id" : "view_4",
                        "clear_on_close" : true,
                        "close" : {
                          "emoji" : true,
                          "text" : "Back",
                          "type" : "plain_text"
                        },
                        "external_id" : "",
                        "hash" : "1569362015.55b5e41b",
                        "id" : "VNM522E2U",
                        "notify_on_close" : false,
                        "previous_view_id" : null,
                        "private_metadata" : "",
                        "root_view_id" : "VNN729E3U",
                        "state" : {
                          "values" : { }
                        },
                        "submit" : {
                          "emoji" : true,
                          "text" : "Save",
                          "type" : "plain_text"
                        },
                        "team_id" : "T9M4RL1JM",
                        "title" : {
                          "emoji" : true,
                          "text" : "Pushed Modal",
                          "type" : "plain_text"
                        },
                        "type" : "modal"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate68"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_arguments",
                      "ok" : false,
                      "response_metadata" : {
                        "messages" : [ "missing required field: title" ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/views.update" : {
      "get" : {
        "tags" : [ "views" ],
        "description" : "Update an existing view.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/views.update"
        },
        "operationId" : "views_update",
        "parameters" : [ {
          "name" : "view_id",
          "in" : "query",
          "description" : "A unique identifier of the view to be updated. Either `view_id` or `external_id` is required",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "viewId"
        }, {
          "name" : "external_id",
          "in" : "query",
          "description" : "A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "externalId"
        }, {
          "name" : "view",
          "in" : "query",
          "description" : "A [view object](/reference/surfaces/views). This must be a JSON-encoded string",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "hash",
          "in" : "query",
          "description" : "A string that represents view state to protect against possible race conditions",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response includes the updated view payload",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse69"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true,
                      "view" : {
                        "app_id" : "AAD3351BQ",
                        "blocks" : [ {
                          "accessory" : {
                            "action_id" : "button_4",
                            "text" : {
                              "text" : "Click me",
                              "type" : "plain_text"
                            },
                            "type" : "button"
                          },
                          "block_id" : "s_block",
                          "text" : {
                            "emoji" : true,
                            "text" : "I am but an updated modal",
                            "type" : "plain_text"
                          },
                          "type" : "section"
                        } ],
                        "bot_id" : "BADF7A34H",
                        "callback_id" : "view_2",
                        "clear_on_close" : true,
                        "close" : {
                          "emoji" : true,
                          "text" : "Close",
                          "type" : "plain_text"
                        },
                        "external_id" : "",
                        "hash" : "1569262015.55b5e41b",
                        "id" : "VNM522E2U",
                        "notify_on_close" : false,
                        "previous_view_id" : null,
                        "private_metadata" : "",
                        "root_view_id" : "VNN729E3U",
                        "state" : {
                          "values" : { }
                        },
                        "submit" : null,
                        "team_id" : "T9M4RL1JM",
                        "title" : {
                          "emoji" : true,
                          "text" : "Updated Modal",
                          "type" : "plain_text"
                        },
                        "type" : "modal"
                      }
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate69"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "not_found",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "none" ]
        } ]
      }
    },
    "/workflows.stepCompleted" : {
      "get" : {
        "tags" : [ "workflows" ],
        "description" : "Indicate that an app's step in a workflow completed execution.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/workflows.stepCompleted"
        },
        "operationId" : "workflows_stepCompleted",
        "parameters" : [ {
          "name" : "workflow_step_execute_id",
          "in" : "query",
          "description" : "Context identifier that maps to the correct workflow step execution",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "workflowStepExecuteId"
        }, {
          "name" : "outputs",
          "in" : "query",
          "description" : "Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse70"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate70"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "workflow.steps:execute" ]
        } ]
      }
    },
    "/workflows.stepFailed" : {
      "get" : {
        "tags" : [ "workflows" ],
        "description" : "Indicate that an app's step in a workflow failed to execute.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/workflows.stepFailed"
        },
        "operationId" : "workflows_stepFailed",
        "parameters" : [ {
          "name" : "workflow_step_execute_id",
          "in" : "query",
          "description" : "Context identifier that maps to the correct workflow step execution",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "workflowStepExecuteId"
        }, {
          "name" : "error",
          "in" : "query",
          "description" : "A JSON-based object with a `message` property that should contain a human readable error message",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse71"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate71"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "workflow.steps:execute" ]
        } ]
      }
    },
    "/workflows.updateStep" : {
      "get" : {
        "tags" : [ "workflows" ],
        "description" : "Update the configuration for a workflow extension step.",
        "externalDocs" : {
          "description" : "API method documentation",
          "url" : "https://api.slack.com/methods/workflows.updateStep"
        },
        "operationId" : "workflows_updateStep",
        "parameters" : [ {
          "name" : "workflow_step_edit_id",
          "in" : "query",
          "description" : "A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "workflowStepEditId"
        }, {
          "name" : "inputs",
          "in" : "query",
          "description" : "A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "outputs",
          "in" : "query",
          "description" : "An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "step_name",
          "in" : "query",
          "description" : "An optional field that can be used to override the step name that is shown in the Workflow Builder",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "stepName"
        }, {
          "name" : "step_image_url",
          "in" : "query",
          "description" : "An optional field that can be used to override app image that is shown in the Workflow Builder",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "x-ballerina-name" : "stepImageUrl"
        } ],
        "responses" : {
          "200" : {
            "description" : "Typical success response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultSuccessResponse72"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "ok" : true
                    }
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "Typical error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorTemplate72"
                },
                "examples" : {
                  "response" : {
                    "value" : {
                      "error" : "invalid_auth",
                      "ok" : false
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "slackAuth" : [ "workflow.steps:execute" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "DefaultErrorTemplate22" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate21" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "TzAnyOf11" : {
        "nullable" : true
      },
      "DefaultErrorTemplate24" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate23" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate26" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate25" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate28" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate27" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsOpenResponseChannel" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/ConversationObj"
        }, {
          "$ref" : "#/components/schemas/ChannelAnyOf2"
        } ]
      },
      "DefaultErrorTemplate29" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "NilBotIdSetWhenDisplayAsBotIsFalse" : {
        "title" : "Nil bot_id set when display_as_bot is false",
        "nullable" : true
      },
      "UsergroupsUsersListResponse" : {
        "title" : "UsergroupsUsersListResponse",
        "required" : [ "ok", "users" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.users.list method"
      },
      "UsersProfileSetResponse" : {
        "title" : "UsersProfileSetResponse",
        "required" : [ "ok", "profile", "username" ],
        "type" : "object",
        "properties" : {
          "profile" : {
            "$ref" : "#/components/schemas/UserProfileObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "email_pending" : {
            "type" : "string",
            "format" : "email",
            "x-ballerina-name" : "emailPending"
          },
          "username" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.profile.set method"
      },
      "DeprecationWarningAndPagingStyleTogether" : {
        "title" : "deprecation_warning and paging style together",
        "required" : [ "messages", "next_cursor", "warnings" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          },
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "method_deprecated" ]
            }
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "FilesSharedPublicURLBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "File to share"
          }
        }
      },
      "AdminUsersSetAdminBody" : {
        "required" : [ "team_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user to designate as an admin",
            "x-ballerina-name" : "userId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "DefaultErrorTemplate" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DndInfoResponse" : {
        "title" : "DndInfoResponse",
        "required" : [ "dnd_enabled", "next_dnd_end_ts", "next_dnd_start_ts", "ok" ],
        "type" : "object",
        "properties" : {
          "next_dnd_end_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "nextDndEndTs"
          },
          "snooze_endtime" : {
            "type" : "integer",
            "x-ballerina-name" : "snoozeEndtime"
          },
          "dnd_enabled" : {
            "type" : "boolean",
            "x-ballerina-name" : "dndEnabled"
          },
          "next_dnd_start_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "nextDndStartTs"
          },
          "snooze_enabled" : {
            "type" : "boolean",
            "x-ballerina-name" : "snoozeEnabled"
          },
          "snooze_remaining" : {
            "type" : "integer",
            "x-ballerina-name" : "snoozeRemaining"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from dnd.info method"
      },
      "ConversationsCloseBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Conversation to close"
          }
        }
      },
      "FilesListErrorResponse" : {
        "title" : "FilesListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "user_not_found", "unknown_type", "not_authed", "invalid_auth", "account_inactive", "no_permission", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from files.list method"
      },
      "AppsPermissionsInfoResponseInfoChannel" : {
        "type" : "object",
        "properties" : {
          "resources" : {
            "$ref" : "#/components/schemas/ResourcesObj"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        }
      },
      "DefaultErrorTemplate31" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ChatScheduledMessagesListErrorResponse" : {
        "title" : "ChatScheduledMessagesListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_channel", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.scheduledMessages.list method"
      },
      "DefaultErrorTemplate30" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsInviteBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "The ID of the public or private channel to invite user(s) to"
          },
          "users" : {
            "type" : "string",
            "description" : "A comma separated list of user IDs. Up to 1000 users may be listed"
          }
        }
      },
      "UsersDeletePhotoBody" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `users.profile:write`"
          }
        }
      },
      "AdminConversationsUnarchiveResponse" : {
        "title" : "AdminConversationsUnarchiveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.unarchive"
      },
      "DefaultErrorTemplate33" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate32" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DiscoverableDiscoverableAnyOf12" : {
        "type" : "string"
      },
      "TzTzAnyOf112" : {
        "type" : "string"
      },
      "DefaultErrorTemplate35" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate34" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate37" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "RtmConnectResponseTeam" : {
        "required" : [ "domain", "id", "name" ],
        "type" : "object",
        "properties" : {
          "domain" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/TeamDef"
          }
        },
        "additionalProperties" : false
      },
      "DefaultErrorTemplate36" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ChatDeleteResponse" : {
        "title" : "ChatDeleteResponse",
        "required" : [ "channel", "ok", "ts" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "ts" : {
            "$ref" : "#/components/schemas/TsDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of chat.delete method"
      },
      "AdminConversationsArchiveResponse" : {
        "title" : "AdminConversationsArchiveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.archive"
      },
      "AdminTeamsSettingsSetDiscoverabilityBody" : {
        "required" : [ "discoverability", "team_id" ],
        "type" : "object",
        "properties" : {
          "discoverability" : {
            "type" : "string",
            "description" : "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID of the workspace to set discoverability on",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "DefaultErrorTemplate39" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ChatPostEphemeralResponse" : {
        "title" : "ChatPostEphemeralResponse",
        "required" : [ "message_ts", "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "message_ts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "messageTs"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from chat.postEphemeral method"
      },
      "MessageObjBotId" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/BotIdDef"
        }, {
          "$ref" : "#/components/schemas/NilBotIdSetWhenDisplayAsBotIsFalse"
        } ]
      },
      "DefaultErrorTemplate38" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "UsergroupsEnableResponse" : {
        "title" : "UsergroupsEnableResponse",
        "required" : [ "ok", "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "$ref" : "#/components/schemas/SubteamObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.enable method"
      },
      "ConversationsCloseErrorResponse" : {
        "title" : "ConversationsCloseErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "channel_not_found", "user_does_not_own_channel", "missing_scope", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.close method"
      },
      "ChatUnfurlBody" : {
        "required" : [ "channel", "ts" ],
        "type" : "object",
        "properties" : {
          "unfurls" : {
            "type" : "string",
            "description" : "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments"
          },
          "user_auth_message" : {
            "type" : "string",
            "description" : "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior",
            "x-ballerina-name" : "userAuthMessage"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel ID of the message"
          },
          "user_auth_url" : {
            "type" : "string",
            "description" : "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded",
            "x-ballerina-name" : "userAuthUrl"
          },
          "user_auth_required" : {
            "type" : "boolean",
            "description" : "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain",
            "x-ballerina-name" : "userAuthRequired"
          },
          "ts" : {
            "type" : "string",
            "description" : "Timestamp of the message to add unfurl behavior to"
          }
        }
      },
      "FilesSharedPublicURLErrorResponse" : {
        "title" : "FilesSharedPublicURLErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "file_not_found", "not_allowed", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from files.sharedPublicURL method"
      },
      "FilesRemoteUpdateBody" : {
        "type" : "object",
        "properties" : {
          "filetype" : {
            "type" : "string",
            "description" : "type of file"
          },
          "external_url" : {
            "type" : "string",
            "description" : "URL of the remote file",
            "x-ballerina-name" : "externalUrl"
          },
          "file" : {
            "type" : "string",
            "description" : "Specify a file by providing its ID"
          },
          "preview_image" : {
            "type" : "string",
            "description" : "Preview of the document via `multipart/form-data`",
            "x-ballerina-name" : "previewImage"
          },
          "external_id" : {
            "type" : "string",
            "description" : "Creator defined GUID for the file",
            "x-ballerina-name" : "externalId"
          },
          "indexable_file_contents" : {
            "type" : "string",
            "description" : "File containing contents that can be used to improve searchability for the remote file",
            "x-ballerina-name" : "indexableFileContents"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the file being shared"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `remote_files:write`"
          }
        }
      },
      "BlocksInner" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          }
        },
        "additionalProperties" : true
      },
      "TsDef" : {
        "title" : "Timestamp in format 0123456789.012345",
        "pattern" : "^\\d{10}\\.\\d{6}$",
        "type" : "string"
      },
      "TeamProfileFieldObj" : {
        "required" : [ "hint", "id", "label", "ordering", "type" ],
        "type" : "object",
        "properties" : {
          "ordering" : {
            "type" : "number"
          },
          "hint" : {
            "type" : "string"
          },
          "possible_values" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            },
            "x-ballerina-name" : "possibleValues"
          },
          "is_hidden" : {
            "type" : "boolean",
            "x-ballerina-name" : "isHidden"
          },
          "options" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamProfileFieldObjOptions"
            }
          },
          "id" : {
            "pattern" : "^X[a-zA-Z0-9]{9,}$",
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "text", "date", "link", "mailto", "options_list", "user" ]
          },
          "field_name" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "fieldName"
          }
        },
        "additionalProperties" : false
      },
      "UsergroupsUsersListErrorResponse" : {
        "title" : "UsergroupsUsersListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_require", "fatal_error", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.users.list method"
      },
      "AuthRevokeResponse" : {
        "title" : "AuthRevokeResponse",
        "required" : [ "ok", "revoked" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "revoked" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from auth.revoke method"
      },
      "AdminTeamsSettingsSetDefaultChannelsBody" : {
        "required" : [ "channel_ids", "team_id", "token" ],
        "type" : "object",
        "properties" : {
          "channel_ids" : {
            "type" : "string",
            "description" : "An array of channel IDs",
            "x-ballerina-name" : "channelIds"
          },
          "team_id" : {
            "type" : "string",
            "description" : "ID for the workspace to set the default channel for",
            "x-ballerina-name" : "teamId"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.teams:write`"
          }
        }
      },
      "DefaultErrorTemplate40" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate42" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate41" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate44" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate43" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate46" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate45" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "AppsPermissionsInfoErrorResponse" : {
        "title" : "AppsPermissionsInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from apps.permissions.info method"
      },
      "DefaultErrorTemplate48" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "EnterpriseIdDef" : {
        "title" : "Enterprise ID",
        "pattern" : "^[E][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "DefaultErrorTemplate47" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate49" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ChannelAnyOf2" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "last_read" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "lastRead"
          },
          "unread_count" : {
            "type" : "number",
            "x-ballerina-name" : "unreadCount"
          },
          "is_im" : {
            "type" : "boolean",
            "x-ballerina-name" : "isIm"
          },
          "is_open" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOpen"
          },
          "created" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/DmIdDef"
          },
          "unread_count_display" : {
            "type" : "number",
            "x-ballerina-name" : "unreadCountDisplay"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "latest" : {
            "$ref" : "#/components/schemas/MessageObj"
          }
        },
        "additionalProperties" : false
      },
      "TeamObj" : {
        "title" : "Team Object",
        "required" : [ "domain", "email_domain", "icon", "id", "name" ],
        "type" : "object",
        "properties" : {
          "primary_owner" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PrimaryOwnerObj"
            } ],
            "x-ballerina-name" : "primaryOwner"
          },
          "is_enterprise" : {
            "type" : "integer",
            "x-ballerina-name" : "isEnterprise"
          },
          "icon" : {
            "$ref" : "#/components/schemas/IconObj"
          },
          "description" : {
            "type" : "string",
            "nullable" : true
          },
          "msg_edit_window_mins" : {
            "type" : "integer",
            "x-ballerina-name" : "msgEditWindowMins"
          },
          "avatar_base_url" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "avatarBaseUrl"
          },
          "sso_provider" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TeamObjSsoProvider"
            } ],
            "x-ballerina-name" : "ssoProvider"
          },
          "locale" : {
            "type" : "string"
          },
          "archived" : {
            "type" : "boolean"
          },
          "messages_count" : {
            "type" : "integer",
            "x-ballerina-name" : "messagesCount"
          },
          "pay_prod_cur" : {
            "type" : "string",
            "x-ballerina-name" : "payProdCur"
          },
          "id" : {
            "$ref" : "#/components/schemas/WorkspaceIdDef"
          },
          "is_over_storage_limit" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOverStorageLimit"
          },
          "plan" : {
            "type" : "string",
            "enum" : [ "", "std", "plus", "compliance", "enterprise" ]
          },
          "external_org_migrations" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ExternalOrgMigrationsObj"
            } ],
            "x-ballerina-name" : "externalOrgMigrations"
          },
          "over_integrations_limit" : {
            "type" : "boolean",
            "x-ballerina-name" : "overIntegrationsLimit"
          },
          "created" : {
            "type" : "integer"
          },
          "is_assigned" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAssigned"
          },
          "limit_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "limitTs"
          },
          "enterprise_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseIdDef"
            } ],
            "x-ballerina-name" : "enterpriseId"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "has_compliance_export" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasComplianceExport"
          },
          "date_create" : {
            "type" : "integer",
            "x-ballerina-name" : "dateCreate"
          },
          "discoverable" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamObjDiscoverable"
            }
          },
          "domain" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email_domain" : {
            "type" : "string",
            "x-ballerina-name" : "emailDomain"
          },
          "enterprise_name" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseNameDef"
            } ],
            "x-ballerina-name" : "enterpriseName"
          },
          "over_storage_limit" : {
            "type" : "boolean",
            "x-ballerina-name" : "overStorageLimit"
          }
        },
        "additionalProperties" : false
      },
      "AppsUninstallResponse" : {
        "title" : "AppsUninstallResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from apps.uninstall method"
      },
      "ChatDeleteErrorResponse" : {
        "title" : "ChatDeleteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "message_not_found", "channel_not_found", "cant_delete_message", "compliance_exports_prevent_deletion", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.delete method"
      },
      "UsergroupsCreateResponse" : {
        "title" : "UsergroupsCreateResponse",
        "required" : [ "ok", "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "$ref" : "#/components/schemas/SubteamObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.create method"
      },
      "PinsRemoveResponse" : {
        "title" : "PinsRemoveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from pins.remove method"
      },
      "AdminConversationsCreateResponse" : {
        "title" : "AdminConversationsCreateResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "channel_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChannelIdDef"
            } ],
            "x-ballerina-name" : "channelId"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.create"
      },
      "AdminUsersRemoveBody" : {
        "required" : [ "team_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user to remove",
            "x-ballerina-name" : "userId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "ChannelObjPurpose" : {
        "required" : [ "creator", "last_set", "value" ],
        "type" : "object",
        "properties" : {
          "last_set" : {
            "type" : "integer",
            "x-ballerina-name" : "lastSet"
          },
          "creator" : {
            "$ref" : "#/components/schemas/TopicPurposeCreatorDef"
          },
          "value" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "AdminConversationsArchiveErrorResponse" : {
        "title" : "AdminConversationsArchiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "channel_not_found", "channel_type_not_supported", "default_org_wide_channel", "already_archived", "cant_archive_general", "restricted_action", "could_not_archive_channel" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.archive"
      },
      "DefaultErrorTemplate51" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObjParentConversation" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/ChannelDef"
        }, {
          "$ref" : "#/components/schemas/ParentConversationAnyOf2"
        } ]
      },
      "DefaultErrorTemplate50" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "UserObjTz1" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/TzAnyOf11"
        }, {
          "$ref" : "#/components/schemas/TzTzAnyOf112"
        } ]
      },
      "DefaultErrorTemplate53" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate52" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate55" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsListErrorResponse" : {
        "title" : "ConversationsListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "missing_scope", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.list method"
      },
      "DefaultErrorTemplate54" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate57" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "EnterpriseNameDef" : {
        "title" : "Name of the enterprise org",
        "type" : "string"
      },
      "DefaultErrorTemplate56" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate59" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate58" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "BotsInfoResponseBotIcons" : {
        "required" : [ "image_36", "image_48", "image_72" ],
        "type" : "object",
        "properties" : {
          "image_36" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image36"
          },
          "image_48" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image48"
          },
          "image_72" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image72"
          }
        },
        "additionalProperties" : false
      },
      "AdminConversationsCreateErrorResponse" : {
        "title" : "AdminConversationsCreateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "name_taken", "restricted_action", "team_not_found", "invalid_team", "invalid_name", "could_not_create_channel", "team_id_or_org_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.create"
      },
      "AdminConversationsUnarchiveErrorResponse2" : {
        "title" : "AdminConversationsUnarchiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "channel_not_found", "channel_not_archived", "channel_type_not_supported", "restricted_action", "could_not_unarchive_channel", "default_org_wide_channel", "missing_scope" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.unarchive"
      },
      "AdminConversationsUnarchiveErrorResponse1" : {
        "title" : "AdminConversationsUnarchiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "channel_not_found", "channel_type_not_supported", "restricted_action", "could_not_rename_channel", "default_org_wide_channel", "name_taken" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.rename"
      },
      "ConversationsInviteErrorResponse1Errors" : {
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "no_user", "cant_invite_self", "not_in_channel", "already_in_channel", "is_archived", "cant_invite", "too_many_users", "ura_max_channels", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "AppsPermissionsResourcesListResponseResponseMetadata" : {
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-examples" : [ "dGVhbTpDMUg5UkVTR0w=" ],
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "ParentConversationAnyOf22" : {
        "nullable" : true
      },
      "DefaultErrorTemplate60" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ParentConversationAnyOf21" : {
        "nullable" : true
      },
      "ConversationsRenameErrorResponse" : {
        "title" : "ConversationsRenameErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "user_is_restricted", "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_in_channel", "not_authorized", "invalid_name", "name_taken", "invalid_name_required", "invalid_name_punctuation", "invalid_name_maxlength", "invalid_name_specials", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.rename method"
      },
      "DefaultErrorTemplate62" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "UsersProfileSetErrorResponse" : {
        "title" : "UsersProfileSetErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "reserved_name", "invalid_profile", "profile_set_failed", "not_admin", "not_app_admin", "cannot_update_admin_user", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.profile.set method"
      },
      "DefaultErrorTemplate61" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate64" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate63" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate66" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObject" : {
        "title" : "Conversation object",
        "required" : [ "created", "creator", "id", "is_archived", "is_channel", "is_general", "is_group", "is_im", "is_mpim", "is_org_shared", "is_private", "is_shared", "name", "name_normalized", "purpose", "topic" ],
        "type" : "object",
        "properties" : {
          "is_global_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isGlobalShared"
          },
          "is_pending_ext_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPendingExtShared"
          },
          "pending_shared" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "pendingShared"
          },
          "internal_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "internalTeamIds"
          },
          "is_channel" : {
            "type" : "boolean",
            "x-ballerina-name" : "isChannel"
          },
          "members" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          },
          "is_non_threadable" : {
            "type" : "boolean",
            "x-ballerina-name" : "isNonThreadable"
          },
          "pin_count" : {
            "type" : "integer",
            "x-ballerina-name" : "pinCount"
          },
          "is_read_only" : {
            "type" : "boolean",
            "x-ballerina-name" : "isReadOnly"
          },
          "id" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "is_org_default" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOrgDefault"
          },
          "is_org_mandatory" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOrgMandatory"
          },
          "is_im" : {
            "type" : "boolean",
            "x-ballerina-name" : "isIm"
          },
          "is_member" : {
            "type" : "boolean",
            "x-ballerina-name" : "isMember"
          },
          "is_open" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOpen"
          },
          "created" : {
            "type" : "integer"
          },
          "display_counts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConversationObjDisplayCounts"
            } ],
            "x-ballerina-name" : "displayCounts"
          },
          "priority" : {
            "type" : "number"
          },
          "version" : {
            "type" : "integer"
          },
          "is_starred" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStarred"
          },
          "is_archived" : {
            "type" : "boolean",
            "x-ballerina-name" : "isArchived"
          },
          "name" : {
            "type" : "string"
          },
          "topic" : {
            "$ref" : "#/components/schemas/ConversationObjTopic"
          },
          "shared_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "sharedTeamIds"
          },
          "is_org_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOrgShared"
          },
          "is_private" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPrivate"
          },
          "accepted_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "acceptedUser"
          },
          "conversation_host_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            } ],
            "x-ballerina-name" : "conversationHostId"
          },
          "purpose" : {
            "$ref" : "#/components/schemas/ConversationObjPurpose"
          },
          "is_moved" : {
            "type" : "integer",
            "x-ballerina-name" : "isMoved"
          },
          "shares" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjShares"
            }
          },
          "unread_count" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCount"
          },
          "is_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isShared"
          },
          "previous_names" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelNameDef"
            },
            "x-ballerina-name" : "previousNames"
          },
          "connected_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            },
            "x-ballerina-name" : "connectedTeamIds"
          },
          "pending_connected_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "pendingConnectedTeamIds"
          },
          "latest" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjLatest"
            }
          },
          "has_pins" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasPins"
          },
          "last_read" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "lastRead"
          },
          "creator" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "is_frozen" : {
            "type" : "boolean",
            "x-ballerina-name" : "isFrozen"
          },
          "is_mpim" : {
            "type" : "boolean",
            "enum" : [ false ],
            "x-ballerina-name" : "isMpim"
          },
          "timezone_count" : {
            "type" : "integer",
            "x-ballerina-name" : "timezoneCount"
          },
          "is_ext_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExtShared"
          },
          "name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "nameNormalized"
          },
          "enterprise_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseIdDef"
            } ],
            "x-ballerina-name" : "enterpriseId"
          },
          "unread_count_display" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCountDisplay"
          },
          "is_group" : {
            "type" : "boolean",
            "x-ballerina-name" : "isGroup"
          },
          "unlinked" : {
            "title" : "Field to determine whether a channel has ever been shared/disconnected in the past",
            "type" : "integer"
          },
          "use_case" : {
            "type" : "string",
            "x-ballerina-name" : "useCase"
          },
          "is_general" : {
            "type" : "boolean",
            "x-ballerina-name" : "isGeneral"
          },
          "num_members" : {
            "type" : "integer",
            "x-ballerina-name" : "numMembers"
          },
          "is_thread_only" : {
            "type" : "boolean",
            "x-ballerina-name" : "isThreadOnly"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "parent_conversation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjParentConversation"
            },
            "x-ballerina-name" : "parentConversation"
          }
        },
        "additionalProperties" : false
      },
      "DefaultErrorTemplate65" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate68" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate67" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "TeamIntegrationLogsResponse" : {
        "title" : "TeamIntegrationLogsResponse",
        "required" : [ "logs", "ok", "paging" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/PagingObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "logs" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamIntegrationLogsResponseLogs"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from team.integrationLogs method"
      },
      "ConversationsMembersErrorResponse" : {
        "title" : "ConversationsMembersErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "channel_not_found", "invalid_limit", "invalid_cursor", "fetch_members_failed", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response conversations.members method"
      },
      "DefaultErrorTemplate69" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "AdminConversationsGetConversationPrefsResponsePrefs" : {
        "type" : "object",
        "properties" : {
          "can_thread" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminConversationsGetConversationPrefsResponsePrefsCanThread"
            } ],
            "x-ballerina-name" : "canThread"
          },
          "who_can_post" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminConversationsGetConversationPrefsResponsePrefsWhoCanPost"
            } ],
            "x-ballerina-name" : "whoCanPost"
          }
        }
      },
      "DefaultSuccessResponse1" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ChannelObjTopic" : {
        "required" : [ "creator", "last_set", "value" ],
        "type" : "object",
        "properties" : {
          "last_set" : {
            "type" : "integer",
            "x-ballerina-name" : "lastSet"
          },
          "creator" : {
            "$ref" : "#/components/schemas/TopicPurposeCreatorDef"
          },
          "value" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DefaultSuccessResponse2" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "UsersProfileSetBody" : {
        "type" : "object",
        "properties" : {
          "profile" : {
            "type" : "string",
            "description" : "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of a single key to set. Usable only if `profile` is not passed"
          },
          "user" : {
            "type" : "string",
            "description" : "ID of user to change. This argument may only be specified by team admins on paid teams"
          },
          "value" : {
            "type" : "string",
            "description" : "Value to set a single key to. Usable only if `profile` is not passed"
          }
        }
      },
      "CallsAddBody" : {
        "required" : [ "external_unique_id", "join_url" ],
        "type" : "object",
        "properties" : {
          "date_start" : {
            "type" : "integer",
            "description" : "Call start time in UTC UNIX timestamp format",
            "x-ballerina-name" : "dateStart"
          },
          "join_url" : {
            "type" : "string",
            "description" : "The URL required for a client to join the Call",
            "x-ballerina-name" : "joinUrl"
          },
          "desktop_app_join_url" : {
            "type" : "string",
            "description" : "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL",
            "x-ballerina-name" : "desktopAppJoinUrl"
          },
          "external_display_id" : {
            "type" : "string",
            "description" : "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object",
            "x-ballerina-name" : "externalDisplayId"
          },
          "external_unique_id" : {
            "type" : "string",
            "description" : "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service",
            "x-ballerina-name" : "externalUniqueId"
          },
          "title" : {
            "type" : "string",
            "description" : "The name of the Call"
          },
          "created_by" : {
            "type" : "string",
            "description" : "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required",
            "x-ballerina-name" : "createdBy"
          },
          "users" : {
            "type" : "string",
            "description" : "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)"
          }
        }
      },
      "RemindersAddErrorResponse" : {
        "title" : "RemindersAddErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "cannot_parse", "user_not_found", "cannot_add_bot", "cannot_add_slackbot", "cannot_add_others", "cannot_add_others_recurring", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reminders.add method"
      },
      "ConversationsSetPurposeBody" : {
        "type" : "object",
        "properties" : {
          "purpose" : {
            "type" : "string",
            "description" : "A new, specialer purpose"
          },
          "channel" : {
            "type" : "string",
            "description" : "Conversation to set the purpose of"
          }
        }
      },
      "DefaultSuccessResponse9" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "FilesDeleteResponse" : {
        "title" : "FilesDeleteResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response files.delete method"
      },
      "ChatScheduledMessagesListResponse" : {
        "title" : "ChatScheduledMessagesListResponse",
        "required" : [ "ok", "response_metadata", "scheduled_messages" ],
        "type" : "object",
        "properties" : {
          "scheduled_messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChatScheduledMessagesListResponseScheduledMessages"
            },
            "x-ballerina-name" : "scheduledMessages"
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChatScheduledMessagesListResponseResponseMetadata"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from chat.scheduledMessages.list method"
      },
      "DefaultSuccessResponse7" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ChatScheduleMessageResponse" : {
        "title" : "ChatScheduleMessageResponse",
        "required" : [ "channel", "message", "ok", "post_at", "scheduled_message_id" ],
        "type" : "object",
        "properties" : {
          "scheduled_message_id" : {
            "title" : "Scheduled Message ID",
            "pattern" : "^[Q][A-Z0-9]{8,}$",
            "type" : "string",
            "x-ballerina-name" : "scheduledMessageId"
          },
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "message" : {
            "$ref" : "#/components/schemas/ChatScheduleMessageResponseMessage"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "post_at" : {
            "pattern" : "^\\d{10}$",
            "type" : "integer",
            "x-ballerina-name" : "postAt"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of chat.scheduleMessage method"
      },
      "DefaultSuccessResponse8" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse5" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "UsersSetPresenceErrorResponse" : {
        "title" : "UsersSetPresenceErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_presence", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.setPresence method"
      },
      "DefaultSuccessResponse6" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse3" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse4" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObjParentConversation2" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/ChannelDef"
        }, {
          "$ref" : "#/components/schemas/ParentConversationAnyOf22"
        } ]
      },
      "ConversationsInviteErrorResponse1" : {
        "title" : "ConversationsInviteErrorResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "no_user", "cant_invite_self", "not_in_channel", "already_in_channel", "is_archived", "cant_invite", "too_many_users", "ura_max_channels", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          },
          "errors" : {
            "title" : "errors is returned when an error associates an user",
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationsInviteErrorResponse1Errors"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.invite method"
      },
      "ConversationObjParentConversation1" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/ChannelDef"
        }, {
          "$ref" : "#/components/schemas/ParentConversationAnyOf21"
        } ]
      },
      "DefaultErrorTemplate71" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate70" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate72" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DialogOpenErrorResponse" : {
        "title" : "DialogOpenErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "validation_errors", "missing_trigger", "missing_dialog", "trigger_exchanged", "trigger_expired", "invalid_trigger", "app_missing_action_url", "cannot_create_dialog", "failed_sending_dialog", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from dialog.open method"
      },
      "AdminConversationsSetConversationPrefsResponse" : {
        "title" : "AdminConversationsSetConversationPrefsResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.setConversationPrefs"
      },
      "UsergroupsEnableBody" : {
        "required" : [ "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "type" : "string",
            "description" : "The encoded ID of the User Group to enable"
          },
          "include_count" : {
            "type" : "boolean",
            "description" : "Include the number of users in the User Group",
            "x-ballerina-name" : "includeCount"
          }
        }
      },
      "AdminTeamsSettingsSetNameBody" : {
        "required" : [ "name", "team_id" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The new name of the workspace"
          },
          "team_id" : {
            "type" : "string",
            "description" : "ID for the workspace to set the name for",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "FilesInfoResponse" : {
        "title" : "FilesInfoResponse",
        "required" : [ "comments", "file", "ok" ],
        "type" : "object",
        "properties" : {
          "editor" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "comments" : {
            "$ref" : "#/components/schemas/CommentsObj"
          },
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingObj"
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResponseMetadataObj"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "content_html" : {
            "nullable" : true,
            "x-ballerina-name" : "contentHtml"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from files.info method"
      },
      "UsersDeletePhotoErrorResponse" : {
        "title" : "UsersDeletePhotoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.deletePhoto method"
      },
      "ApiPermissionsScopesListResponse" : {
        "title" : "ApiPermissionsScopesListResponse",
        "required" : [ "ok", "scopes" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ApiPermissionsScopesListResponseScopes"
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for successful response api.permissions.scopes.list method"
      },
      "AppsPermissionsInfoResponseInfo" : {
        "required" : [ "app_home", "channel", "group", "im", "mpim", "team" ],
        "type" : "object",
        "properties" : {
          "im" : {
            "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfoIm"
          },
          "mpim" : {
            "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfoMpim"
          },
          "channel" : {
            "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfoChannel"
          },
          "app_home" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfoAppHome"
            } ],
            "x-ballerina-name" : "appHome"
          },
          "team" : {
            "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfoTeam"
          },
          "group" : {
            "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfoGroup"
          }
        }
      },
      "UsergroupsCreateErrorResponse" : {
        "title" : "UsergroupsCreateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "permission_denied", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.create method"
      },
      "AdminEmojiRenameBody" : {
        "required" : [ "name", "new_name", "token" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included"
          },
          "new_name" : {
            "type" : "string",
            "description" : "The new name of the emoji",
            "x-ballerina-name" : "newName"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.teams:write`"
          }
        }
      },
      "ChatGetPermalinkErrorResponse" : {
        "title" : "ChatGetPermalinkErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "channel_not_found", "message_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.getPermalink method"
      },
      "UsersDeletePhotoResponse" : {
        "title" : "UsersDeletePhotoResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.deletePhoto method"
      },
      "200User3" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "RemindersInfoErrorResponse" : {
        "title" : "RemindersInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reminders.info method"
      },
      "200User1" : {
        "required" : [ "email", "id", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          }
        },
        "additionalProperties" : false
      },
      "200User2" : {
        "required" : [ "id", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "name" ],
        "type" : "object",
        "properties" : {
          "image_32" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image32"
          },
          "image_24" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image24"
          },
          "name" : {
            "type" : "string"
          },
          "image_192" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image192"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "image_48" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image48"
          },
          "image_72" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image72"
          },
          "image_512" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image512"
          }
        },
        "additionalProperties" : false
      },
      "UsersSetPresenceResponse" : {
        "title" : "UsersSetPresenceResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.setPresence method"
      },
      "AuthTestErrorResponse" : {
        "title" : "AuthTestErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "token_revoked", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response auth.test method"
      },
      "UserObjAnyOf1" : {
        "required" : [ "id", "is_app_user", "is_bot", "name", "profile", "updated" ],
        "type" : "object",
        "properties" : {
          "color" : {
            "pattern" : "^[a-fA-F0-9]{6}$",
            "type" : "string"
          },
          "is_invited_user" : {
            "type" : "boolean",
            "x-ballerina-name" : "isInvitedUser"
          },
          "has_2fa" : {
            "type" : "boolean",
            "x-ballerina-name" : "has2fa"
          },
          "is_restricted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isRestricted"
          },
          "tz" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserObjTz"
            }
          },
          "tz_label" : {
            "type" : "string",
            "x-ballerina-name" : "tzLabel"
          },
          "is_primary_owner" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPrimaryOwner"
          },
          "team_profile" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserObjTeamProfile"
            } ],
            "x-ballerina-name" : "teamProfile"
          },
          "real_name" : {
            "type" : "string",
            "x-ballerina-name" : "realName"
          },
          "team_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            } ],
            "x-ballerina-name" : "teamId"
          },
          "locale" : {
            "type" : "string"
          },
          "is_admin" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAdmin"
          },
          "is_app_user" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAppUser"
          },
          "tz_offset" : {
            "type" : "number",
            "x-ballerina-name" : "tzOffset"
          },
          "is_stranger" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStranger"
          },
          "is_forgotten" : {
            "type" : "boolean",
            "x-ballerina-name" : "isForgotten"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "is_bot" : {
            "type" : "boolean",
            "x-ballerina-name" : "isBot"
          },
          "presence" : {
            "type" : "string"
          },
          "is_ultra_restricted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isUltraRestricted"
          },
          "is_owner" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOwner"
          },
          "profile" : {
            "$ref" : "#/components/schemas/UserProfileObj"
          },
          "is_external" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExternal"
          },
          "team" : {
            "$ref" : "#/components/schemas/WorkspaceIdDef"
          },
          "enterprise_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseUserObj"
            } ],
            "x-ballerina-name" : "enterpriseUser"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "two_factor_type" : {
            "type" : "string",
            "x-ballerina-name" : "twoFactorType"
          },
          "name" : {
            "type" : "string"
          },
          "updated" : {
            "type" : "number"
          }
        },
        "additionalProperties" : false,
        "description" : "user object for non enterprise type"
      },
      "ReactionsGetErrorResponse" : {
        "title" : "ReactionsGetErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "file_not_found", "file_comment_not_found", "message_not_found", "no_item_specified", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reactions.get method"
      },
      "AdminConversationsConvertToPrivateErrorResponse" : {
        "title" : "AdminConversationsConvertToPrivateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "restricted_action", "name_taken", "channel_not_found", "channel_type_not_supported", "default_org_wide_channel", "method_not_supported_for_channel_type", "could_not_convert_channel", "external_channel_migrating" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.convertToPrivate"
      },
      "FilesCommentsDeleteErrorResponse" : {
        "title" : "FilesCommentsDeleteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "cant_delete", "comment_not_found", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response files.comments.delete method"
      },
      "ConversationsRenameBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "ID of conversation to rename"
          },
          "name" : {
            "type" : "string",
            "description" : "New name for conversation"
          }
        }
      },
      "TeamAccessLogsErrorResponse" : {
        "title" : "TeamAccessLogsErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "paid_only", "over_pagination_limit", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from team.accessLogs method"
      },
      "ReactionsRemoveResponse" : {
        "title" : "ReactionsRemoveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reactions.remove method"
      },
      "ApiTestErrorResponse" : {
        "title" : "ApiTestErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Schema for error response api.test method"
      },
      "ChatDeleteScheduledMessageResponse" : {
        "title" : "ChatDeleteScheduledMessageResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from chat.deleteScheduledMessage method"
      },
      "ApiPermissionsScopesListResponseScopes" : {
        "type" : "object",
        "properties" : {
          "app_home" : {
            "$ref" : "#/components/schemas/ScopesObj"
          },
          "channel" : {
            "$ref" : "#/components/schemas/ScopesObj"
          },
          "group" : {
            "$ref" : "#/components/schemas/ScopesObj"
          },
          "im" : {
            "$ref" : "#/components/schemas/ScopesObj"
          },
          "mpim" : {
            "$ref" : "#/components/schemas/ScopesObj"
          },
          "team" : {
            "$ref" : "#/components/schemas/ScopesObj"
          },
          "user" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        },
        "additionalProperties" : true
      },
      "ConversationsJoinResponse" : {
        "title" : "ConversationsJoinResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "warning" : {
            "type" : "string"
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResponseMetadata"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.join method"
      },
      "StarsListResponse" : {
        "title" : "StarsListResponse",
        "required" : [ "items", "ok" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/PagingObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "anyOf" : [ {
                  "required" : [ "channel", "date_create", "message", "type" ],
                  "type" : "object",
                  "properties" : {
                    "channel" : {
                      "$ref" : "#/components/schemas/ChannelDef"
                    },
                    "date_create" : {
                      "type" : "integer"
                    },
                    "message" : {
                      "$ref" : "#/components/schemas/MessageObj"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "message" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "date_create", "file", "type" ],
                  "type" : "object",
                  "properties" : {
                    "date_create" : {
                      "type" : "integer"
                    },
                    "file" : {
                      "$ref" : "#/components/schemas/FileObj"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "file" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "comment", "date_create", "file", "type" ],
                  "type" : "object",
                  "properties" : {
                    "comment" : {
                      "$ref" : "#/components/schemas/CommentObj"
                    },
                    "date_create" : {
                      "type" : "integer"
                    },
                    "file" : {
                      "$ref" : "#/components/schemas/FileObj"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "file_comment" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "channel", "date_create", "type" ],
                  "type" : "object",
                  "properties" : {
                    "channel" : {
                      "$ref" : "#/components/schemas/ChannelDef"
                    },
                    "date_create" : {
                      "type" : "integer"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "channel" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "channel", "date_create", "type" ],
                  "type" : "object",
                  "properties" : {
                    "channel" : {
                      "$ref" : "#/components/schemas/DmIdDef"
                    },
                    "date_create" : {
                      "type" : "integer"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "im" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "channel", "date_create", "type" ],
                  "type" : "object",
                  "properties" : {
                    "channel" : {
                      "$ref" : "#/components/schemas/GroupIdDef"
                    },
                    "date_create" : {
                      "type" : "integer"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "group" ]
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from stars.list method"
      },
      "ConversationsMembersResponse" : {
        "title" : "ConversationsMembersResponse",
        "required" : [ "members", "ok", "response_metadata" ],
        "type" : "object",
        "properties" : {
          "members" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConversationsMembersResponseResponseMetadata"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.members method"
      },
      "AdminTeamsSettingsSetDescriptionBody" : {
        "required" : [ "description", "team_id" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The new description for the workspace"
          },
          "team_id" : {
            "type" : "string",
            "description" : "ID for the workspace to set the description for",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "ChatScheduleMessageResponseMessage" : {
        "required" : [ "bot_id", "team", "text", "type", "user" ],
        "type" : "object",
        "properties" : {
          "bot_profile" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BotProfileObj"
            } ],
            "x-ballerina-name" : "botProfile"
          },
          "team" : {
            "$ref" : "#/components/schemas/TeamDef"
          },
          "text" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "bot_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BotIdDef"
            } ],
            "x-ballerina-name" : "botId"
          },
          "username" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "RemindersCompleteErrorResponse" : {
        "title" : "RemindersCompleteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_found", "cannot_complete_recurring", "cannot_complete_others", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reminders.complete method"
      },
      "ConversationsUnarchiveBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "ID of conversation to unarchive"
          }
        }
      },
      "TeamAccessLogsResponse" : {
        "title" : "TeamAccessLogsResponse",
        "required" : [ "logins", "ok", "paging" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/PagingObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "logins" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamAccessLogsResponseLogins"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from team.accessLogs method"
      },
      "MessageObject" : {
        "title" : "Message object",
        "required" : [ "text" ],
        "type" : "object",
        "properties" : {
          "attachments" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          },
          "blocks" : {
            "type" : "object"
          },
          "text" : {
            "type" : "string"
          }
        }
      },
      "ExternalOrgMigrationsObj" : {
        "title" : "External Org Migrations",
        "required" : [ "current", "date_updated" ],
        "type" : "object",
        "properties" : {
          "current" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ExternalOrgMigrationsObjCurrent"
            }
          },
          "date_updated" : {
            "type" : "integer",
            "x-ballerina-name" : "dateUpdated"
          }
        }
      },
      "UserProfileShortObj" : {
        "required" : [ "avatar_hash", "display_name", "first_name", "image_72", "is_restricted", "is_ultra_restricted", "name", "real_name", "team" ],
        "type" : "object",
        "properties" : {
          "is_ultra_restricted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isUltraRestricted"
          },
          "is_restricted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isRestricted"
          },
          "real_name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "realNameNormalized"
          },
          "name" : {
            "type" : "string"
          },
          "real_name" : {
            "type" : "string",
            "x-ballerina-name" : "realName"
          },
          "team" : {
            "$ref" : "#/components/schemas/WorkspaceIdDef"
          },
          "avatar_hash" : {
            "type" : "string",
            "x-ballerina-name" : "avatarHash"
          },
          "display_name" : {
            "type" : "string",
            "x-ballerina-name" : "displayName"
          },
          "image_72" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image72"
          },
          "first_name" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "firstName"
          },
          "display_name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "displayNameNormalized"
          }
        },
        "additionalProperties" : false
      },
      "StarsRemoveBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "File to remove star from"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)"
          },
          "file_comment" : {
            "type" : "string",
            "description" : "File comment to remove star from",
            "x-ballerina-name" : "fileComment"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the message to remove star from"
          }
        }
      },
      "PinsListErrorResponse" : {
        "title" : "PinsListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "channel_not_found", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from pins.list method"
      },
      "ReminderObj" : {
        "required" : [ "creator", "id", "recurring", "text", "user" ],
        "type" : "object",
        "properties" : {
          "creator" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "recurring" : {
            "type" : "boolean"
          },
          "complete_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "completeTs"
          },
          "id" : {
            "$ref" : "#/components/schemas/ReminderIdDef"
          },
          "text" : {
            "type" : "string"
          },
          "time" : {
            "type" : "integer"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "AdminUsersSetExpirationBody" : {
        "required" : [ "expiration_ts", "team_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "expiration_ts" : {
            "type" : "integer",
            "description" : "Timestamp when guest account should be disabled",
            "x-ballerina-name" : "expirationTs"
          },
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user to set an expiration for",
            "x-ballerina-name" : "userId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "AdminUsergroupsRemoveChannelsBody" : {
        "required" : [ "channel_ids", "usergroup_id" ],
        "type" : "object",
        "properties" : {
          "channel_ids" : {
            "type" : "string",
            "description" : "Comma-separated string of channel IDs",
            "x-ballerina-name" : "channelIds"
          },
          "usergroup_id" : {
            "type" : "string",
            "description" : "ID of the IDP Group",
            "x-ballerina-name" : "usergroupId"
          }
        }
      },
      "ConversationsJoinBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "ID of conversation to join"
          }
        }
      },
      "RemindersDeleteResponse" : {
        "title" : "RemindersDeleteResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reminders.delete method"
      },
      "200200200200AnyOf12234" : {
        "required" : [ "ok", "team", "user" ],
        "type" : "object",
        "properties" : {
          "team" : {
            "$ref" : "#/components/schemas/200Team3"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/200User3"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for 'identity.basic,identity.team' scopes"
      },
      "OkTrueDef" : {
        "title" : "default success response",
        "type" : "boolean",
        "enum" : [ true ]
      },
      "ChannelActionsTsChannelActionsTsAnyOf12" : {
        "nullable" : true
      },
      "EnterpriseUserObj" : {
        "required" : [ "enterprise_id", "enterprise_name", "id", "is_admin", "is_owner", "teams" ],
        "type" : "object",
        "properties" : {
          "is_admin" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAdmin"
          },
          "teams" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            }
          },
          "is_owner" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOwner"
          },
          "id" : {
            "$ref" : "#/components/schemas/EnterpriseUserIdDef"
          },
          "enterprise_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseIdDef"
            } ],
            "x-ballerina-name" : "enterpriseId"
          },
          "enterprise_name" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseNameDef"
            } ],
            "x-ballerina-name" : "enterpriseName"
          }
        },
        "additionalProperties" : false
      },
      "AdminConversationsConvertToPrivateResponse" : {
        "title" : "AdminConversationsConvertToPrivateResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.convertToPrivate"
      },
      "AdminConversationsRestrictAccessAddGroupBody" : {
        "required" : [ "channel_id", "group_id", "token" ],
        "type" : "object",
        "properties" : {
          "group_id" : {
            "type" : "string",
            "description" : "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel",
            "x-ballerina-name" : "groupId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization",
            "x-ballerina-name" : "teamId"
          },
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to link this group to",
            "x-ballerina-name" : "channelId"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.conversations:write`"
          }
        }
      },
      "OkFalseDef" : {
        "title" : "default failure response",
        "type" : "boolean",
        "enum" : [ false ]
      },
      "ChatUnfurlResponse" : {
        "title" : "ChatUnfurlResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from chat.unfurl method"
      },
      "RemindersInfoResponse" : {
        "title" : "RemindersInfoResponse",
        "required" : [ "ok", "reminder" ],
        "type" : "object",
        "properties" : {
          "reminder" : {
            "$ref" : "#/components/schemas/ReminderObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reminders.info method"
      },
      "TeamAccessLogsResponseLogins" : {
        "required" : [ "count", "country", "date_first", "date_last", "ip", "isp", "region", "user_agent", "user_id", "username" ],
        "type" : "object",
        "properties" : {
          "country" : {
            "type" : "string",
            "nullable" : true
          },
          "date_last" : {
            "type" : "integer",
            "x-ballerina-name" : "dateLast"
          },
          "user_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "userId"
          },
          "ip" : {
            "type" : "string",
            "nullable" : true
          },
          "isp" : {
            "type" : "string",
            "nullable" : true
          },
          "count" : {
            "type" : "integer"
          },
          "date_first" : {
            "type" : "integer",
            "x-ballerina-name" : "dateFirst"
          },
          "region" : {
            "type" : "string",
            "nullable" : true
          },
          "user_agent" : {
            "type" : "string",
            "x-ballerina-name" : "userAgent"
          },
          "username" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "AdminConversationsGetConversationPrefsResponsePrefsCanThread" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "user" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AdminUsersAssignBody" : {
        "required" : [ "team_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "channel_ids" : {
            "type" : "string",
            "description" : "Comma separated values of channel IDs to add user in the new workspace",
            "x-ballerina-name" : "channelIds"
          },
          "is_ultra_restricted" : {
            "type" : "boolean",
            "description" : "True if user should be added to the workspace as a single-channel guest",
            "x-ballerina-name" : "isUltraRestricted"
          },
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user to add to the workspace",
            "x-ballerina-name" : "userId"
          },
          "is_restricted" : {
            "type" : "boolean",
            "description" : "True if user should be added to the workspace as a guest",
            "x-ballerina-name" : "isRestricted"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "TeamDef" : {
        "title" : "Team ID",
        "pattern" : "^[T][A-Z0-9]{2,}$",
        "type" : "string"
      },
      "AdminConversationsDeleteResponse" : {
        "title" : "AdminConversationsDeleteResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.delete"
      },
      "ConversationObjTopic1" : {
        "required" : [ "creator", "last_set", "value" ],
        "type" : "object",
        "properties" : {
          "last_set" : {
            "type" : "integer",
            "x-ballerina-name" : "lastSet"
          },
          "creator" : {
            "$ref" : "#/components/schemas/TopicPurposeCreatorDef"
          },
          "value" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "200User" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "200200200AnyOf1223" : {
        "required" : [ "ok", "team", "user" ],
        "type" : "object",
        "properties" : {
          "team" : {
            "$ref" : "#/components/schemas/200Team2"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/200User2"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for 'identity.basic,identity.avatar' scopes"
      },
      "PinsAddResponse" : {
        "title" : "PinsAddResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from pins.add method"
      },
      "TzAnyOf1" : {
        "nullable" : true
      },
      "ConversationsSetPurposeErrorResponse" : {
        "title" : "ConversationsSetPurposeErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_in_channel", "is_archived", "too_long", "user_is_restricted", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.setPurpose method"
      },
      "200Team3" : {
        "required" : [ "domain", "id", "image_102", "image_132", "image_230", "image_34", "image_44", "image_68", "image_88", "image_default", "name" ],
        "type" : "object",
        "properties" : {
          "image_132" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image132"
          },
          "image_102" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image102"
          },
          "image_68" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image68"
          },
          "image_default" : {
            "type" : "boolean",
            "x-ballerina-name" : "imageDefault"
          },
          "image_34" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image34"
          },
          "domain" : {
            "type" : "string"
          },
          "image_230" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image230"
          },
          "image_44" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image44"
          },
          "image_88" : {
            "type" : "string",
            "format" : "url",
            "x-ballerina-name" : "image88"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/TeamDef"
          }
        },
        "additionalProperties" : false
      },
      "ConversationsSetTopicBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Conversation to set the topic of"
          },
          "topic" : {
            "type" : "string",
            "description" : "The new topic string. Does not support formatting or linkification"
          }
        }
      },
      "UsersListResponse" : {
        "title" : "UsersListResponse",
        "required" : [ "cache_ts", "members", "ok" ],
        "type" : "object",
        "properties" : {
          "cache_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "cacheTs"
          },
          "members" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserObj"
            }
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResponseMetadataObj"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.list method"
      },
      "200Team2" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/TeamDef"
          }
        },
        "additionalProperties" : false
      },
      "ConversationsArchiveBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "ID of conversation to archive"
          }
        }
      },
      "200Team1" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/TeamDef"
          }
        },
        "additionalProperties" : false
      },
      "OptionsAnyOf1" : {
        "nullable" : true
      },
      "ScopesObj" : {
        "type" : "array",
        "items" : {
          "title" : "Named OAuth scopes",
          "type" : "string",
          "x-examples" : [ "chat:write", "im:history", "im:read" ]
        }
      },
      "BotProfileObjIcons" : {
        "required" : [ "image_36", "image_48", "image_72" ],
        "type" : "object",
        "properties" : {
          "image_36" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image36"
          },
          "image_48" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image48"
          },
          "image_72" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image72"
          }
        },
        "additionalProperties" : false
      },
      "ConversationsCreateResponse" : {
        "title" : "ConversationsCreateResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.create method"
      },
      "ChannelActionsTsAnyOf1" : {
        "type" : "integer"
      },
      "ChannelNameDef" : {
        "title" : "Name of a channel",
        "type" : "string"
      },
      "ReactionsAddBody" : {
        "required" : [ "channel", "name", "timestamp" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Channel where the message to add reaction to was posted"
          },
          "name" : {
            "type" : "string",
            "description" : "Reaction (emoji) name"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the message to add reaction to"
          }
        }
      },
      "AdminUsergroupsAddTeamsBody" : {
        "required" : [ "team_ids", "usergroup_id" ],
        "type" : "object",
        "properties" : {
          "team_ids" : {
            "type" : "string",
            "description" : "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token",
            "x-ballerina-name" : "teamIds"
          },
          "usergroup_id" : {
            "type" : "string",
            "description" : "An encoded usergroup (IDP Group) ID",
            "x-ballerina-name" : "usergroupId"
          },
          "auto_provision" : {
            "type" : "boolean",
            "description" : "When `true`, this method automatically creates new workspace accounts for the IDP group members",
            "x-ballerina-name" : "autoProvision"
          }
        }
      },
      "AppsPermissionsScopesListErrorResponse" : {
        "title" : "AppsPermissionsScopesListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from apps.permissions.scopes.list method"
      },
      "ConversationsInfoResponse" : {
        "title" : "ConversationsInfoResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.info"
      },
      "RemindersDeleteBody" : {
        "type" : "object",
        "properties" : {
          "reminder" : {
            "type" : "string",
            "description" : "The ID of the reminder"
          }
        }
      },
      "BotsInfoResponse" : {
        "title" : "BotsInfoResponse",
        "required" : [ "bot", "ok" ],
        "type" : "object",
        "properties" : {
          "bot" : {
            "$ref" : "#/components/schemas/BotsInfoResponseBot"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from bots.info method"
      },
      "DndSetSnoozeResponse" : {
        "title" : "DndSetSnoozeResponse",
        "required" : [ "ok", "snooze_enabled", "snooze_endtime", "snooze_remaining" ],
        "type" : "object",
        "properties" : {
          "snooze_endtime" : {
            "type" : "integer",
            "x-ballerina-name" : "snoozeEndtime"
          },
          "snooze_enabled" : {
            "type" : "boolean",
            "x-ballerina-name" : "snoozeEnabled"
          },
          "snooze_remaining" : {
            "type" : "integer",
            "x-ballerina-name" : "snoozeRemaining"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from dnd.setSnooze method"
      },
      "ChatPostEphemeralBody" : {
        "required" : [ "channel", "user" ],
        "type" : "object",
        "properties" : {
          "icon_url" : {
            "type" : "string",
            "description" : "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below",
            "x-ballerina-name" : "iconUrl"
          },
          "link_names" : {
            "type" : "boolean",
            "description" : "Find and link channel names and usernames",
            "x-ballerina-name" : "linkNames"
          },
          "as_user" : {
            "type" : "boolean",
            "description" : "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false",
            "x-ballerina-name" : "asUser"
          },
          "attachments" : {
            "type" : "string",
            "description" : "A JSON-based array of structured attachments, presented as a URL-encoded string"
          },
          "icon_emoji" : {
            "type" : "string",
            "description" : "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below",
            "x-ballerina-name" : "iconEmoji"
          },
          "blocks" : {
            "type" : "string",
            "description" : "A JSON-based array of structured blocks, presented as a URL-encoded string"
          },
          "thread_ts" : {
            "type" : "string",
            "description" : "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread",
            "x-ballerina-name" : "threadTs"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name"
          },
          "parse" : {
            "type" : "string",
            "description" : "Change how messages are treated. Defaults to `none`. See [below](#formatting)"
          },
          "text" : {
            "type" : "string",
            "description" : "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail"
          },
          "user" : {
            "type" : "string",
            "description" : "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument"
          },
          "username" : {
            "type" : "string",
            "description" : "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below"
          }
        }
      },
      "ConversationsSetTopicErrorResponse" : {
        "title" : "ConversationsSetTopicErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_in_channel", "is_archived", "too_long", "user_is_restricted", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.setTopic method"
      },
      "ChatScheduledMessagesListResponseResponseMetadata" : {
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "LatestAnyOf2" : {
        "nullable" : true
      },
      "ConversationsCloseResponse" : {
        "title" : "ConversationsCloseResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "already_closed" : {
            "type" : "boolean",
            "x-ballerina-name" : "alreadyClosed"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "no_op" : {
            "type" : "boolean",
            "x-ballerina-name" : "noOp"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.close method"
      },
      "AdminUsersSessionInvalidateBody" : {
        "required" : [ "session_id", "team_id" ],
        "type" : "object",
        "properties" : {
          "session_id" : {
            "type" : "integer",
            "x-ballerina-name" : "sessionId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "ID of the team that the session belongs to",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "ReactionsListResponse" : {
        "title" : "ReactionsListResponse",
        "required" : [ "items", "ok" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/PagingObj"
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ResponseMetadataObj"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "anyOf" : [ {
                  "required" : [ "channel", "message", "type" ],
                  "type" : "object",
                  "properties" : {
                    "channel" : {
                      "$ref" : "#/components/schemas/ChannelDef"
                    },
                    "message" : {
                      "$ref" : "#/components/schemas/MessageObj"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "message" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "file", "type" ],
                  "type" : "object",
                  "properties" : {
                    "file" : {
                      "$ref" : "#/components/schemas/FileObj"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "file" ]
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "comment", "file", "type" ],
                  "type" : "object",
                  "properties" : {
                    "comment" : {
                      "$ref" : "#/components/schemas/CommentObj"
                    },
                    "file" : {
                      "$ref" : "#/components/schemas/FileObj"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "file_comment" ]
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reactions.list method"
      },
      "UsergroupsUpdateBody" : {
        "required" : [ "usergroup" ],
        "type" : "object",
        "properties" : {
          "channels" : {
            "type" : "string",
            "description" : "A comma separated string of encoded channel IDs for which the User Group uses as a default"
          },
          "name" : {
            "type" : "string",
            "description" : "A name for the User Group. Must be unique among User Groups"
          },
          "usergroup" : {
            "type" : "string",
            "description" : "The encoded ID of the User Group to update"
          },
          "description" : {
            "type" : "string",
            "description" : "A short description of the User Group"
          },
          "handle" : {
            "type" : "string",
            "description" : "A mention handle. Must be unique among channels, users and User Groups"
          },
          "include_count" : {
            "type" : "boolean",
            "description" : "Include the number of users in the User Group",
            "x-ballerina-name" : "includeCount"
          }
        }
      },
      "200200200AnyOf1123" : {
        "required" : [ "comment", "file", "ok", "type" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "comment" : {
            "$ref" : "#/components/schemas/CommentObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "file_comment" ]
          }
        },
        "additionalProperties" : false
      },
      "DeletedByAnyOf1" : {
        "nullable" : true
      },
      "UsersConversationsErrorResponse" : {
        "title" : "UsersConversationsErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "invalid_types", "invalid_cursor", "invalid_limit", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.conversations method"
      },
      "IconObj" : {
        "type" : "object",
        "properties" : {
          "image_132" : {
            "type" : "string",
            "x-ballerina-name" : "image132"
          },
          "image_102" : {
            "type" : "string",
            "x-ballerina-name" : "image102"
          },
          "image_68" : {
            "type" : "string",
            "x-ballerina-name" : "image68"
          },
          "image_default" : {
            "type" : "boolean",
            "x-ballerina-name" : "imageDefault"
          },
          "image_34" : {
            "type" : "string",
            "x-ballerina-name" : "image34"
          },
          "image_230" : {
            "type" : "string",
            "x-ballerina-name" : "image230"
          },
          "image_44" : {
            "type" : "string",
            "x-ballerina-name" : "image44"
          },
          "image_88" : {
            "type" : "string",
            "x-ballerina-name" : "image88"
          }
        }
      },
      "DndEndSnoozeResponse" : {
        "title" : "DndEndSnoozeResponse",
        "required" : [ "dnd_enabled", "next_dnd_end_ts", "next_dnd_start_ts", "ok", "snooze_enabled" ],
        "type" : "object",
        "properties" : {
          "next_dnd_end_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "nextDndEndTs"
          },
          "dnd_enabled" : {
            "type" : "boolean",
            "x-ballerina-name" : "dndEnabled"
          },
          "next_dnd_start_ts" : {
            "type" : "integer",
            "x-ballerina-name" : "nextDndStartTs"
          },
          "snooze_enabled" : {
            "type" : "boolean",
            "x-ballerina-name" : "snoozeEnabled"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from dnd.endSnooze method"
      },
      "FilesCommentsDeleteResponse" : {
        "title" : "FilesCommentsDeleteResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response files.comments.delete method"
      },
      "MessageObjIcons" : {
        "type" : "object",
        "properties" : {
          "image_64" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image64"
          },
          "emoji" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ChatPostMessageResponse" : {
        "title" : "ChatPostMessageResponse",
        "required" : [ "channel", "message", "ok", "ts" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "message" : {
            "$ref" : "#/components/schemas/MessageObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "ts" : {
            "$ref" : "#/components/schemas/TsDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of chat.postMessage method"
      },
      "ExternalOrgMigrationsObjCurrent" : {
        "required" : [ "date_started", "team_id" ],
        "type" : "object",
        "properties" : {
          "team_id" : {
            "type" : "string",
            "x-ballerina-name" : "teamId"
          },
          "date_started" : {
            "type" : "integer",
            "x-ballerina-name" : "dateStarted"
          }
        }
      },
      "BotIdDef" : {
        "title" : "Bot User ID",
        "pattern" : "^B[A-Z0-9]{8,}$",
        "type" : "string"
      },
      "PinsAddBody" : {
        "required" : [ "channel" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Channel to pin the item in"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the message to pin"
          }
        }
      },
      "AdminConversationsCreateBody" : {
        "required" : [ "is_private", "name" ],
        "type" : "object",
        "properties" : {
          "is_private" : {
            "type" : "boolean",
            "description" : "When `true`, creates a private channel instead of a public channel",
            "x-ballerina-name" : "isPrivate"
          },
          "org_wide" : {
            "type" : "boolean",
            "description" : "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel",
            "x-ballerina-name" : "orgWide"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the public or private channel to create"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the public or private channel to create"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "UsersConversationsResponse" : {
        "title" : "UsersConversationsResponse",
        "required" : [ "channels", "ok" ],
        "type" : "object",
        "properties" : {
          "channels" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObj"
            }
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "response_metadata" : {
            "$ref" : "#/components/schemas/UsersConversationsResponseResponseMetadata"
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`"
      },
      "DndInfoErrorResponse" : {
        "title" : "DndInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "user_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from dnd.info method"
      },
      "ConversationsOpenResponse" : {
        "title" : "ConversationsOpenResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "already_open" : {
            "type" : "boolean",
            "x-ballerina-name" : "alreadyOpen"
          },
          "channel" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationsOpenResponseChannel"
            }
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "no_op" : {
            "type" : "boolean",
            "x-ballerina-name" : "noOp"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.open method when opening channels, ims, mpims"
      },
      "ConversationsInviteErrorResponse" : {
        "title" : "ConversationsInviteErrorResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.invite method"
      },
      "APIMethodUsersGetPresence" : {
        "title" : "APIMethod:UsersGetPresence",
        "required" : [ "ok", "presence" ],
        "type" : "object",
        "properties" : {
          "auto_away" : {
            "type" : "boolean"
          },
          "connection_count" : {
            "type" : "integer"
          },
          "last_activity" : {
            "type" : "integer"
          },
          "manual_away" : {
            "type" : "boolean"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "online" : {
            "type" : "boolean"
          },
          "presence" : {
            "type" : "string"
          }
        },
        "additionalProperties" : true,
        "description" : "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65"
      },
      "AdminConversationsDisconnectSharedBody" : {
        "required" : [ "channel_id" ],
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to be disconnected from some workspaces",
            "x-ballerina-name" : "channelId"
          },
          "leaving_team_ids" : {
            "type" : "string",
            "description" : "The team to be removed from the channel. Currently only a single team id can be specified",
            "x-ballerina-name" : "leavingTeamIds"
          }
        }
      },
      "PinnedInfoDef" : {
        "title" : "Info for a pinned item",
        "type" : "object",
        "additionalProperties" : false
      },
      "MessageObj" : {
        "title" : "Message object",
        "required" : [ "text", "ts", "type" ],
        "type" : "object",
        "properties" : {
          "attachments" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageObjAttachments"
            }
          },
          "client_msg_id" : {
            "type" : "string",
            "x-ballerina-name" : "clientMsgId"
          },
          "purpose" : {
            "type" : "string"
          },
          "upload" : {
            "type" : "boolean"
          },
          "is_intro" : {
            "type" : "boolean",
            "x-ballerina-name" : "isIntro"
          },
          "user_profile" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserProfileShortObj"
            } ],
            "x-ballerina-name" : "userProfile"
          },
          "type" : {
            "type" : "string"
          },
          "is_delayed_message" : {
            "type" : "boolean",
            "x-ballerina-name" : "isDelayedMessage"
          },
          "subscribed" : {
            "type" : "boolean"
          },
          "unread_count" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCount"
          },
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "subtype" : {
            "type" : "string"
          },
          "reply_users_count" : {
            "type" : "integer",
            "x-ballerina-name" : "replyUsersCount"
          },
          "inviter" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "text" : {
            "type" : "string"
          },
          "display_as_bot" : {
            "type" : "boolean",
            "x-ballerina-name" : "displayAsBot"
          },
          "bot_id" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageObjBotId"
            },
            "x-ballerina-name" : "botId"
          },
          "latest_reply" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "latestReply"
          },
          "last_read" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "lastRead"
          },
          "parent_user_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "parentUserId"
          },
          "blocks" : {
            "$ref" : "#/components/schemas/Blocks"
          },
          "reply_users" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            },
            "x-ballerina-name" : "replyUsers"
          },
          "team" : {
            "$ref" : "#/components/schemas/WorkspaceIdDef"
          },
          "icons" : {
            "$ref" : "#/components/schemas/MessageObjIcons"
          },
          "reply_count" : {
            "type" : "integer",
            "x-ballerina-name" : "replyCount"
          },
          "user_team" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            } ],
            "x-ballerina-name" : "userTeam"
          },
          "pinned_to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelDef"
            },
            "x-ballerina-name" : "pinnedTo"
          },
          "is_starred" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStarred"
          },
          "bot_profile" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BotProfileObj"
            } ],
            "x-ballerina-name" : "botProfile"
          },
          "old_name" : {
            "type" : "string",
            "x-ballerina-name" : "oldName"
          },
          "source_team" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            } ],
            "x-ballerina-name" : "sourceTeam"
          },
          "thread_ts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "threadTs"
          },
          "name" : {
            "type" : "string"
          },
          "files" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FileObj"
            }
          },
          "topic" : {
            "type" : "string"
          },
          "comment" : {
            "$ref" : "#/components/schemas/CommentObj"
          },
          "reactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReactionObj"
            }
          },
          "permalink" : {
            "type" : "string",
            "format" : "uri"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "ts" : {
            "$ref" : "#/components/schemas/TsDef"
          },
          "username" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "ConversationObjTopic" : {
        "required" : [ "creator", "last_set", "value" ],
        "type" : "object",
        "properties" : {
          "last_set" : {
            "type" : "integer",
            "x-ballerina-name" : "lastSet"
          },
          "creator" : {
            "$ref" : "#/components/schemas/TopicPurposeCreatorDef"
          },
          "value" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "UsersInfoResponse" : {
        "title" : "UsersInfoResponse",
        "required" : [ "ok", "user" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserObj"
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for successful response from users.info method"
      },
      "BotsInfoResponseBot" : {
        "required" : [ "app_id", "deleted", "icons", "id", "name", "updated" ],
        "type" : "object",
        "properties" : {
          "deleted" : {
            "type" : "boolean"
          },
          "user_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "userId"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/BotIdDef"
          },
          "icons" : {
            "$ref" : "#/components/schemas/BotsInfoResponseBotIcons"
          },
          "app_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AppIdDef"
            } ],
            "x-ballerina-name" : "appId"
          },
          "updated" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "FilesUploadBody" : {
        "type" : "object",
        "properties" : {
          "filetype" : {
            "type" : "string",
            "description" : "A [file type](/types/file#file_types) identifier"
          },
          "file" : {
            "type" : "string",
            "description" : "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`"
          },
          "filename" : {
            "type" : "string",
            "description" : "Filename of file"
          },
          "channels" : {
            "type" : "string",
            "description" : "Comma-separated list of channel names or IDs where the file will be shared"
          },
          "thread_ts" : {
            "type" : "number",
            "description" : "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead",
            "x-ballerina-name" : "threadTs"
          },
          "initial_comment" : {
            "type" : "string",
            "description" : "The message text introducing the file in specified `channels`",
            "x-ballerina-name" : "initialComment"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of file"
          },
          "content" : {
            "type" : "string",
            "description" : "File contents via a POST variable. If omitting this parameter, you must provide a `file`"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `files:write:user`"
          }
        }
      },
      "AdminConversationsRenameResponse1" : {
        "title" : "AdminConversationsRenameResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.rename"
      },
      "StarsRemoveResponse" : {
        "title" : "StarsRemoveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from stars.remove method"
      },
      "UsergroupsDisableResponse" : {
        "title" : "UsergroupsDisableResponse",
        "required" : [ "ok", "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "$ref" : "#/components/schemas/SubteamObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.disable method"
      },
      "ConversationsOpenErrorResponse" : {
        "title" : "ConversationsOpenErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "user_not_found", "user_not_visible", "user_disabled", "users_list_not_supplied", "not_enough_users", "too_many_users", "invalid_user_combination", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "channel_not_found" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.open method"
      },
      "UsersSetPhotoResponseProfile" : {
        "required" : [ "avatar_hash", "image_1024", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "image_original" ],
        "type" : "object",
        "properties" : {
          "image_32" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image32"
          },
          "image_original" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "imageOriginal"
          },
          "image_1024" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image1024"
          },
          "image_24" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image24"
          },
          "image_192" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image192"
          },
          "image_48" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image48"
          },
          "avatar_hash" : {
            "pattern" : "^[0-9a-f]{12}$",
            "type" : "string",
            "x-ballerina-name" : "avatarHash"
          },
          "image_72" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image72"
          },
          "image_512" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "image512"
          }
        },
        "additionalProperties" : false
      },
      "StarsRemoveErrorResponse" : {
        "title" : "StarsRemoveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "message_not_found", "file_not_found", "file_comment_not_found", "channel_not_found", "no_item_specified", "not_starred", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from stars.remove method"
      },
      "UsergroupsUsersUpdateBody" : {
        "required" : [ "usergroup", "users" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "type" : "string",
            "description" : "The encoded ID of the User Group to update"
          },
          "include_count" : {
            "type" : "boolean",
            "description" : "Include the number of users in the User Group",
            "x-ballerina-name" : "includeCount"
          },
          "users" : {
            "type" : "string",
            "description" : "A comma separated string of encoded user IDs that represent the entire list of users for the User Group"
          }
        }
      },
      "UsersListErrorResponse" : {
        "title" : "UsersListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "limit_required", "invalid_cursor", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.list method"
      },
      "ConversationsMembersResponseResponseMetadata" : {
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "FilesListResponse" : {
        "title" : "FilesListResponse",
        "required" : [ "files", "ok", "paging" ],
        "type" : "object",
        "properties" : {
          "files" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FileObj"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/PagingObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from files.list method"
      },
      "200200AnyOf112" : {
        "required" : [ "file", "ok", "type" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "file" ]
          }
        },
        "additionalProperties" : false
      },
      "DefaultSuccessResponse" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "RemindersListResponse" : {
        "title" : "RemindersListResponse",
        "required" : [ "ok", "reminders" ],
        "type" : "object",
        "properties" : {
          "reminders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReminderObj"
            }
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reminders.list method"
      },
      "ConversationIMChannelObjectFromConversationsMethods" : {
        "title" : "Conversation IM Channel Object from conversations methods",
        "required" : [ "created", "id", "is_im", "is_org_shared", "priority", "user" ],
        "type" : "object",
        "properties" : {
          "has_pins" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasPins"
          },
          "last_read" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "lastRead"
          },
          "is_user_deleted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isUserDeleted"
          },
          "is_frozen" : {
            "type" : "boolean",
            "x-ballerina-name" : "isFrozen"
          },
          "is_im" : {
            "type" : "boolean",
            "x-ballerina-name" : "isIm"
          },
          "is_open" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOpen"
          },
          "created" : {
            "type" : "integer"
          },
          "is_ext_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExtShared"
          },
          "priority" : {
            "type" : "number"
          },
          "unread_count_display" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCountDisplay"
          },
          "version" : {
            "type" : "integer"
          },
          "shares" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjShares2"
            }
          },
          "unread_count" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCount"
          },
          "is_starred" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStarred"
          },
          "is_archived" : {
            "type" : "boolean",
            "x-ballerina-name" : "isArchived"
          },
          "is_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isShared"
          },
          "pin_count" : {
            "type" : "integer",
            "x-ballerina-name" : "pinCount"
          },
          "id" : {
            "$ref" : "#/components/schemas/DmIdDef"
          },
          "is_org_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOrgShared"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "latest" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjLatest2"
            }
          },
          "parent_conversation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjParentConversation2"
            },
            "x-ballerina-name" : "parentConversation"
          }
        },
        "additionalProperties" : false
      },
      "TeamProfileGetResponseProfile" : {
        "required" : [ "fields" ],
        "type" : "object",
        "properties" : {
          "fields" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamProfileFieldObj"
            }
          }
        },
        "additionalProperties" : false
      },
      "ConversationsJoinErrorResponse" : {
        "title" : "ConversationsJoinErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "is_archived", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.join method"
      },
      "ConversationObjShares1" : {
        "required" : [ "is_active", "team", "user" ],
        "type" : "object",
        "properties" : {
          "is_active" : {
            "type" : "boolean",
            "x-ballerina-name" : "isActive"
          },
          "accepted_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "acceptedUser"
          },
          "team" : {
            "$ref" : "#/components/schemas/TeamObj"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "ConversationObjShares2" : {
        "required" : [ "date_create", "id", "is_active", "name", "team" ],
        "type" : "object",
        "properties" : {
          "is_active" : {
            "type" : "boolean",
            "x-ballerina-name" : "isActive"
          },
          "date_create" : {
            "type" : "integer",
            "x-ballerina-name" : "dateCreate"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/TeamDef"
          },
          "team" : {
            "$ref" : "#/components/schemas/TeamObj"
          }
        },
        "additionalProperties" : false
      },
      "AppsPermissionsInfoResponseInfoMpim" : {
        "type" : "object",
        "properties" : {
          "resources" : {
            "$ref" : "#/components/schemas/ResourcesObj"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        }
      },
      "UsersProfileGetErrorResponse" : {
        "title" : "UsersProfileGetErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "user_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.profile.get method"
      },
      "ChatPostMessageErrorResponse" : {
        "title" : "ChatPostMessageErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "channel_not_found", "not_in_channel", "is_archived", "msg_too_long", "no_text", "too_many_attachments", "rate_limited", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response chat.postMessage method"
      },
      "AdminConversationsGetTeamsResponseResponseMetadata" : {
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "AdminAppsApproveBody" : {
        "type" : "object",
        "properties" : {
          "team_id" : {
            "type" : "string",
            "x-ballerina-name" : "teamId"
          },
          "app_id" : {
            "type" : "string",
            "description" : "The id of the app to approve",
            "x-ballerina-name" : "appId"
          },
          "request_id" : {
            "type" : "string",
            "description" : "The id of the request to approve",
            "x-ballerina-name" : "requestId"
          }
        }
      },
      "UserIdDef" : {
        "title" : "User ID",
        "pattern" : "^[UW][A-Z0-9]{2,}$",
        "type" : "string"
      },
      "UsersSetPresenceBody" : {
        "required" : [ "presence" ],
        "type" : "object",
        "properties" : {
          "presence" : {
            "type" : "string",
            "description" : "Either `auto` or `away`"
          }
        }
      },
      "AppsPermissionsInfoResponseInfoGroup" : {
        "type" : "object",
        "properties" : {
          "resources" : {
            "$ref" : "#/components/schemas/ResourcesObj"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        }
      },
      "ConversationsRepliesErrorResponse" : {
        "title" : "ConversationsRepliesErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "missing_scope", "channel_not_found", "thread_not_found", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.replies method"
      },
      "200200AnyOf122" : {
        "required" : [ "ok", "team", "user" ],
        "type" : "object",
        "properties" : {
          "team" : {
            "$ref" : "#/components/schemas/200Team1"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/200User1"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for 'identity.basic,identity.email' scopes"
      },
      "SubteamObjPrefs" : {
        "required" : [ "channels", "groups" ],
        "type" : "object",
        "properties" : {
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelIdDef"
            }
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GroupIdDef"
            }
          }
        },
        "additionalProperties" : false
      },
      "AppsPermissionsRequestErrorResponse" : {
        "title" : "AppsPermissionsRequestErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_trigger", "trigger_exchanged", "invalid_scope", "invalid_user", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from apps.permissions.request method"
      },
      "AppsPermissionsResourcesListResponse" : {
        "title" : "AppsPermissionsResourcesListResponse",
        "required" : [ "ok", "resources" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AppsPermissionsResourcesListResponseResources"
            }
          },
          "response_metadata" : {
            "$ref" : "#/components/schemas/AppsPermissionsResourcesListResponseResponseMetadata"
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for successful response apps.permissions.resources.list method"
      },
      "ChatMeMessageErrorResponse" : {
        "title" : "ChatMeMessageErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "channel_not_found", "not_in_channel", "is_archived", "msg_too_long", "no_text", "rate_limited", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.meMessage method"
      },
      "ConversationsListResponseResponseMetadata" : {
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "ConversationObjLatest" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/MessageObj"
        }, {
          "$ref" : "#/components/schemas/LatestAnyOf21"
        } ]
      },
      "SubteamIdDef" : {
        "title" : "Subteam ID",
        "pattern" : "^S[A-Z0-9]{2,}$",
        "type" : "string"
      },
      "AdminConversationsInviteErrorResponse" : {
        "title" : "AdminConversationsInviteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "channel_not_found", "channel_type_not_supported", "default_org_wide_channel", "restricted_action", "user_must_be_admin", "failed_for_some_users" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for error response from admin.conversations.invite"
      },
      "AppsPermissionsResourcesListErrorResponse" : {
        "title" : "AppsPermissionsResourcesListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_cursor", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from apps.permissions.resources.list method"
      },
      "ConversationsMarkResponse" : {
        "title" : "ConversationsMarkResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.mark method"
      },
      "StarsListErrorResponse" : {
        "title" : "StarsListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from stars.list method"
      },
      "FileObj" : {
        "title" : "file object",
        "type" : "object",
        "properties" : {
          "filetype" : {
            "type" : "string"
          },
          "thumb_360" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb360"
          },
          "thumb_160" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb160"
          },
          "date_delete" : {
            "type" : "integer",
            "x-ballerina-name" : "dateDelete"
          },
          "thumb_480" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb480"
          },
          "pinned_info" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PinnedInfoDef"
            } ],
            "x-ballerina-name" : "pinnedInfo"
          },
          "thumb_800" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb800"
          },
          "thumb_720" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb720"
          },
          "non_owner_editable" : {
            "type" : "boolean",
            "x-ballerina-name" : "nonOwnerEditable"
          },
          "thumb_960" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb960"
          },
          "thumb_800_w" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb800W"
          },
          "mode" : {
            "type" : "string"
          },
          "external_url" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "externalUrl"
          },
          "is_tombstoned" : {
            "type" : "boolean",
            "x-ballerina-name" : "isTombstoned"
          },
          "num_stars" : {
            "type" : "integer",
            "x-ballerina-name" : "numStars"
          },
          "image_exif_rotation" : {
            "type" : "integer",
            "x-ballerina-name" : "imageExifRotation"
          },
          "id" : {
            "$ref" : "#/components/schemas/FileIdDef"
          },
          "state" : {
            "type" : "string"
          },
          "thumb_64" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb64"
          },
          "created" : {
            "type" : "integer"
          },
          "last_editor" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "lastEditor"
          },
          "thumb_480_w" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb480W"
          },
          "thumb_960_h" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb960H"
          },
          "url_private_download" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "urlPrivateDownload"
          },
          "permalink_public" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "permalinkPublic"
          },
          "has_rich_preview" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasRichPreview"
          },
          "is_starred" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStarred"
          },
          "channels" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelIdDef"
            }
          },
          "size" : {
            "type" : "integer"
          },
          "comments_count" : {
            "type" : "integer",
            "x-ballerina-name" : "commentsCount"
          },
          "name" : {
            "type" : "string"
          },
          "permalink" : {
            "type" : "string",
            "format" : "uri"
          },
          "public_url_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "publicUrlShared"
          },
          "updated" : {
            "type" : "integer"
          },
          "original_w" : {
            "type" : "integer",
            "x-ballerina-name" : "originalW"
          },
          "thumb_480_h" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb480H"
          },
          "thumb_720_w" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb720W"
          },
          "preview" : {
            "type" : "string"
          },
          "external_id" : {
            "type" : "string",
            "x-ballerina-name" : "externalId"
          },
          "thumb_1024_h" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb1024H"
          },
          "title" : {
            "type" : "string"
          },
          "original_h" : {
            "type" : "integer",
            "x-ballerina-name" : "originalH"
          },
          "ims" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DmIdDef"
            }
          },
          "thumb_720_h" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb720H"
          },
          "shares" : {
            "$ref" : "#/components/schemas/FileObjShares"
          },
          "url_private" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "urlPrivate"
          },
          "thumb_960_w" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb960W"
          },
          "display_as_bot" : {
            "type" : "boolean",
            "x-ballerina-name" : "displayAsBot"
          },
          "timestamp" : {
            "type" : "integer"
          },
          "editor" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "thumb_80" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb80"
          },
          "editable" : {
            "type" : "boolean"
          },
          "groups" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GroupIdDef"
            }
          },
          "is_external" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExternal"
          },
          "thumb_360_h" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb360H"
          },
          "pretty_type" : {
            "type" : "string",
            "x-ballerina-name" : "prettyType"
          },
          "external_type" : {
            "type" : "string",
            "x-ballerina-name" : "externalType"
          },
          "user_team" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TeamDef"
            } ],
            "x-ballerina-name" : "userTeam"
          },
          "pinned_to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelDef"
            },
            "x-ballerina-name" : "pinnedTo"
          },
          "thumb_800_h" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb800H"
          },
          "source_team" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TeamDef"
            } ],
            "x-ballerina-name" : "sourceTeam"
          },
          "is_public" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPublic"
          },
          "thumb_360_w" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb360W"
          },
          "thumb_tiny" : {
            "type" : "string",
            "x-ballerina-name" : "thumbTiny"
          },
          "mimetype" : {
            "type" : "string"
          },
          "reactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReactionObj"
            }
          },
          "thumb_1024_w" : {
            "type" : "integer",
            "x-ballerina-name" : "thumb1024W"
          },
          "thumb_1024" : {
            "type" : "string",
            "format" : "uri",
            "x-ballerina-name" : "thumb1024"
          },
          "user" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "AuthTestResponse" : {
        "title" : "AuthTestResponse",
        "required" : [ "ok", "team", "team_id", "url", "user", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "userId"
          },
          "is_enterprise_install" : {
            "type" : "boolean",
            "x-ballerina-name" : "isEnterpriseInstall"
          },
          "team" : {
            "type" : "string"
          },
          "team_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TeamDef"
            } ],
            "x-ballerina-name" : "teamId"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "type" : "string"
          },
          "bot_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BotIdDef"
            } ],
            "x-ballerina-name" : "botId"
          },
          "url" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response auth.test method"
      },
      "ConversationsSetTopicResponse" : {
        "title" : "ConversationsSetTopicResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.setTopic method"
      },
      "PinsAddErrorResponse" : {
        "title" : "PinsAddErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "message_not_found", "channel_not_found", "no_item_specified", "already_pinned", "permission_denied", "file_not_shared", "not_pinnable", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from pins.add method"
      },
      "AdminConversationsArchiveBody" : {
        "required" : [ "channel_id" ],
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to archive",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "TopicPurposeCreatorDef" : {
        "title" : "User ID or empty string, used for topic and purpose creation",
        "pattern" : "^[UW][A-Z0-9]{8,}$|^$",
        "type" : "string"
      },
      "ReminderIdDef" : {
        "title" : "Reminder ID",
        "pattern" : "^Rm[A-Z0-9]{8,}$",
        "type" : "string"
      },
      "AdminConversationsGetTeamsErrorResponse" : {
        "title" : "AdminConversationsGetTeamsErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "channel_not_found", "channel_type_not_supported", "unsupported_team_type", "restricted_action", "could_not_get_teams", "invalid_cursor", "invalid_limit" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.getTeams"
      },
      "ConversationsCreateErrorResponse" : {
        "title" : "ConversationsCreateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "detail" : {
            "type" : "string"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "name_taken", "restricted_action", "no_channel", "invalid_name_required", "invalid_name_punctuation", "invalid_name_maxlength", "invalid_name_specials", "invalid_name", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.create method"
      },
      "ChatScheduleMessageBody" : {
        "type" : "object",
        "properties" : {
          "link_names" : {
            "type" : "boolean",
            "description" : "Find and link channel names and usernames",
            "x-ballerina-name" : "linkNames"
          },
          "as_user" : {
            "type" : "boolean",
            "description" : "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)",
            "x-ballerina-name" : "asUser"
          },
          "attachments" : {
            "type" : "string",
            "description" : "A JSON-based array of structured attachments, presented as a URL-encoded string"
          },
          "blocks" : {
            "type" : "string",
            "description" : "A JSON-based array of structured blocks, presented as a URL-encoded string"
          },
          "thread_ts" : {
            "type" : "number",
            "description" : "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead",
            "x-ballerina-name" : "threadTs"
          },
          "unfurl_media" : {
            "type" : "boolean",
            "description" : "Pass false to disable unfurling of media content",
            "x-ballerina-name" : "unfurlMedia"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details"
          },
          "reply_broadcast" : {
            "type" : "boolean",
            "description" : "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`",
            "x-ballerina-name" : "replyBroadcast"
          },
          "unfurl_links" : {
            "type" : "boolean",
            "description" : "Pass true to enable unfurling of primarily text-based content",
            "x-ballerina-name" : "unfurlLinks"
          },
          "parse" : {
            "type" : "string",
            "description" : "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)"
          },
          "text" : {
            "type" : "string",
            "description" : "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail"
          },
          "post_at" : {
            "type" : "string",
            "description" : "Unix EPOCH timestamp of time in future to send the message",
            "x-ballerina-name" : "postAt"
          }
        }
      },
      "UsersConversationsResponseResponseMetadata" : {
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "AdminConversationsRestrictAccessRemoveGroupBody" : {
        "required" : [ "channel_id", "group_id", "team_id", "token" ],
        "type" : "object",
        "properties" : {
          "group_id" : {
            "type" : "string",
            "description" : "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel",
            "x-ballerina-name" : "groupId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization",
            "x-ballerina-name" : "teamId"
          },
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to remove the linked group from",
            "x-ballerina-name" : "channelId"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.conversations:write`"
          }
        }
      },
      "UsergroupsDisableBody" : {
        "required" : [ "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "type" : "string",
            "description" : "The encoded ID of the User Group to disable"
          },
          "include_count" : {
            "type" : "boolean",
            "description" : "Include the number of users in the User Group",
            "x-ballerina-name" : "includeCount"
          }
        }
      },
      "UsergroupsListErrorResponse" : {
        "title" : "UsergroupsListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_require", "fatal_error", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.list method"
      },
      "ConversationObjDisplayCounts" : {
        "required" : [ "display_counts", "guest_counts" ],
        "type" : "object",
        "properties" : {
          "display_counts" : {
            "type" : "integer",
            "x-ballerina-name" : "displayCounts"
          },
          "guest_counts" : {
            "type" : "integer",
            "x-ballerina-name" : "guestCounts"
          }
        },
        "additionalProperties" : false
      },
      "DndSetSnoozeErrorResponse" : {
        "title" : "DndSetSnoozeErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "missing_duration", "snooze_failed", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "too_long", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from dnd.setSnooze method"
      },
      "AdminUsersInviteBody" : {
        "required" : [ "channel_ids", "email", "team_id" ],
        "type" : "object",
        "properties" : {
          "channel_ids" : {
            "type" : "string",
            "description" : "A comma-separated list of `channel_id`s for this user to join. At least one channel is required",
            "x-ballerina-name" : "channelIds"
          },
          "is_ultra_restricted" : {
            "type" : "boolean",
            "description" : "Is this user a single channel guest user? (default: false)",
            "x-ballerina-name" : "isUltraRestricted"
          },
          "custom_message" : {
            "type" : "string",
            "description" : "An optional message to send to the user in the invite email",
            "x-ballerina-name" : "customMessage"
          },
          "guest_expiration_ts" : {
            "type" : "string",
            "description" : "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date",
            "x-ballerina-name" : "guestExpirationTs"
          },
          "is_restricted" : {
            "type" : "boolean",
            "description" : "Is this user a multi-channel guest user? (default: false)",
            "x-ballerina-name" : "isRestricted"
          },
          "resend" : {
            "type" : "boolean",
            "description" : "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)"
          },
          "real_name" : {
            "type" : "string",
            "description" : "Full name of the user",
            "x-ballerina-name" : "realName"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the person to invite"
          }
        }
      },
      "ConversationsHistoryResponseChannelActionsTs" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/ChannelActionsTsAnyOf1"
        }, {
          "$ref" : "#/components/schemas/ChannelActionsTsChannelActionsTsAnyOf12"
        } ]
      },
      "UsersLookupByEmailResponse" : {
        "title" : "UsersLookupByEmailResponse",
        "required" : [ "ok", "user" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserObj"
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for successful response from users.lookupByEmail method"
      },
      "MessageObjAttachments" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "image_height" : {
            "type" : "integer",
            "x-ballerina-name" : "imageHeight"
          },
          "image_url" : {
            "type" : "string",
            "x-ballerina-name" : "imageUrl"
          },
          "id" : {
            "type" : "integer"
          },
          "image_width" : {
            "type" : "integer",
            "x-ballerina-name" : "imageWidth"
          },
          "fallback" : {
            "type" : "string"
          },
          "image_bytes" : {
            "type" : "integer",
            "x-ballerina-name" : "imageBytes"
          }
        },
        "additionalProperties" : false
      },
      "CommentIdDef" : {
        "title" : "File Comment ID",
        "pattern" : "^Fc[A-Z0-9]{8,}$",
        "type" : "string"
      },
      "ConversationsArchiveResponse" : {
        "title" : "ConversationsArchiveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.archive method"
      },
      "TeamProfileFieldOptionObj" : {
        "type" : "object",
        "properties" : {
          "is_scim" : {
            "type" : "boolean",
            "nullable" : true,
            "x-ballerina-name" : "isScim"
          },
          "is_custom" : {
            "type" : "boolean",
            "nullable" : true,
            "x-ballerina-name" : "isCustom"
          },
          "is_protected" : {
            "type" : "boolean",
            "nullable" : true,
            "x-ballerina-name" : "isProtected"
          },
          "is_multiple_entry" : {
            "type" : "boolean",
            "nullable" : true,
            "x-ballerina-name" : "isMultipleEntry"
          }
        },
        "additionalProperties" : false
      },
      "FilePin" : {
        "title" : "File Pin",
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "created" : {
            "type" : "integer"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "file" ]
          },
          "created_by" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "createdBy"
          }
        },
        "additionalProperties" : false
      },
      "RtmConnectErrorResponse" : {
        "title" : "RtmConnectErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from rtm.connect method"
      },
      "ConversationsKickBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "ID of conversation to remove user from"
          },
          "user" : {
            "type" : "string",
            "description" : "User ID to be removed"
          }
        }
      },
      "TzTzAnyOf12" : {
        "type" : "string"
      },
      "UserObjTeamProfile" : {
        "required" : [ "fields" ],
        "type" : "object",
        "properties" : {
          "fields" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamProfileFieldObj"
            }
          }
        },
        "additionalProperties" : false
      },
      "CallsEndBody" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "duration" : {
            "type" : "integer",
            "description" : "Call duration in seconds"
          },
          "id" : {
            "type" : "string",
            "description" : "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method"
          }
        }
      },
      "MessagePin" : {
        "title" : "Message Pin",
        "type" : "object",
        "properties" : {
          "created" : {
            "type" : "integer"
          },
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "message" : {
            "$ref" : "#/components/schemas/MessageObj"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "message" ]
          },
          "created_by" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "createdBy"
          }
        },
        "additionalProperties" : false
      },
      "DiscoverableAnyOf1" : {
        "nullable" : true
      },
      "ChatUnfurlErrorResponse" : {
        "title" : "ChatUnfurlErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "cannot_unfurl_url", "cannot_find_service", "missing_unfurls", "cannot_prompt", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.unfurl method"
      },
      "CallsUpdateBody" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "join_url" : {
            "type" : "string",
            "description" : "The URL required for a client to join the Call",
            "x-ballerina-name" : "joinUrl"
          },
          "desktop_app_join_url" : {
            "type" : "string",
            "description" : "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL",
            "x-ballerina-name" : "desktopAppJoinUrl"
          },
          "id" : {
            "type" : "string",
            "description" : "`id` returned by the [`calls.add`](/methods/calls.add) method"
          },
          "title" : {
            "type" : "string",
            "description" : "The name of the Call"
          }
        }
      },
      "UsergroupsEnableErrorResponse" : {
        "title" : "UsergroupsEnableErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_require", "fatal_error", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.enable method"
      },
      "ChatScheduleMessageErrorResponse" : {
        "title" : "ChatScheduleMessageErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_time", "time_in_past", "time_too_far", "channel_not_found", "not_in_channel", "is_archived", "msg_too_long", "no_text", "restricted_action", "restricted_action_read_only_channel", "restricted_action_thread_only_channel", "restricted_action_non_threadable_channel", "too_many_attachments", "rate_limited", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response chat.scheduleMessage method"
      },
      "ConversationsKickErrorResponse" : {
        "title" : "ConversationsKickErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "cant_kick_self", "not_in_channel", "cant_kick_from_general", "restricted_action", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response conversations.kick method"
      },
      "UsergroupsUpdateResponse" : {
        "title" : "UsergroupsUpdateResponse",
        "required" : [ "ok", "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "$ref" : "#/components/schemas/SubteamObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.update method"
      },
      "ReactionsRemoveBody" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "File to remove reaction from"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel where the message to remove reaction from was posted"
          },
          "name" : {
            "type" : "string",
            "description" : "Reaction (emoji) name"
          },
          "file_comment" : {
            "type" : "string",
            "description" : "File comment to remove reaction from",
            "x-ballerina-name" : "fileComment"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the message to remove reaction from"
          }
        }
      },
      "ChatDeleteScheduledMessageErrorResponse" : {
        "title" : "ChatDeleteScheduledMessageErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_scheduled_message_id", "channel_not_found", "bad_token", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.deleteScheduledMessage method"
      },
      "SubteamObj" : {
        "title" : "Subteam/Usergroup Object",
        "required" : [ "auto_provision", "auto_type", "created_by", "date_create", "date_delete", "date_update", "deleted_by", "description", "enterprise_subteam_id", "handle", "id", "is_external", "is_subteam", "is_usergroup", "name", "prefs", "team_id", "updated_by" ],
        "type" : "object",
        "properties" : {
          "channel_count" : {
            "type" : "integer",
            "x-ballerina-name" : "channelCount"
          },
          "date_delete" : {
            "type" : "integer",
            "x-ballerina-name" : "dateDelete"
          },
          "date_update" : {
            "type" : "integer",
            "x-ballerina-name" : "dateUpdate"
          },
          "deleted_by" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubteamObjDeletedBy"
            },
            "x-ballerina-name" : "deletedBy"
          },
          "description" : {
            "type" : "string"
          },
          "is_external" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExternal"
          },
          "handle" : {
            "type" : "string"
          },
          "team_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TeamDef"
            } ],
            "x-ballerina-name" : "teamId"
          },
          "created_by" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "createdBy"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          },
          "auto_type" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubteamObjAutoType"
            },
            "x-ballerina-name" : "autoType"
          },
          "prefs" : {
            "$ref" : "#/components/schemas/SubteamObjPrefs"
          },
          "is_subteam" : {
            "type" : "boolean",
            "x-ballerina-name" : "isSubteam"
          },
          "user_count" : {
            "type" : "integer",
            "x-ballerina-name" : "userCount"
          },
          "date_create" : {
            "type" : "integer",
            "x-ballerina-name" : "dateCreate"
          },
          "name" : {
            "type" : "string"
          },
          "updated_by" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "updatedBy"
          },
          "is_usergroup" : {
            "type" : "boolean",
            "x-ballerina-name" : "isUsergroup"
          },
          "id" : {
            "$ref" : "#/components/schemas/SubteamIdDef"
          },
          "auto_provision" : {
            "type" : "boolean",
            "x-ballerina-name" : "autoProvision"
          },
          "enterprise_subteam_id" : {
            "type" : "string",
            "x-ballerina-name" : "enterpriseSubteamId"
          }
        },
        "additionalProperties" : false
      },
      "CommentObj" : {
        "title" : "File Comment Object",
        "required" : [ "comment", "created", "id", "is_intro", "timestamp", "user" ],
        "type" : "object",
        "properties" : {
          "is_starred" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStarred"
          },
          "created" : {
            "type" : "integer"
          },
          "num_stars" : {
            "type" : "integer",
            "x-ballerina-name" : "numStars"
          },
          "is_intro" : {
            "type" : "boolean",
            "x-ballerina-name" : "isIntro"
          },
          "pinned_info" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/PinnedInfoDef"
            } ],
            "x-ballerina-name" : "pinnedInfo"
          },
          "comment" : {
            "type" : "string"
          },
          "reactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReactionObj"
            }
          },
          "id" : {
            "$ref" : "#/components/schemas/CommentIdDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "pinned_to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelDef"
            },
            "x-ballerina-name" : "pinnedTo"
          },
          "timestamp" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "ConversationsSetPurposeResponse" : {
        "title" : "ConversationsSetPurposeResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.setPurpose method"
      },
      "AuthRevokeErrorResponse" : {
        "title" : "AuthRevokeErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from auth.revoke method"
      },
      "ChatPostEphemeralErrorResponse" : {
        "title" : "ChatPostEphemeralErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "channel_not_found", "is_archived", "msg_too_long", "no_text", "restricted_action", "too_many_attachments", "user_not_in_channel", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from chat.postEphemeral method"
      },
      "ResourcesObj" : {
        "title" : "resources in info from apps.permissions.info",
        "required" : [ "ids" ],
        "type" : "object",
        "properties" : {
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "anyOf" : [ {
                  "$ref" : "#/components/schemas/ChannelDef"
                }, {
                  "$ref" : "#/components/schemas/TeamDef"
                } ]
              }
            }
          },
          "excluded_ids" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "anyOf" : [ {
                  "$ref" : "#/components/schemas/ChannelDef"
                }, {
                  "$ref" : "#/components/schemas/TeamDef"
                } ]
              }
            },
            "x-ballerina-name" : "excludedIds"
          },
          "wildcard" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false
      },
      "FilesRevokePublicURLResponse" : {
        "title" : "FilesRevokePublicURLResponse",
        "required" : [ "file", "ok" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from files.revokePublicURL method"
      },
      "200Items" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/FilePin"
        }, {
          "$ref" : "#/components/schemas/MessagePin"
        } ]
      },
      "UsersInfoErrorResponse" : {
        "title" : "UsersInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "user_not_found", "user_not_visible", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.info method"
      },
      "PagingObj" : {
        "title" : "paging object",
        "required" : [ "page", "total" ],
        "type" : "object",
        "properties" : {
          "per_page" : {
            "type" : "integer",
            "x-ballerina-name" : "perPage"
          },
          "total" : {
            "type" : "integer"
          },
          "pages" : {
            "type" : "integer"
          },
          "spill" : {
            "type" : "integer"
          },
          "count" : {
            "type" : "integer"
          },
          "page" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "200AnyOf11" : {
        "required" : [ "channel", "message", "ok", "type" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "message" : {
            "$ref" : "#/components/schemas/MessageObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "message" ]
          }
        },
        "additionalProperties" : false
      },
      "200AnyOf12" : {
        "required" : [ "ok", "team", "user" ],
        "type" : "object",
        "properties" : {
          "team" : {
            "$ref" : "#/components/schemas/200Team"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "user" : {
            "$ref" : "#/components/schemas/200User"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for 'identity.basic' scope"
      },
      "ChannelIdDef" : {
        "title" : "Channel ID",
        "pattern" : "^[C][A-Z0-9]{2,}$",
        "type" : "string"
      },
      "ReactionsRemoveErrorResponse" : {
        "title" : "ReactionsRemoveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "file_not_found", "file_comment_not_found", "message_not_found", "no_item_specified", "invalid_name", "no_reaction", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reactions.remove method"
      },
      "SubteamObjDeletedBy" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/DeletedByAnyOf1"
        }, {
          "$ref" : "#/components/schemas/UserIdDef"
        } ]
      },
      "AdminConversationsInviteResponse" : {
        "title" : "AdminConversationsInviteResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.invite"
      },
      "UserObjTz" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/TzAnyOf1"
        }, {
          "$ref" : "#/components/schemas/TzTzAnyOf12"
        } ]
      },
      "UsersSetPhotoResponse" : {
        "title" : "UsersSetPhotoResponse",
        "required" : [ "ok", "profile" ],
        "type" : "object",
        "properties" : {
          "profile" : {
            "$ref" : "#/components/schemas/UsersSetPhotoResponseProfile"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.setPhoto method"
      },
      "AppsPermissionsInfoResponseInfoTeam" : {
        "required" : [ "resources", "scopes" ],
        "type" : "object",
        "properties" : {
          "resources" : {
            "$ref" : "#/components/schemas/ResourcesObj"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        }
      },
      "TeamProfileGetErrorResponse" : {
        "title" : "TeamProfileGetErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "no_permission", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_typ", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeou", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from team.profile.get method"
      },
      "UsersSetActiveResponse" : {
        "title" : "UsersSetActiveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.setActive method"
      },
      "ConversationsRenameResponse" : {
        "title" : "ConversationsRenameResponse",
        "required" : [ "channel", "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ConversationObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.rename method"
      },
      "TeamInfoResponse" : {
        "title" : "TeamInfoResponse",
        "required" : [ "ok", "team" ],
        "type" : "object",
        "properties" : {
          "team" : {
            "$ref" : "#/components/schemas/TeamObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from team.info method"
      },
      "FilesRemoteAddBody" : {
        "type" : "object",
        "properties" : {
          "filetype" : {
            "type" : "string",
            "description" : "type of file"
          },
          "external_url" : {
            "type" : "string",
            "description" : "URL of the remote file",
            "x-ballerina-name" : "externalUrl"
          },
          "preview_image" : {
            "type" : "string",
            "description" : "Preview of the document via `multipart/form-data`",
            "x-ballerina-name" : "previewImage"
          },
          "external_id" : {
            "type" : "string",
            "description" : "Creator defined GUID for the file",
            "x-ballerina-name" : "externalId"
          },
          "indexable_file_contents" : {
            "type" : "string",
            "description" : "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file",
            "x-ballerina-name" : "indexableFileContents"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the file being shared"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `remote_files:write`"
          }
        }
      },
      "200Team" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "$ref" : "#/components/schemas/TeamDef"
          }
        },
        "additionalProperties" : false
      },
      "UsergroupsUpdateErrorResponse" : {
        "title" : "UsergroupsUpdateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "permission_denied", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_require", "fatal_error", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.update method"
      },
      "AdminConversationsGetConversationPrefsResponsePrefsWhoCanPost" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "user" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RemindersCompleteBody" : {
        "type" : "object",
        "properties" : {
          "reminder" : {
            "type" : "string",
            "description" : "The ID of the reminder to be marked as complete"
          }
        }
      },
      "ChatGetPermalinkResponse" : {
        "title" : "ChatGetPermalinkResponse",
        "required" : [ "channel", "ok", "permalink" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "permalink" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response chat.getPermalink"
      },
      "UsersSetPhotoErrorResponse" : {
        "title" : "UsersSetPhotoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "dims" : {
            "type" : "string",
            "description" : "possibly DEV/QA only"
          },
          "debug_step" : {
            "type" : "string",
            "description" : "possibly DEV/QA only",
            "x-ballerina-name" : "debugStep"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_image", "too_large", "too_many_frames", "not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          },
          "time_ident" : {
            "type" : "integer",
            "description" : "possibly DEV/QA only",
            "x-ballerina-name" : "timeIdent"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.setPhoto method"
      },
      "DmIdDef" : {
        "title" : "Direct Message Channel ID",
        "pattern" : "^[D][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "DeprecationWarning" : {
        "title" : "deprecation_warning",
        "required" : [ "messages", "warnings" ],
        "type" : "object",
        "properties" : {
          "warnings" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "method_deprecated" ]
            }
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false
      },
      "CommentsObj" : {
        "title" : "file comments object",
        "type" : "array",
        "items" : { }
      },
      "UsergroupsDisableErrorResponse" : {
        "title" : "UsergroupsDisableErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "permission_denied", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.disable method"
      },
      "AdminUsersSessionResetBody" : {
        "required" : [ "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user to wipe sessions for",
            "x-ballerina-name" : "userId"
          },
          "mobile_only" : {
            "type" : "boolean",
            "description" : "Only expire mobile sessions (default: false)",
            "x-ballerina-name" : "mobileOnly"
          },
          "web_only" : {
            "type" : "boolean",
            "description" : "Only expire web sessions (default: false)",
            "x-ballerina-name" : "webOnly"
          }
        }
      },
      "FilesDeleteBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "ID of file to delete"
          }
        }
      },
      "UsersSetActiveErrorResponse" : {
        "title" : "UsersSetActiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "request_timeout", "fatal_error", "internal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.setActive method"
      },
      "ChannelObjLatest" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/MessageObj"
        }, {
          "$ref" : "#/components/schemas/LatestAnyOf2"
        } ]
      },
      "ChannelObj" : {
        "title" : "Channel Object",
        "required" : [ "created", "creator", "id", "is_channel", "is_mpim", "is_org_shared", "is_private", "is_shared", "members", "name", "name_normalized", "purpose", "topic" ],
        "type" : "object",
        "properties" : {
          "is_private" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPrivate"
          },
          "accepted_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "acceptedUser"
          },
          "purpose" : {
            "$ref" : "#/components/schemas/ChannelObjPurpose"
          },
          "is_moved" : {
            "type" : "integer",
            "x-ballerina-name" : "isMoved"
          },
          "is_pending_ext_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPendingExtShared"
          },
          "unread_count" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCount"
          },
          "pending_shared" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "pendingShared"
          },
          "is_channel" : {
            "type" : "boolean",
            "x-ballerina-name" : "isChannel"
          },
          "is_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isShared"
          },
          "members" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          },
          "is_non_threadable" : {
            "type" : "boolean",
            "x-ballerina-name" : "isNonThreadable"
          },
          "is_read_only" : {
            "type" : "boolean",
            "x-ballerina-name" : "isReadOnly"
          },
          "id" : {
            "$ref" : "#/components/schemas/ChannelIdDef"
          },
          "previous_names" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelNameDef"
            },
            "x-ballerina-name" : "previousNames"
          },
          "latest" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelObjLatest"
            }
          },
          "last_read" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "lastRead"
          },
          "creator" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "is_frozen" : {
            "type" : "boolean",
            "x-ballerina-name" : "isFrozen"
          },
          "is_member" : {
            "type" : "boolean",
            "x-ballerina-name" : "isMember"
          },
          "is_mpim" : {
            "type" : "boolean",
            "x-ballerina-name" : "isMpim"
          },
          "created" : {
            "type" : "integer"
          },
          "name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "nameNormalized"
          },
          "priority" : {
            "type" : "number"
          },
          "unread_count_display" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCountDisplay"
          },
          "unlinked" : {
            "title" : "Field to determine whether a channel has ever been shared/disconnected in the past",
            "type" : "integer"
          },
          "is_archived" : {
            "type" : "boolean",
            "x-ballerina-name" : "isArchived"
          },
          "is_general" : {
            "type" : "boolean",
            "x-ballerina-name" : "isGeneral"
          },
          "num_members" : {
            "type" : "integer",
            "x-ballerina-name" : "numMembers"
          },
          "name" : {
            "type" : "string"
          },
          "topic" : {
            "$ref" : "#/components/schemas/ChannelObjTopic"
          },
          "is_thread_only" : {
            "type" : "boolean",
            "x-ballerina-name" : "isThreadOnly"
          },
          "is_org_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOrgShared"
          }
        },
        "additionalProperties" : false
      },
      "DefaultErrorTemplate8" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate7" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "AdminUsersSetOwnerBody" : {
        "required" : [ "team_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "Id of the user to promote to owner",
            "x-ballerina-name" : "userId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "DefaultErrorTemplate6" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate5" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate4" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate3" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate2" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate1" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObjShares" : {
        "required" : [ "is_active", "team", "user" ],
        "type" : "object",
        "properties" : {
          "is_active" : {
            "type" : "boolean",
            "x-ballerina-name" : "isActive"
          },
          "accepted_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "acceptedUser"
          },
          "team" : {
            "$ref" : "#/components/schemas/TeamObj"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "AdminConversationsRenameResponse" : {
        "title" : "AdminConversationsRenameResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.disconnectShared"
      },
      "DefaultErrorTemplate9" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObj" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/InlineArrayItemsConversationObj"
        }
      },
      "UsersCountsErrorResponse" : {
        "title" : "UsersCountsErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Schema for error response users.getPresence method"
      },
      "DialogOpenResponse" : {
        "title" : "DialogOpenResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from dialog.open method"
      },
      "ChatMeMessageBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name"
          },
          "text" : {
            "type" : "string",
            "description" : "Text of the message to send"
          }
        }
      },
      "DefaultSuccessResponse72" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse71" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse70" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AdminConversationsSetConversationPrefsBody" : {
        "required" : [ "channel_id", "prefs" ],
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to set the prefs for",
            "x-ballerina-name" : "channelId"
          },
          "prefs" : {
            "type" : "string",
            "description" : "The prefs for this channel in a stringified JSON format"
          }
        }
      },
      "DefaultSuccessResponse69" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse68" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObjPurpose" : {
        "required" : [ "creator", "last_set", "value" ],
        "type" : "object",
        "properties" : {
          "last_set" : {
            "type" : "integer",
            "x-ballerina-name" : "lastSet"
          },
          "creator" : {
            "$ref" : "#/components/schemas/TopicPurposeCreatorDef"
          },
          "value" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "DefaultSuccessResponse67" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse66" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse65" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsInfoErrorResponse" : {
        "title" : "ConversationsInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "missing_scope", "channel_not_found", "team_added_to_org", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.info method"
      },
      "DefaultSuccessResponse64" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "TeamIntegrationLogsErrorResponse" : {
        "title" : "TeamIntegrationLogsErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from team.integrationLogs method"
      },
      "DefaultSuccessResponse63" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "RemindersListErrorResponse" : {
        "title" : "RemindersListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reminders.list method"
      },
      "AdminEmojiAddAliasBody" : {
        "required" : [ "alias_for", "name", "token" ],
        "type" : "object",
        "properties" : {
          "alias_for" : {
            "type" : "string",
            "description" : "The alias of the emoji",
            "x-ballerina-name" : "aliasFor"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.teams:write`"
          }
        }
      },
      "UserObjTeamProfile1" : {
        "required" : [ "fields" ],
        "type" : "object",
        "properties" : {
          "fields" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamProfileFieldObj"
            }
          }
        },
        "additionalProperties" : false
      },
      "TeamIntegrationLogsResponseLogs" : {
        "required" : [ "app_id", "app_type", "change_type", "date", "scope", "user_id", "user_name" ],
        "type" : "object",
        "properties" : {
          "date" : {
            "type" : "string"
          },
          "service_type" : {
            "type" : "string",
            "x-ballerina-name" : "serviceType"
          },
          "app_type" : {
            "type" : "string",
            "x-ballerina-name" : "appType"
          },
          "user_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "userId"
          },
          "user_name" : {
            "type" : "string",
            "x-ballerina-name" : "userName"
          },
          "scope" : {
            "type" : "string"
          },
          "service_id" : {
            "type" : "string",
            "x-ballerina-name" : "serviceId"
          },
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "change_type" : {
            "type" : "string",
            "x-ballerina-name" : "changeType"
          },
          "admin_app_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AppIdDef"
            } ],
            "x-ballerina-name" : "adminAppId"
          },
          "app_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AppIdDef"
            } ],
            "x-ballerina-name" : "appId"
          }
        },
        "additionalProperties" : false
      },
      "ChatScheduledMessagesListResponseScheduledMessages" : {
        "required" : [ "channel_id", "date_created", "id", "post_at" ],
        "type" : "object",
        "properties" : {
          "date_created" : {
            "pattern" : "^\\d{10}$",
            "type" : "integer",
            "x-ballerina-name" : "dateCreated"
          },
          "id" : {
            "pattern" : "^[Q][A-Z0-9]{8,}$",
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "post_at" : {
            "pattern" : "^\\d{10}$",
            "type" : "integer",
            "x-ballerina-name" : "postAt"
          },
          "channel_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ChannelIdDef"
            } ],
            "x-ballerina-name" : "channelId"
          }
        },
        "additionalProperties" : false
      },
      "AdminEmojiAddBody" : {
        "required" : [ "name", "token", "url" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included"
          },
          "url" : {
            "type" : "string",
            "description" : "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.teams:write`"
          }
        }
      },
      "AdminEmojiRemoveBody" : {
        "required" : [ "name", "token" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.teams:write`"
          }
        }
      },
      "AdminTeamsCreateBody" : {
        "required" : [ "team_domain", "team_name" ],
        "type" : "object",
        "properties" : {
          "team_description" : {
            "type" : "string",
            "description" : "Description for the team",
            "x-ballerina-name" : "teamDescription"
          },
          "team_domain" : {
            "type" : "string",
            "description" : "Team domain (for example, slacksoftballteam)",
            "x-ballerina-name" : "teamDomain"
          },
          "team_name" : {
            "type" : "string",
            "description" : "Team name (for example, Slack Softball Team)",
            "x-ballerina-name" : "teamName"
          },
          "team_discoverability" : {
            "type" : "string",
            "description" : "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`",
            "x-ballerina-name" : "teamDiscoverability"
          }
        }
      },
      "ConversationsLeaveErrorResponse" : {
        "title" : "ConversationsLeaveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "last_member", "missing_scope", "channel_not_found", "is_archived", "cant_leave_general", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.leave method"
      },
      "UsersProfileGetResponse" : {
        "title" : "UsersProfileGetResponse",
        "required" : [ "ok", "profile" ],
        "type" : "object",
        "properties" : {
          "profile" : {
            "$ref" : "#/components/schemas/UserProfileObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from users.profile.get method"
      },
      "PinsRemoveBody" : {
        "required" : [ "channel" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Channel where the item is pinned to"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the message to un-pin"
          }
        }
      },
      "ResponseMetadataObj" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/InlineArrayItemsResponseMetadataObj"
        }
      },
      "FilesDeleteErrorResponse" : {
        "title" : "FilesDeleteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "file_not_found", "file_deleted", "cant_delete_file", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response files.delete method"
      },
      "InlineResponseItems2002" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/200AnyOf12"
        }, {
          "$ref" : "#/components/schemas/200200AnyOf122"
        }, {
          "$ref" : "#/components/schemas/200200200AnyOf1223"
        }, {
          "$ref" : "#/components/schemas/200200200200AnyOf12234"
        } ]
      },
      "ConversationsListResponse" : {
        "title" : "ConversationsListResponse",
        "required" : [ "channels", "ok" ],
        "type" : "object",
        "properties" : {
          "channels" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObj"
            }
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConversationsListResponseResponseMetadata"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.list method"
      },
      "InlineResponseItems2001" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/200AnyOf11"
        }, {
          "$ref" : "#/components/schemas/200200AnyOf112"
        }, {
          "$ref" : "#/components/schemas/200200200AnyOf1123"
        } ]
      },
      "ChatUpdateBody" : {
        "required" : [ "channel", "ts" ],
        "type" : "object",
        "properties" : {
          "link_names" : {
            "type" : "string",
            "description" : "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`",
            "x-ballerina-name" : "linkNames"
          },
          "as_user" : {
            "type" : "string",
            "description" : "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users",
            "x-ballerina-name" : "asUser"
          },
          "attachments" : {
            "type" : "string",
            "description" : "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field"
          },
          "blocks" : {
            "type" : "string",
            "description" : "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel containing the message to be updated"
          },
          "parse" : {
            "type" : "string",
            "description" : "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`"
          },
          "text" : {
            "type" : "string",
            "description" : "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`"
          },
          "ts" : {
            "type" : "string",
            "description" : "Timestamp of the message to be updated"
          }
        }
      },
      "AdminAppsRestrictBody" : {
        "type" : "object",
        "properties" : {
          "team_id" : {
            "type" : "string",
            "x-ballerina-name" : "teamId"
          },
          "app_id" : {
            "type" : "string",
            "description" : "The id of the app to restrict",
            "x-ballerina-name" : "appId"
          },
          "request_id" : {
            "type" : "string",
            "description" : "The id of the request to restrict",
            "x-ballerina-name" : "requestId"
          }
        }
      },
      "AdminConversationsRenameBody" : {
        "required" : [ "channel_id", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to rename",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "DndEndSnoozeErrorResponse" : {
        "title" : "DndEndSnoozeErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "snooze_not_active", "snooze_end_failed", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from dnd.endSnooze method"
      },
      "AppsPermissionsRequestResponse" : {
        "title" : "AppsPermissionsRequestResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from apps.permissions.request method"
      },
      "DefaultSuccessResponse51" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse50" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "FilesCommentsDeleteBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "File to delete a comment from"
          },
          "id" : {
            "type" : "string",
            "description" : "The comment to delete"
          }
        }
      },
      "StarsAddBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "File to add star to"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)"
          },
          "file_comment" : {
            "type" : "string",
            "description" : "File comment to add star to",
            "x-ballerina-name" : "fileComment"
          },
          "timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the message to add star to"
          }
        }
      },
      "TeamObjSsoProvider" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "MigrationExchangeErrorResponse" : {
        "title" : "MigrationExchangeErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_enterprise_team", "too_many_users", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from migration.exchange method"
      },
      "AdminUsergroupsAddChannelsBody" : {
        "required" : [ "channel_ids", "usergroup_id" ],
        "type" : "object",
        "properties" : {
          "channel_ids" : {
            "type" : "string",
            "description" : "Comma separated string of channel IDs",
            "x-ballerina-name" : "channelIds"
          },
          "usergroup_id" : {
            "type" : "string",
            "description" : "ID of the IDP group to add default channels for",
            "x-ballerina-name" : "usergroupId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The workspace to add default channels in",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "CallsParticipantsRemoveBody" : {
        "required" : [ "id", "users" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "`id` returned by the [`calls.add`](/methods/calls.add) method"
          },
          "users" : {
            "type" : "string",
            "description" : "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)"
          }
        }
      },
      "DefaultSuccessResponse48" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "FileIdDef" : {
        "title" : "File ID",
        "pattern" : "^[F][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "DefaultSuccessResponse47" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse46" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse45" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse44" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AppsPermissionsInfoResponseInfoAppHome" : {
        "type" : "object",
        "properties" : {
          "resources" : {
            "$ref" : "#/components/schemas/ResourcesObj"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        }
      },
      "DefaultSuccessResponse43" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse42" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsUnarchiveResponse" : {
        "title" : "ConversationsUnarchiveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.unarchive method"
      },
      "ConversationMPIMObject" : {
        "title" : "Conversation MPIM Object",
        "required" : [ "created", "creator", "id", "is_archived", "is_channel", "is_general", "is_group", "is_im", "is_mpim", "is_org_shared", "is_private", "is_shared", "name", "name_normalized", "purpose", "topic" ],
        "type" : "object",
        "properties" : {
          "is_pending_ext_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPendingExtShared"
          },
          "pending_shared" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "pendingShared"
          },
          "internal_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "internalTeamIds"
          },
          "is_channel" : {
            "type" : "boolean",
            "x-ballerina-name" : "isChannel"
          },
          "members" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          },
          "is_non_threadable" : {
            "type" : "boolean",
            "x-ballerina-name" : "isNonThreadable"
          },
          "pin_count" : {
            "type" : "integer",
            "x-ballerina-name" : "pinCount"
          },
          "is_read_only" : {
            "type" : "boolean",
            "x-ballerina-name" : "isReadOnly"
          },
          "id" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "is_im" : {
            "type" : "boolean",
            "x-ballerina-name" : "isIm"
          },
          "is_member" : {
            "type" : "boolean",
            "x-ballerina-name" : "isMember"
          },
          "is_open" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOpen"
          },
          "created" : {
            "type" : "integer"
          },
          "display_counts" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/ConversationObjDisplayCounts1"
            } ],
            "x-ballerina-name" : "displayCounts"
          },
          "priority" : {
            "type" : "number"
          },
          "version" : {
            "type" : "integer"
          },
          "is_starred" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStarred"
          },
          "is_archived" : {
            "type" : "boolean",
            "x-ballerina-name" : "isArchived"
          },
          "name" : {
            "type" : "string"
          },
          "topic" : {
            "$ref" : "#/components/schemas/ConversationObjTopic1"
          },
          "shared_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "sharedTeamIds"
          },
          "is_org_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOrgShared"
          },
          "is_private" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPrivate"
          },
          "accepted_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserIdDef"
            } ],
            "x-ballerina-name" : "acceptedUser"
          },
          "conversation_host_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            } ],
            "x-ballerina-name" : "conversationHostId"
          },
          "purpose" : {
            "$ref" : "#/components/schemas/ConversationObjPurpose1"
          },
          "is_moved" : {
            "type" : "integer",
            "x-ballerina-name" : "isMoved"
          },
          "shares" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjShares1"
            }
          },
          "unread_count" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCount"
          },
          "is_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isShared"
          },
          "previous_names" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelNameDef"
            },
            "x-ballerina-name" : "previousNames"
          },
          "connected_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "connectedTeamIds"
          },
          "pending_connected_team_ids" : {
            "minItems" : 0,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "pendingConnectedTeamIds"
          },
          "latest" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjLatest1"
            }
          },
          "last_read" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TsDef"
            } ],
            "x-ballerina-name" : "lastRead"
          },
          "creator" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "is_frozen" : {
            "type" : "boolean",
            "x-ballerina-name" : "isFrozen"
          },
          "is_mpim" : {
            "type" : "boolean",
            "enum" : [ true ],
            "x-ballerina-name" : "isMpim"
          },
          "timezone_count" : {
            "type" : "integer",
            "x-ballerina-name" : "timezoneCount"
          },
          "is_ext_shared" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExtShared"
          },
          "name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "nameNormalized"
          },
          "unread_count_display" : {
            "type" : "integer",
            "x-ballerina-name" : "unreadCountDisplay"
          },
          "is_group" : {
            "type" : "boolean",
            "x-ballerina-name" : "isGroup"
          },
          "unlinked" : {
            "title" : "Field to determine whether a channel has ever been shared/disconnected in the past",
            "type" : "integer"
          },
          "is_general" : {
            "type" : "boolean",
            "x-ballerina-name" : "isGeneral"
          },
          "num_members" : {
            "type" : "integer",
            "x-ballerina-name" : "numMembers"
          },
          "is_thread_only" : {
            "type" : "boolean",
            "x-ballerina-name" : "isThreadOnly"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "parent_conversation" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationObjParentConversation1"
            },
            "x-ballerina-name" : "parentConversation"
          }
        },
        "additionalProperties" : false
      },
      "DefaultSuccessResponse41" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AdminConversationsSearchResponse" : {
        "title" : "AdminConversationsSearchResponse",
        "required" : [ "channels", "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          },
          "channels" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChannelObj"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.search"
      },
      "ChatMeMessageResponse" : {
        "title" : "ChatMeMessageResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "$ref" : "#/components/schemas/ChannelDef"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "ts" : {
            "$ref" : "#/components/schemas/TsDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from chat.meMessage method"
      },
      "BotProfileObj" : {
        "title" : "Bot Profile Object",
        "required" : [ "app_id", "deleted", "icons", "id", "name", "team_id", "updated" ],
        "type" : "object",
        "properties" : {
          "deleted" : {
            "type" : "boolean"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/BotIdDef"
          },
          "team_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/TeamDef"
            } ],
            "x-ballerina-name" : "teamId"
          },
          "icons" : {
            "$ref" : "#/components/schemas/BotProfileObjIcons"
          },
          "app_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AppIdDef"
            } ],
            "x-ballerina-name" : "appId"
          },
          "updated" : {
            "type" : "integer"
          }
        },
        "additionalProperties" : false
      },
      "ReactionsAddErrorResponse" : {
        "title" : "ReactionsAddErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "message_not_found", "no_item_specified", "invalid_name", "already_reacted", "too_many_emoji", "too_many_reactions", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reactions.add method"
      },
      "DefaultSuccessResponse49" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "PrimaryOwnerObj" : {
        "required" : [ "email", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "InlineArrayItemsConversationObj" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/ConversationObject"
        }, {
          "$ref" : "#/components/schemas/ConversationMPIMObject"
        }, {
          "$ref" : "#/components/schemas/ConversationIMChannelObjectFromConversationsMethods"
        } ]
      },
      "AdminConversationsDeleteBody" : {
        "required" : [ "channel_id" ],
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to delete",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "DefaultSuccessResponse62" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ReactionsAddResponse" : {
        "title" : "ReactionsAddResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reactions.add method"
      },
      "DefaultSuccessResponse61" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AdminConversationsUnarchiveErrorResponse" : {
        "title" : "AdminConversationsUnarchiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "not_an_admin", "not_an_enterprise", "restricted_action", "missing_scope", "channel_not_found", "channel_type_not_supported", "could_not_get_conversation_prefs" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.getConversationPrefs"
      },
      "DefaultSuccessResponse60" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AdminConversationsConvertToPrivateBody" : {
        "required" : [ "channel_id" ],
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to convert to private",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "UsersLookupByEmailErrorResponse" : {
        "title" : "UsersLookupByEmailErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "users_not_found", "enterprise_is_restricted", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.lookupByEmail method"
      },
      "DndEndDndErrorResponse" : {
        "title" : "DndEndDndErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "unknown_error", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from dnd.endDnd method"
      },
      "ConversationsMarkBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Channel or conversation to set the read cursor for"
          },
          "ts" : {
            "type" : "number",
            "description" : "Unique identifier of message you want marked as most recently seen in this conversation"
          }
        }
      },
      "DefaultSuccessResponse59" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse58" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse57" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "LatestAnyOf23" : {
        "nullable" : true
      },
      "DefaultSuccessResponse56" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "LatestAnyOf22" : {
        "nullable" : true
      },
      "DefaultSuccessResponse55" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "LatestAnyOf21" : {
        "nullable" : true
      },
      "DefaultSuccessResponse54" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "RtmConnectResponseSelf" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          }
        },
        "additionalProperties" : false
      },
      "DefaultSuccessResponse53" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse52" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ChatUpdateErrorResponse" : {
        "title" : "ChatUpdateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "message_not_found", "cant_update_message", "channel_not_found", "edit_window_closed", "msg_too_long", "too_many_attachments", "rate_limited", "no_text", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "request_timeout", "invalid_json", "json_not_object", "upgrade_required", "fatal_error", "is_inactive" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response chat.update method"
      },
      "BotsInfoErrorResponse" : {
        "title" : "BotsInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bot_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from bots.info method"
      },
      "ResponseMetadata" : {
        "title" : "Response metadata",
        "type" : "object",
        "properties" : {
          "warnings" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AdminConversationsUnarchiveBody" : {
        "required" : [ "channel_id" ],
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "The channel to unarchive",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "CallsParticipantsAddBody" : {
        "required" : [ "id", "users" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "`id` returned by the [`calls.add`](/methods/calls.add) method"
          },
          "users" : {
            "type" : "string",
            "description" : "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)"
          }
        }
      },
      "200200AnyOf12" : {
        "required" : [ "count", "ok" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false
      },
      "AdminTeamsSettingsSetIconBody" : {
        "required" : [ "image_url", "team_id", "token" ],
        "type" : "object",
        "properties" : {
          "image_url" : {
            "type" : "string",
            "description" : "Image URL for the icon",
            "x-ballerina-name" : "imageUrl"
          },
          "team_id" : {
            "type" : "string",
            "description" : "ID for the workspace to set the icon for",
            "x-ballerina-name" : "teamId"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `admin.teams:write`"
          }
        }
      },
      "ConversationsRepliesResponse" : {
        "title" : "ConversationsRepliesResponse",
        "required" : [ "messages", "ok" ],
        "type" : "object",
        "properties" : {
          "messages" : {
            "type" : "array",
            "items" : {
              "type" : "array",
              "items" : {
                "anyOf" : [ {
                  "required" : [ "reply_count", "subscribed", "text", "thread_ts", "ts", "type", "user" ],
                  "type" : "object",
                  "properties" : {
                    "last_read" : {
                      "$ref" : "#/components/schemas/TsDef"
                    },
                    "latest_reply" : {
                      "$ref" : "#/components/schemas/TsDef"
                    },
                    "reply_count" : {
                      "type" : "integer"
                    },
                    "reply_users" : {
                      "uniqueItems" : true,
                      "type" : "array",
                      "items" : {
                        "$ref" : "#/components/schemas/UserIdDef"
                      }
                    },
                    "reply_users_count" : {
                      "type" : "integer"
                    },
                    "source_team" : {
                      "$ref" : "#/components/schemas/TeamDef"
                    },
                    "subscribed" : {
                      "type" : "boolean"
                    },
                    "team" : {
                      "$ref" : "#/components/schemas/TeamDef"
                    },
                    "text" : {
                      "type" : "string"
                    },
                    "thread_ts" : {
                      "$ref" : "#/components/schemas/TsDef"
                    },
                    "ts" : {
                      "$ref" : "#/components/schemas/TsDef"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "unread_count" : {
                      "type" : "integer"
                    },
                    "user" : {
                      "$ref" : "#/components/schemas/UserIdDef"
                    },
                    "user_profile" : {
                      "$ref" : "#/components/schemas/UserProfileShortObj"
                    },
                    "user_team" : {
                      "$ref" : "#/components/schemas/TeamDef"
                    }
                  },
                  "additionalProperties" : false
                }, {
                  "required" : [ "parent_user_id", "text", "thread_ts", "ts", "type", "user" ],
                  "type" : "object",
                  "properties" : {
                    "is_starred" : {
                      "type" : "boolean"
                    },
                    "parent_user_id" : {
                      "$ref" : "#/components/schemas/UserIdDef"
                    },
                    "source_team" : {
                      "$ref" : "#/components/schemas/TeamDef"
                    },
                    "team" : {
                      "$ref" : "#/components/schemas/TeamDef"
                    },
                    "text" : {
                      "type" : "string"
                    },
                    "thread_ts" : {
                      "$ref" : "#/components/schemas/TsDef"
                    },
                    "ts" : {
                      "$ref" : "#/components/schemas/TsDef"
                    },
                    "type" : {
                      "type" : "string"
                    },
                    "user" : {
                      "$ref" : "#/components/schemas/UserIdDef"
                    },
                    "user_profile" : {
                      "$ref" : "#/components/schemas/UserProfileShortObj"
                    },
                    "user_team" : {
                      "$ref" : "#/components/schemas/TeamDef"
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          },
          "has_more" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasMore"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.replies method"
      },
      "RemindersCompleteResponse" : {
        "title" : "RemindersCompleteResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reminders.complete method"
      },
      "ChatPostMessageBody" : {
        "required" : [ "channel" ],
        "type" : "object",
        "properties" : {
          "icon_url" : {
            "type" : "string",
            "description" : "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below",
            "x-ballerina-name" : "iconUrl"
          },
          "link_names" : {
            "type" : "boolean",
            "description" : "Find and link channel names and usernames",
            "x-ballerina-name" : "linkNames"
          },
          "attachments" : {
            "type" : "string",
            "description" : "A JSON-based array of structured attachments, presented as a URL-encoded string"
          },
          "icon_emoji" : {
            "type" : "string",
            "description" : "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below",
            "x-ballerina-name" : "iconEmoji"
          },
          "blocks" : {
            "type" : "string",
            "description" : "A JSON-based array of structured blocks, presented as a URL-encoded string"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details"
          },
          "parse" : {
            "type" : "string",
            "description" : "Change how messages are treated. Defaults to `none`. See [below](#formatting)"
          },
          "mrkdwn" : {
            "type" : "boolean",
            "description" : "Disable Slack markup parsing by setting to `false`. Enabled by default"
          },
          "as_user" : {
            "type" : "string",
            "description" : "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below",
            "x-ballerina-name" : "asUser"
          },
          "thread_ts" : {
            "type" : "string",
            "description" : "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead",
            "x-ballerina-name" : "threadTs"
          },
          "unfurl_media" : {
            "type" : "boolean",
            "description" : "Pass false to disable unfurling of media content",
            "x-ballerina-name" : "unfurlMedia"
          },
          "reply_broadcast" : {
            "type" : "boolean",
            "description" : "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`",
            "x-ballerina-name" : "replyBroadcast"
          },
          "unfurl_links" : {
            "type" : "boolean",
            "description" : "Pass true to enable unfurling of primarily text-based content",
            "x-ballerina-name" : "unfurlLinks"
          },
          "text" : {
            "type" : "string",
            "description" : "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail"
          },
          "username" : {
            "type" : "string",
            "description" : "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below"
          }
        }
      },
      "DefaultSuccessResponse26" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AppIdDef" : {
        "title" : "App ID",
        "pattern" : "^A[A-Z0-9]{1,}$",
        "type" : "string"
      },
      "DefaultSuccessResponse25" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse24" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ChatDeleteScheduledMessageBody" : {
        "required" : [ "channel", "scheduled_message_id" ],
        "type" : "object",
        "properties" : {
          "as_user" : {
            "type" : "boolean",
            "description" : "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope",
            "x-ballerina-name" : "asUser"
          },
          "scheduled_message_id" : {
            "type" : "string",
            "description" : "`scheduled_message_id` returned from call to chat.scheduleMessage",
            "x-ballerina-name" : "scheduledMessageId"
          },
          "channel" : {
            "type" : "string",
            "description" : "The channel the scheduled_message is posting to"
          }
        }
      },
      "DefaultSuccessResponse23" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsUnarchiveErrorResponse" : {
        "title" : "ConversationsUnarchiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_archived", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.unarchive method"
      },
      "DefaultSuccessResponse22" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse21" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse20" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "FileObjShares" : {
        "type" : "object",
        "properties" : {
          "private" : {
            "type" : "object",
            "additionalProperties" : false
          },
          "public" : {
            "type" : "object",
            "additionalProperties" : false
          }
        },
        "additionalProperties" : false
      },
      "UsergroupsCreateBody" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "channels" : {
            "type" : "string",
            "description" : "A comma separated string of encoded channel IDs for which the User Group uses as a default"
          },
          "name" : {
            "type" : "string",
            "description" : "A name for the User Group. Must be unique among User Groups"
          },
          "description" : {
            "type" : "string",
            "description" : "A short description of the User Group"
          },
          "handle" : {
            "type" : "string",
            "description" : "A mention handle. Must be unique among channels, users and User Groups"
          },
          "include_count" : {
            "type" : "boolean",
            "description" : "Include the number of users in each User Group",
            "x-ballerina-name" : "includeCount"
          }
        }
      },
      "UsergroupsUsersUpdateResponse" : {
        "title" : "UsergroupsUsersUpdateResponse",
        "required" : [ "ok", "usergroup" ],
        "type" : "object",
        "properties" : {
          "usergroup" : {
            "$ref" : "#/components/schemas/SubteamObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.users.update method"
      },
      "DefaultSuccessResponse29" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse28" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationObjPurpose1" : {
        "required" : [ "creator", "last_set", "value" ],
        "type" : "object",
        "properties" : {
          "last_set" : {
            "type" : "integer",
            "x-ballerina-name" : "lastSet"
          },
          "creator" : {
            "$ref" : "#/components/schemas/TopicPurposeCreatorDef"
          },
          "value" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false
      },
      "UserProfileObj" : {
        "title" : "User profile object",
        "required" : [ "avatar_hash", "display_name", "display_name_normalized", "fields", "phone", "real_name", "real_name_normalized", "skype", "status_emoji", "status_text", "title" ],
        "type" : "object",
        "properties" : {
          "image_32" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image32"
          },
          "status_emoji" : {
            "type" : "string",
            "x-ballerina-name" : "statusEmoji"
          },
          "guest_invited_by" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "guestInvitedBy"
          },
          "is_restricted" : {
            "type" : "boolean",
            "nullable" : true,
            "x-ballerina-name" : "isRestricted"
          },
          "api_app_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/OptionalAppIdDef"
            } ],
            "x-ballerina-name" : "apiAppId"
          },
          "image_192" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image192"
          },
          "real_name" : {
            "type" : "string",
            "x-ballerina-name" : "realName"
          },
          "title" : {
            "type" : "string"
          },
          "status_text_canonical" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "statusTextCanonical"
          },
          "skype" : {
            "type" : "string"
          },
          "is_app_user" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAppUser"
          },
          "image_original" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "imageOriginal"
          },
          "guest_expiration_ts" : {
            "type" : "integer",
            "nullable" : true,
            "x-ballerina-name" : "guestExpirationTs"
          },
          "real_name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "realNameNormalized"
          },
          "avatar_hash" : {
            "type" : "string",
            "x-ballerina-name" : "avatarHash"
          },
          "first_name" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "firstName"
          },
          "bot_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/BotIdDef"
            } ],
            "x-ballerina-name" : "botId"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },
          "image_512" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image512"
          },
          "status_default_text_canonical" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "statusDefaultTextCanonical"
          },
          "is_ultra_restricted" : {
            "type" : "boolean",
            "nullable" : true,
            "x-ballerina-name" : "isUltraRestricted"
          },
          "image_1024" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image1024"
          },
          "status_default_emoji" : {
            "type" : "string",
            "x-ballerina-name" : "statusDefaultEmoji"
          },
          "image_24" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image24"
          },
          "last_name" : {
            "type" : "string",
            "nullable" : true,
            "x-ballerina-name" : "lastName"
          },
          "image_48" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image48"
          },
          "team" : {
            "$ref" : "#/components/schemas/WorkspaceIdDef"
          },
          "display_name" : {
            "type" : "string",
            "x-ballerina-name" : "displayName"
          },
          "last_avatar_image_hash" : {
            "type" : "string",
            "x-ballerina-name" : "lastAvatarImageHash"
          },
          "always_active" : {
            "type" : "boolean",
            "x-ballerina-name" : "alwaysActive"
          },
          "status_expiration" : {
            "type" : "integer",
            "x-ballerina-name" : "statusExpiration"
          },
          "memberships_count" : {
            "type" : "integer",
            "x-ballerina-name" : "membershipsCount"
          },
          "phone" : {
            "type" : "string"
          },
          "user_id" : {
            "type" : "string",
            "x-ballerina-name" : "userId"
          },
          "name" : {
            "type" : "string",
            "nullable" : true
          },
          "status_default_text" : {
            "type" : "string",
            "x-ballerina-name" : "statusDefaultText"
          },
          "pronouns" : {
            "type" : "string"
          },
          "is_custom_image" : {
            "type" : "boolean",
            "x-ballerina-name" : "isCustomImage"
          },
          "status_text" : {
            "type" : "string",
            "x-ballerina-name" : "statusText"
          },
          "fields" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object"
            }
          },
          "image_72" : {
            "type" : "string",
            "format" : "uri",
            "nullable" : true,
            "x-ballerina-name" : "image72"
          },
          "updated" : {
            "type" : "integer"
          },
          "display_name_normalized" : {
            "type" : "string",
            "x-ballerina-name" : "displayNameNormalized"
          },
          "username" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "DefaultSuccessResponse27" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AdminUsersSetRegularBody" : {
        "required" : [ "team_id", "user_id" ],
        "type" : "object",
        "properties" : {
          "user_id" : {
            "type" : "string",
            "description" : "The ID of the user to designate as a regular user",
            "x-ballerina-name" : "userId"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The ID (`T1234`) of the workspace",
            "x-ballerina-name" : "teamId"
          }
        }
      },
      "AutoTypeAnyOf1" : {
        "nullable" : true
      },
      "Blocks" : {
        "title" : "Block Kit blocks",
        "type" : "array",
        "description" : "This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace",
        "items" : {
          "$ref" : "#/components/schemas/BlocksInner"
        }
      },
      "EnterpriseUserIdDef" : {
        "title" : "Enterprise User ID",
        "pattern" : "^[WU][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "NewPagingStyle" : {
        "title" : "new paging style",
        "required" : [ "next_cursor" ],
        "type" : "object",
        "properties" : {
          "next_cursor" : {
            "type" : "string",
            "x-ballerina-name" : "nextCursor"
          }
        },
        "additionalProperties" : false
      },
      "FilesUploadErrorResponse" : {
        "title" : "FilesUploadErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "posting_to_general_channel_denied", "invalid_channel", "file_uploads_disabled", "file_uploads_except_images_disabled", "storage_limit_reached", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response files.upload method"
      },
      "AdminConversationsDisconnectSharedErrorResponse" : {
        "title" : "AdminConversationsDisconnectSharedErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "not_an_admin", "not_an_enterprise", "channel_not_found", "not_supported", "team_not_found", "restricted_action", "missing_scope", "leaving_team_not_in_channel", "no_teams_to_disconnect", "leaving_team_required", "cannot_kick_team", "cannot_kick_home_team" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.disconnectShared"
      },
      "DefaultSuccessResponse40" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ReactionsListErrorResponse" : {
        "title" : "ReactionsListErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "user_not_found", "not_authed", "invalid_auth", "account_inactiv", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reactions.list method"
      },
      "AdminConversationsSetTeamsBody" : {
        "required" : [ "channel_id" ],
        "type" : "object",
        "properties" : {
          "org_channel" : {
            "type" : "boolean",
            "description" : "True if channel has to be converted to an org channel",
            "x-ballerina-name" : "orgChannel"
          },
          "target_team_ids" : {
            "type" : "string",
            "description" : "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide",
            "x-ballerina-name" : "targetTeamIds"
          },
          "team_id" : {
            "type" : "string",
            "description" : "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel",
            "x-ballerina-name" : "teamId"
          },
          "channel_id" : {
            "type" : "string",
            "description" : "The encoded `channel_id` to add or remove to workspaces",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "DefaultSuccessResponse37" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AppsPermissionsInfoResponseInfoIm" : {
        "type" : "object",
        "properties" : {
          "resources" : {
            "$ref" : "#/components/schemas/ResourcesObj"
          },
          "scopes" : {
            "$ref" : "#/components/schemas/ScopesObj"
          }
        }
      },
      "DefaultSuccessResponse36" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse35" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse34" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse33" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse32" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse31" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AutoTypeAutoTypeAnyOf12" : {
        "type" : "string",
        "enum" : [ "owner", "admin" ]
      },
      "DefaultSuccessResponse30" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "AdminConversationsGetConversationPrefsResponse" : {
        "title" : "AdminConversationsGetConversationPrefsResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "prefs" : {
            "$ref" : "#/components/schemas/AdminConversationsGetConversationPrefsResponsePrefs"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.getConversationPrefs"
      },
      "ConversationObjDisplayCounts1" : {
        "required" : [ "display_counts", "guest_counts" ],
        "type" : "object",
        "properties" : {
          "display_counts" : {
            "type" : "integer",
            "x-ballerina-name" : "displayCounts"
          },
          "guest_counts" : {
            "type" : "integer",
            "x-ballerina-name" : "guestCounts"
          }
        },
        "additionalProperties" : false
      },
      "InlineResponseItems200" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/200AnyOf1"
        }, {
          "$ref" : "#/components/schemas/200200AnyOf12"
        } ]
      },
      "DefaultSuccessResponse39" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "SubteamObjAutoType" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/AutoTypeAnyOf1"
        }, {
          "$ref" : "#/components/schemas/AutoTypeAutoTypeAnyOf12"
        } ]
      },
      "UserObj" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/InlineArrayItemsUserObj"
        }
      },
      "DefaultSuccessResponse38" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ChatUpdateResponse" : {
        "title" : "ChatUpdateResponse",
        "required" : [ "channel", "message", "ok", "text", "ts" ],
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string"
          },
          "text" : {
            "type" : "string"
          },
          "message" : {
            "$ref" : "#/components/schemas/MessageObject"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "ts" : {
            "type" : "string"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of chat.update method"
      },
      "PinsRemoveErrorResponse" : {
        "title" : "PinsRemoveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "file_not_found", "file_comment_not_found", "message_not_found", "no_item_specified", "not_pinned", "permission_denied", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_typ", "missing_post_typ", "team_added_to_org", "invalid_json", "json_not_object", "request_timeou", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from pins.remove method"
      },
      "ConversationsArchiveErrorResponse" : {
        "title" : "ConversationsArchiveErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "not_supported", "channel_not_found", "already_archived", "cant_archive_general", "restricted_action", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.archive method"
      },
      "ParentConversationAnyOf2" : {
        "nullable" : true
      },
      "InlineArrayItemsUserObj" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/UserObjAnyOf1"
        }, {
          "$ref" : "#/components/schemas/UserObjUserObjAnyOf12"
        } ]
      },
      "AdminConversationsSetConversationPrefsErrorResponse" : {
        "title" : "AdminConversationsSetConversationPrefsErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "not_an_admin", "channel_not_found", "channel_type_not_supported", "restricted_action", "missing_scope", "could_not_set_channel_pref", "default_org_wide_channel" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.setConversationPrefs"
      },
      "AdminConversationsSearchErrorResponse" : {
        "title" : "AdminConversationsSearchErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "not_an_admin", "not_an_enterprise", "team_not_found", "not_allowed", "invalid_auth", "invalid_cursor", "invalid_search_channel_type", "invalid_sort", "invalid_sort_dir" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.search"
      },
      "ChannelDef" : {
        "title" : "Channel-like conversation ID",
        "pattern" : "^[CGD][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "OptionalAppIdDef" : {
        "title" : "App ID or empty string",
        "pattern" : "^(A[A-Z0-9]{1,})?$",
        "type" : "string"
      },
      "RemindersDeleteErrorResponse" : {
        "title" : "RemindersDeleteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from reminders.delete method"
      },
      "ConversationsLeaveBody" : {
        "type" : "object",
        "properties" : {
          "channel" : {
            "type" : "string",
            "description" : "Conversation to leave"
          }
        }
      },
      "ApiTestResponse" : {
        "title" : "ApiTestResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Schema for successful response api.test method"
      },
      "AppsPermissionsResourcesListResponseResources" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "title" : "An ID for a resource",
            "type" : "string",
            "x-examples" : [ "T0DES3UAN", "C0ABC1ABC" ]
          },
          "type" : {
            "title" : "The type of resource the `id` corresponds to",
            "type" : "string",
            "x-examples" : [ "team", "channel", "mpim" ]
          }
        }
      },
      "MigrationExchangeResponse" : {
        "title" : "MigrationExchangeResponse",
        "required" : [ "enterprise_id", "ok", "team_id" ],
        "type" : "object",
        "properties" : {
          "enterprise_id" : {
            "title" : "The enterprise grid organization ID containing the workspace/team.",
            "type" : "string"
          },
          "invalid_user_ids" : {
            "title" : "A list of User IDs that cannot be mapped or found",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "team_id" : {
            "$ref" : "#/components/schemas/TeamDef"
          },
          "user_id_map" : {
            "title" : "A mapping of provided user IDs with mapped user IDs",
            "type" : "object",
            "additionalProperties" : true
          }
        },
        "additionalProperties" : true,
        "description" : "Schema for successful response from migration.exchange method"
      },
      "ConversationsMarkErrorResponse" : {
        "title" : "ConversationsMarkErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "invalid_timestamp", "not_in_channel", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "not_allowed_token_type" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.mark method"
      },
      "AdminConversationsDeleteErrorResponse" : {
        "title" : "AdminConversationsDeleteErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "string",
            "enum" : [ "feature_not_enabled", "not_an_admin", "channel_not_found", "channel_type_not_supported", "default_org_wide_channel", "restricted_action", "could_not_delete_channel", "missing_scope" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from admin.conversations.delete"
      },
      "UsergroupsListResponse" : {
        "title" : "UsergroupsListResponse",
        "required" : [ "ok", "usergroups" ],
        "type" : "object",
        "properties" : {
          "usergroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SubteamObj"
            }
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from usergroups.list method"
      },
      "ChatDeleteBody" : {
        "type" : "object",
        "properties" : {
          "as_user" : {
            "type" : "boolean",
            "description" : "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope",
            "x-ballerina-name" : "asUser"
          },
          "channel" : {
            "type" : "string",
            "description" : "Channel containing the message to be deleted"
          },
          "ts" : {
            "type" : "number",
            "description" : "Timestamp of the message to be deleted"
          }
        }
      },
      "ConversationsHistoryResponse" : {
        "title" : "ConversationsHistoryResponse",
        "required" : [ "channel_actions_count", "channel_actions_ts", "has_more", "messages", "ok", "pin_count" ],
        "type" : "object",
        "properties" : {
          "channel_actions_count" : {
            "type" : "integer",
            "x-ballerina-name" : "channelActionsCount"
          },
          "pin_count" : {
            "type" : "integer",
            "x-ballerina-name" : "pinCount"
          },
          "messages" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MessageObj"
            }
          },
          "channel_actions_ts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConversationsHistoryResponseChannelActionsTs"
            },
            "x-ballerina-name" : "channelActionsTs"
          },
          "has_more" : {
            "type" : "boolean",
            "x-ballerina-name" : "hasMore"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.history method"
      },
      "UsersSetPhotoBody" : {
        "required" : [ "token" ],
        "type" : "object",
        "properties" : {
          "crop_y" : {
            "type" : "string",
            "description" : "Y coordinate of top-left corner of crop box",
            "x-ballerina-name" : "cropY"
          },
          "image" : {
            "type" : "string",
            "description" : "File contents via `multipart/form-data`"
          },
          "crop_w" : {
            "type" : "string",
            "description" : "Width/height of crop box (always square)",
            "x-ballerina-name" : "cropW"
          },
          "crop_x" : {
            "type" : "string",
            "description" : "X coordinate of top-left corner of crop box",
            "x-ballerina-name" : "cropX"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `users.profile:write`"
          }
        }
      },
      "DndEndDndResponse" : {
        "title" : "DndEndDndResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from dnd.endDnd method"
      },
      "DefaultSuccessResponse15" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse14" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse13" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "ConversationsLeaveResponse" : {
        "title" : "ConversationsLeaveResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "not_in_channel" : {
            "type" : "boolean",
            "enum" : [ true ],
            "x-ballerina-name" : "notInChannel"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from conversations.leave method"
      },
      "DefaultSuccessResponse12" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse11" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse10" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "UsergroupsUsersUpdateErrorResponse" : {
        "title" : "UsergroupsUsersUpdateErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "permission_denied", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_require", "fatal_error", "missing_charset", "superfluous_charset" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from usergroups.users.update method"
      },
      "DndSetSnoozeBody" : {
        "required" : [ "num_minutes", "token" ],
        "type" : "object",
        "properties" : {
          "num_minutes" : {
            "type" : "string",
            "description" : "Number of minutes, from now, to snooze until",
            "x-ballerina-name" : "numMinutes"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `dnd:write`"
          }
        }
      },
      "ConversationsCreateBody" : {
        "type" : "object",
        "properties" : {
          "is_private" : {
            "type" : "boolean",
            "description" : "Create a private channel instead of a public one",
            "x-ballerina-name" : "isPrivate"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the public or private channel to create"
          }
        }
      },
      "DefaultSuccessResponse19" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "RtmConnectResponse" : {
        "title" : "RtmConnectResponse",
        "required" : [ "ok", "self", "team", "url" ],
        "type" : "object",
        "properties" : {
          "self" : {
            "$ref" : "#/components/schemas/RtmConnectResponseSelf"
          },
          "team" : {
            "$ref" : "#/components/schemas/RtmConnectResponseTeam"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "url" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from rtm.connect method"
      },
      "DefaultSuccessResponse18" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse17" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "DefaultSuccessResponse16" : {
        "title" : "DefaultSuccessResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _OK_ response or a verbose schema is not available for this method"
      },
      "WorkspaceIdDef" : {
        "title" : "Team or Enterprise ID",
        "pattern" : "^[TE][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "ConversationObjLatest2" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/MessageObj"
        }, {
          "$ref" : "#/components/schemas/LatestAnyOf23"
        } ]
      },
      "ConversationObjLatest1" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/MessageObj"
        }, {
          "$ref" : "#/components/schemas/LatestAnyOf22"
        } ]
      },
      "AdminConversationsInviteBody" : {
        "required" : [ "channel_id", "user_ids" ],
        "type" : "object",
        "properties" : {
          "user_ids" : {
            "type" : "string",
            "description" : "The users to invite",
            "x-ballerina-name" : "userIds"
          },
          "channel_id" : {
            "type" : "string",
            "description" : "The channel that the users will be invited to",
            "x-ballerina-name" : "channelId"
          }
        }
      },
      "AppsPermissionsInfoResponse" : {
        "title" : "AppsPermissionsInfoResponse",
        "required" : [ "info", "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "info" : {
            "$ref" : "#/components/schemas/AppsPermissionsInfoResponseInfo"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from apps.permissions.info method"
      },
      "GroupIdDef" : {
        "title" : "Private Channel ID",
        "pattern" : "^[G][A-Z0-9]{8,}$",
        "type" : "string"
      },
      "TeamInfoErrorResponse" : {
        "title" : "TeamInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from team.info method"
      },
      "UsersIdentityErrorResponse" : {
        "title" : "UsersIdentityErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from users.identity method"
      },
      "TeamObjDiscoverable" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/DiscoverableAnyOf1"
        }, {
          "$ref" : "#/components/schemas/DiscoverableDiscoverableAnyOf12"
        } ]
      },
      "RemindersAddResponse" : {
        "title" : "RemindersAddResponse",
        "required" : [ "ok", "reminder" ],
        "type" : "object",
        "properties" : {
          "reminder" : {
            "$ref" : "#/components/schemas/ReminderObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from reminders.add method"
      },
      "AdminConversationsGetTeamsResponse" : {
        "title" : "AdminConversationsGetTeamsResponse",
        "required" : [ "ok", "team_ids" ],
        "type" : "object",
        "properties" : {
          "team_ids" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TeamDef"
            },
            "x-ballerina-name" : "teamIds"
          },
          "response_metadata" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/AdminConversationsGetTeamsResponseResponseMetadata"
            } ],
            "x-ballerina-name" : "responseMetadata"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response of admin.conversations.getTeams"
      },
      "AppsUninstallErrorResponse" : {
        "title" : "AppsUninstallErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "invalid_client_id", "bad_client_secret", "client_id_token_mismatch", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from apps.uninstall method"
      },
      "FilesRevokePublicURLBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "File to revoke"
          }
        }
      },
      "FilesRemoteRemoveBody" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "description" : "Specify a file by providing its ID"
          },
          "external_id" : {
            "type" : "string",
            "description" : "Creator defined GUID for the file",
            "x-ballerina-name" : "externalId"
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token. Requires scope: `remote_files:write`"
          }
        }
      },
      "DefaultErrorTemplate11" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "StarsAddErrorResponse" : {
        "title" : "StarsAddErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "bad_timestamp", "message_not_found", "file_not_found", "file_comment_not_found", "channel_not_found", "no_item_specified", "already_starred", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from stars.add method"
      },
      "DefaultErrorTemplate10" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "ReactionObj" : {
        "title" : "Reaction object",
        "required" : [ "count", "name", "users" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserIdDef"
            }
          }
        },
        "additionalProperties" : true
      },
      "DefaultErrorTemplate13" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate12" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "UserObjUserObjAnyOf12" : {
        "required" : [ "id", "is_app_user", "is_bot", "name", "profile", "updated" ],
        "type" : "object",
        "properties" : {
          "color" : {
            "pattern" : "^([a-fA-F0-9]{6})?$",
            "type" : "string",
            "description" : "refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559"
          },
          "has_2fa" : {
            "type" : "boolean",
            "x-ballerina-name" : "has2fa"
          },
          "is_restricted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isRestricted"
          },
          "tz" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserObjTz1"
            }
          },
          "tz_label" : {
            "type" : "string",
            "x-ballerina-name" : "tzLabel"
          },
          "is_primary_owner" : {
            "type" : "boolean",
            "x-ballerina-name" : "isPrimaryOwner"
          },
          "team_profile" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/UserObjTeamProfile1"
            } ],
            "x-ballerina-name" : "teamProfile"
          },
          "real_name" : {
            "type" : "string",
            "x-ballerina-name" : "realName"
          },
          "team_id" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            } ],
            "x-ballerina-name" : "teamId"
          },
          "locale" : {
            "type" : "string"
          },
          "is_admin" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAdmin"
          },
          "is_app_user" : {
            "type" : "boolean",
            "x-ballerina-name" : "isAppUser"
          },
          "tz_offset" : {
            "type" : "number",
            "x-ballerina-name" : "tzOffset"
          },
          "is_stranger" : {
            "type" : "boolean",
            "x-ballerina-name" : "isStranger"
          },
          "is_forgotten" : {
            "type" : "boolean",
            "x-ballerina-name" : "isForgotten"
          },
          "id" : {
            "$ref" : "#/components/schemas/UserIdDef"
          },
          "is_bot" : {
            "type" : "boolean",
            "x-ballerina-name" : "isBot"
          },
          "presence" : {
            "type" : "string"
          },
          "is_ultra_restricted" : {
            "type" : "boolean",
            "x-ballerina-name" : "isUltraRestricted"
          },
          "teams" : {
            "minItems" : 1,
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/WorkspaceIdDef"
            }
          },
          "is_owner" : {
            "type" : "boolean",
            "x-ballerina-name" : "isOwner"
          },
          "profile" : {
            "$ref" : "#/components/schemas/UserProfileObj"
          },
          "is_external" : {
            "type" : "boolean",
            "x-ballerina-name" : "isExternal"
          },
          "enterprise_user" : {
            "allOf" : [ {
              "$ref" : "#/components/schemas/EnterpriseUserObj"
            } ],
            "x-ballerina-name" : "enterpriseUser"
          },
          "deleted" : {
            "type" : "boolean"
          },
          "two_factor_type" : {
            "type" : "string",
            "x-ballerina-name" : "twoFactorType"
          },
          "name" : {
            "type" : "string"
          },
          "updated" : {
            "type" : "number"
          }
        },
        "additionalProperties" : false,
        "description" : "enterprise user"
      },
      "DefaultErrorTemplate15" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate14" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "TeamProfileGetResponse" : {
        "title" : "TeamProfileGetResponse",
        "required" : [ "ok", "profile" ],
        "type" : "object",
        "properties" : {
          "profile" : {
            "$ref" : "#/components/schemas/TeamProfileGetResponseProfile"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from team.profile.get method"
      },
      "DefaultErrorTemplate17" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate16" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "DefaultErrorTemplate19" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "TeamProfileFieldObjOptions" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/OptionsAnyOf1"
        }, {
          "$ref" : "#/components/schemas/TeamProfileFieldOptionObj"
        } ]
      },
      "DefaultErrorTemplate18" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "FilesRevokePublicURLErrorResponse" : {
        "title" : "FilesRevokePublicURLErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "file_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from files.revokePublicURL method"
      },
      "InlineArrayItemsResponseMetadataObj" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/NewPagingStyle"
        }, {
          "$ref" : "#/components/schemas/DeprecationWarning"
        }, {
          "$ref" : "#/components/schemas/DeprecationWarningAndPagingStyleTogether"
        } ]
      },
      "ConversationsHistoryErrorResponse" : {
        "title" : "ConversationsHistoryErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "needed" : {
            "type" : "string"
          },
          "provided" : {
            "type" : "string"
          },
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "missing_scope", "channel_not_found", "invalid_ts_latest", "invalid_ts_oldest", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from conversations.history method"
      },
      "200AnyOf1" : {
        "required" : [ "items", "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          },
          "items" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/200Items"
            }
          }
        },
        "additionalProperties" : false
      },
      "ConversationsKickResponse" : {
        "title" : "ConversationsKickResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response conversations.kick method"
      },
      "FilesInfoErrorResponse" : {
        "title" : "FilesInfoErrorResponse",
        "required" : [ "error", "ok" ],
        "type" : "object",
        "properties" : {
          "callstack" : {
            "type" : "string",
            "description" : "Note: PHP callstack is only visible in dev/qa"
          },
          "error" : {
            "type" : "string",
            "enum" : [ "file_not_found", "file_deleted", "timezone_count_failed", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required" ]
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for error response from files.info method"
      },
      "RemindersAddBody" : {
        "required" : [ "text", "time" ],
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "The content of the reminder"
          },
          "time" : {
            "type" : "string",
            "description" : "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
          },
          "user" : {
            "type" : "string",
            "description" : "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it"
          }
        }
      },
      "StarsAddResponse" : {
        "title" : "StarsAddResponse",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from stars.add method"
      },
      "ConversationsOpenBody" : {
        "type" : "object",
        "properties" : {
          "return_im" : {
            "type" : "boolean",
            "description" : "Boolean, indicates you want the full IM channel definition in the response",
            "x-ballerina-name" : "returnIm"
          },
          "channel" : {
            "type" : "string",
            "description" : "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead"
          },
          "users" : {
            "type" : "string",
            "description" : "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`"
          }
        }
      },
      "DefaultErrorTemplate20" : {
        "title" : "DefaultErrorTemplate",
        "required" : [ "ok" ],
        "type" : "object",
        "properties" : {
          "ok" : {
            "$ref" : "#/components/schemas/OkFalseDef"
          }
        },
        "additionalProperties" : true,
        "description" : "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method"
      },
      "FilesSharedPublicURLResponse" : {
        "title" : "FilesSharedPublicURLResponse",
        "required" : [ "file", "ok" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response from files.sharedPublicURL method"
      },
      "FilesUploadResponse" : {
        "title" : "FilesUploadResponse",
        "required" : [ "file", "ok" ],
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/FileObj"
          },
          "ok" : {
            "$ref" : "#/components/schemas/OkTrueDef"
          }
        },
        "additionalProperties" : false,
        "description" : "Schema for successful response files.upload method"
      }
    },
    "requestBodies" : {
      "admin_inviteRequests_approve" : {
        "content" : {
          "application/x-www-form-urlencoded" : {
            "schema" : {
              "required" : [ "invite_request_id" ],
              "type" : "object",
              "properties" : {
                "invite_request_id" : {
                  "type" : "string",
                  "description" : "ID of the request to invite."
                },
                "team_id" : {
                  "type" : "string",
                  "description" : "ID for the workspace where the invite request was made."
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "slackAuth" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://slack.com/oauth/authorize",
            "tokenUrl" : "https://slack.com/api/oauth.access",
            "scopes" : {
              "admin" : "admin",
              "admin.apps:read" : "admin.apps:read",
              "admin.apps:write" : "admin.apps:write",
              "admin.conversations:read" : "admin.conversations:read",
              "admin.conversations:write" : "admin.conversations:write",
              "admin.invites:read" : "admin.invites:read",
              "admin.invites:write" : "admin.invites:write",
              "admin.teams:read" : "admin.teams:read",
              "admin.teams:write" : "admin.teams:write",
              "admin.usergroups:read" : "admin.usergroups:read",
              "admin.usergroups:write" : "admin.usergroups:write",
              "admin.users:read" : "admin.users:read",
              "admin.users:write" : "admin.users:write",
              "authorizations:read" : "authorizations:read",
              "bot" : "Bot user scope",
              "calls:read" : "calls:read",
              "calls:write" : "calls:write",
              "channels:history" : "channels:history",
              "channels:manage" : "channels:manage",
              "channels:read" : "channels:read",
              "channels:write" : "channels:write",
              "chat:write" : "chat:write",
              "chat:write:bot" : "Author messages as a bot",
              "chat:write:user" : "Author messages as a user",
              "conversations:history" : "conversations:history",
              "conversations:read" : "conversations:read",
              "conversations:write" : "conversations:write",
              "dnd:read" : "dnd:read",
              "dnd:write" : "dnd:write",
              "emoji:read" : "emoji:read",
              "files:read" : "files:read",
              "files:write:user" : "files:write:user",
              "groups:history" : "groups:history",
              "groups:read" : "groups:read",
              "groups:write" : "groups:write",
              "identity.basic" : "identity.basic",
              "im:history" : "im:history",
              "im:read" : "im:read",
              "im:write" : "im:write",
              "links:write" : "links:write",
              "mpim:history" : "mpim:history",
              "mpim:read" : "mpim:read",
              "mpim:write" : "mpim:write",
              "none" : "No scope required",
              "pins:read" : "pins:read",
              "pins:write" : "pins:write",
              "reactions:read" : "reactions:read",
              "reactions:write" : "reactions:write",
              "reminders:read" : "reminders:read",
              "reminders:write" : "reminders:write",
              "remote_files:read" : "remote_files:read",
              "remote_files:share" : "remote_files:share",
              "remote_files:write" : "remote_files:write",
              "rtm:stream" : "rtm:stream",
              "search:read" : "search:read",
              "stars:read" : "stars:read",
              "stars:write" : "stars:write",
              "team:read" : "team:read",
              "tokens.basic" : "tokens.basic",
              "usergroups:read" : "usergroups:read",
              "usergroups:write" : "usergroups:write",
              "users.profile:read" : "users.profile:read",
              "users.profile:write" : "users.profile:write",
              "users:read" : "users:read",
              "users:read.email" : "users:read.email",
              "users:write" : "users:write",
              "workflow.steps:execute" : "workflow.steps:execute"
            }
          }
        }
      }
    }
  }
}